{"version":3,"sources":["../src/protohax/protohax.ts","../src/compact_move.ts","../src/gen/pbjs_pb.json","../src/pbreflect.ts","../src/protoutil.ts","../src/gen/pbjs_pb.js","../src/util.ts"],"sourcesContent":["export const enum Wiretype {\n  VARINT = 0,\n  I64 = 1,\n  LEN = 2,\n  SGROUP = 3,\n  EGROUP = 4,\n  I32 = 5,\n}\n\nexport const enum DigResult {\n  SUCCESS = 0,\n  NOT_FOUND = 1,\n  ERROR = 2,\n}\n\nexport const EMPTY_BUFFER = Buffer.of();\n\ntype Packable = keyof ProtoHax &\n  (\n    | 'Int32'\n    | 'Int64'\n    | 'Uint32'\n    | 'Uint64'\n    | 'Bool'\n    | 'Enum'\n    | 'Sint32'\n    | 'Sint64'\n    | 'Sfixed32'\n    | 'Fixed32'\n    | 'Float'\n    | 'Sfixed64'\n    | 'Fixed64'\n    | 'Double'\n  );\ntype Unpacked<T extends Packable> = ProtoHax[T] extends () => infer P ? P : never;\n\n/**\n * Read selected values from a serialized protocol buffer message. Used to optimize\n * the processing time of PlayerMove messages.\n */\nexport class ProtoHax {\n  private pos: number = 0;\n  private last: number = 0;\n  private end: number;\n  private ok: boolean;\n\n  constructor(private buf: Buffer) {\n    this.end = buf.length;\n    this.ok = this.pos < this.end;\n  }\n\n  atEnd() {\n    return this.pos >= this.end;\n  }\n\n  private varint(): void {\n    if (!this.ok) return;\n\n    this.last = 0;\n\n    // read up to 4 bytes of a varint (bitwise-safe value up to 28 bits of payload)\n    for (var b = 0, shift = 0; shift < 28; shift += 7) {\n      b = this.buf[this.pos++];\n      this.last |= (b & 0x7f) << shift;\n\n      if ((b & 0x80) === 0) return; // we hit the end of the varint\n    }\n\n    // if we still have bytes to read, we failed\n    this.ok = (b & 0x80) === 0;\n  }\n\n  private skipVarint() {\n    if (!this.ok) return;\n\n    // varints can be up to 10 bytes, representing up to a 64-bit unsigned int\n    for (var i = 0; i < 10; i++) {\n      if ((this.buf[this.pos++] & 0x80) === 0) return;\n    }\n\n    // we read 10 bytes all with an MSB of 1, we weren't at a valid varint\n    this.ok = false;\n  }\n\n  // skip the specified number of bytes\n  private skipBytes(bytes: number) {\n    this.pos += bytes;\n  }\n\n  private skipGroup(sgroup: number) {\n    var until = sgroup ^ (Wiretype.EGROUP ^ Wiretype.SGROUP);\n    do {\n      this.skip(); // skip the current tag's payload\n      this.varint(); // read the next tag\n    } while (this.ok && this.last !== until);\n  }\n\n  // skip over a payload. the tag should be in `this.last`\n  private skip() {\n    if (!this.ok) return;\n\n    // prettier-ignore\n    switch (this.last & 0x07) {\n      // VARINT: int32, int64, uint32, uint64, sint32, sint64, bool, enum\n      case Wiretype.VARINT: this.skipVarint(); break;\n      // I64: fixed64, sfixed64, double\n      case Wiretype.I64: this.skipBytes(8); break;\n      // LEN: string, bytes, embedded messages, packed repeated fields\n      case Wiretype.LEN: this.varint(); this.skipBytes(this.last); break;\n      // SGROUP: group start (deprecated)\n      case Wiretype.SGROUP: this.skipGroup(this.last); break;\n      // EGROUP: group end (deprecated)\n      case Wiretype.EGROUP: break;\n      // I32: fixed32, sfixed32, float\n      case Wiretype.I32: this.skipBytes(4); break;\n      default: throw new Error('Invalid wire type: '+(this.last&0x07));\n    }\n\n    this.ok = this.pos < this.buf.length;\n  }\n\n  private readVarint32(): number {\n    this.varint();\n\n    // if varint succeeded, the value was read in <= 4 bytes and we can just\n    // return and call it a day\n    if (this.ok) return this.last >>> 0;\n\n    // we've read 4 out of a possible 10 bytes so far. the worst case is -1, which will be\n    // 9* 0xff followed by 0x01. There are four remaining bits that might have meaning to\n    // us, and the rest can be ignored since we're only reading a 32 bit number.\n    //\n    // even though the wiretype of this varint knows it's a 32 bit number, it still records\n    // all 64 bits. it's unclear whether that is sane behavior, but because the data is\n    // recorded as little-endian, it has the effect that very large negative values stored\n    // as int32 will be smaller in their varint encoding. see:\n    // https://github.com/protocolbuffers/protobuf-javascript/blob/8730ba5e0f5153c5889c356193d93778c6300932/binary/encoder.js#L145-L172\n    //\n    // either way, we have to deal with the data we could potentially receive.\n\n    // read the 5th byte\n    var b = this.buf[this.pos++];\n    this.ok = (b & 0x80) === 0;\n\n    // store the last 4 bits of the 5th input byte in the top 4 bits of the value\n    // ____aaaa aaabbbbb bbcccccc cddddddd\n    //                            0___eeee\n    // eeee____ ________ ________ ________\n    this.last |= (b & 0x0f) << 28;\n\n    // consume up to 5 more bytes of varint and discard them\n    for (var i = 0; !this.ok && i < 5; i++) {\n      b = this.buf[this.pos++];\n      this.ok = (b & 0x80) === 0;\n    }\n\n    if (!this.ok) throw new Error('VARINT read failed');\n\n    // return as unsigned\n    return this.last >>> 0;\n  }\n\n  private readVarint64(): bigint {\n    if (!this.ok) return 0n;\n    this.varint();\n\n    var big = BigInt(this.last);\n    if (this.ok) return big;\n\n    // it's a big one, read the rest. this could probably be\n    // done more efficiently by working with in 32 bit space\n    // as regular js numbers. however, that's a pain and i'm\n    // just looking for something that clearly works for now\n    for (var b = 0, shift = 28n; shift < 70n; shift += 7n) {\n      b = this.buf[this.pos++];\n      big |= (BigInt(b) & 0x7fn) << shift;\n\n      if ((b & 0x80) === 0) break; // we hit the end of the varint\n    }\n\n    this.ok = (b & 0x80) === 0;\n    if (!this.ok) throw new Error('VARINT64 read failed');\n\n    // we can technically construct >64bit values; we rely on\n    // the calling functions to interpret and truncate the data\n    return big & 0xffffffffffffffffn;\n  }\n\n  // varint     := int32 | int64 | uint32 | uint64 | bool | enum | sint32 | sint64;\n  //                 encoded as varints (sintN are ZigZag-encoded first)\n  Int32(): number {\n    if (!this.ok) return 0;\n    return this.readVarint32() | 0;\n  }\n  Int64(): bigint {\n    if (!this.ok) return 0n;\n    return BigInt.asIntN(64, this.readVarint64());\n  }\n  Uint32(): number {\n    if (!this.ok) return 0;\n    return this.readVarint32() >>> 0;\n  }\n  Uint64(): bigint {\n    if (!this.ok) return 0n;\n    return BigInt.asUintN(64, this.readVarint64());\n  }\n  Bool(): boolean {\n    if (!this.ok) return false;\n    var val = this.readVarint32();\n    switch (val) {\n      case 0:\n        return false;\n      case 1:\n        return true;\n      default:\n        throw new Error('Invalid boolean value');\n    }\n  }\n  Enum(): number {\n    if (!this.ok) return 0;\n    var val = this.readVarint32();\n    return val;\n  }\n  Sint32(): number {\n    if (!this.ok) return 0;\n    var zze = this.readVarint32();\n    return (zze >>> 1) ^ -(zze & 1);\n  }\n  Sint64(): bigint {\n    if (!this.ok) return 0n;\n    var zze = this.readVarint64();\n    return (zze >> 1n) ^ -(zze & 1n);\n  }\n\n  // i32        := sfixed32 | fixed32 | float;\n  //                 encoded as 4-byte little-endian;\n  //                 memcpy of the equivalent C types (u?int32_t, float)\n  Sfixed32(): number {\n    if (!this.ok || this.pos > this.end - 4) return 0;\n    var val = this.buf.readInt32LE(this.pos);\n    this.pos += 4;\n    return val;\n  }\n  Fixed32(): number {\n    if (!this.ok || this.pos > this.end - 4) return 0;\n    var val = this.buf.readUint32LE(this.pos);\n    this.pos += 4;\n    return val;\n  }\n  Float(): number {\n    if (!this.ok || this.pos > this.end - 4) return 0;\n    var val = this.buf.readFloatLE(this.pos);\n    this.pos += 4;\n    return val;\n  }\n\n  // i64        := sfixed64 | fixed64 | double;\n  //                 encoded as 8-byte little-endian;\n  //                 memcpy of the equivalent C types (u?int64_t, double)\n  Sfixed64(): bigint {\n    if (!this.ok || this.pos > this.end - 8) return 0n;\n    var val = this.buf.readBigInt64LE(this.pos);\n    this.pos += 8;\n    return val;\n  }\n  Fixed64(): bigint {\n    if (!this.ok || this.pos > this.end - 8) return 0n;\n    var val = this.buf.readBigUint64LE(this.pos);\n    this.pos += 8;\n    return val;\n  }\n  Double(): number {\n    if (!this.ok || this.pos > this.end - 8) return 0;\n    var val = this.buf.readDoubleLE(this.pos);\n    this.pos += 8;\n    return val;\n  }\n\n  // len-prefix := size (message | string | bytes | packed);\n  //                 size encoded as int32 varint\n  Bytes(): Buffer {\n    if (!this.ok) return EMPTY_BUFFER;\n    return this.buf.subarray(this.pos, this.end);\n  }\n\n  String(): string {\n    if (!this.ok) return '';\n    return this.buf.toString('utf-8', this.pos, this.end);\n  }\n\n  // Only repeated fields of primitive numeric types can be declared \"packed\".\n  // These are types that would normally use the VARINT, I32, or I64 wire types.\n  Packed<const T extends Packable>(type: T): Unpacked<T>[] {\n    var arr: Unpacked<T>[] = [];\n    while (this.ok && this.pos < this.end) {\n      arr.push(this[type]() as Unpacked<T>);\n    }\n    if (!this.ok) throw new Error('packed read failed');\n    return arr;\n  }\n\n  private seek(fieldId: number) {\n    if (!this.ok) return;\n    this.varint();\n    while (this.last >>> 3 !== fieldId) {\n      this.skip();\n      if (!this.ok) break;\n      this.varint();\n    }\n  }\n\n  private size(): number {\n    switch ((this.last & 0x07) as Wiretype) {\n      case Wiretype.VARINT:\n        return 0;\n      case Wiretype.I64:\n        return 8;\n      case Wiretype.I32:\n        return 4;\n      case Wiretype.LEN:\n        return this.readVarint32();\n      // can't know the size of groups without reading them, and\n      // we don't really care.\n      case Wiretype.SGROUP:\n      case Wiretype.EGROUP:\n        throw new Error('not implemented');\n    }\n  }\n\n  /**\n   * Seek to the next instance of fieldId, which must be a LEN wiretype,\n   * and rescope this instance to its payload\n   */\n  with(fieldId: number): ProtoHax {\n    this.seek(fieldId);\n    if (!this.ok) return this;\n    var size = this.size();\n    this.end = size ? this.pos + size : this.end;\n    return this;\n  }\n\n  /**\n   * Find the next instance of the specified fieldId, and call the callback\n   * with a new ProtoHax instance if found.\n   */\n  if(fieldId: number, cb: (phax: ProtoHax) => void): ProtoHax {\n    if (!this.ok) return this;\n    this.seek(fieldId);\n    if (!this.ok) return this;\n    var size = this.size();\n    var val;\n    if (size > 0) {\n      val = this.buf.subarray(this.pos, this.pos + size);\n      // move the pointer forward by the size of the payload\n      this.pos += size;\n    } else {\n      val = this.buf.subarray(this.pos);\n      // we're assuming here that size=0 is a varint, and everything\n      // else (that doesn't throw an error) has a size that's known\n      // up-front. therefore, in order to move our position pointer\n      // forward, all we have to do here is skip a varint\n      this.skipVarint();\n    }\n    if (this.ok) cb(new ProtoHax(val));\n    this.ok = this.pos < this.end;\n    return this;\n  }\n\n  /**\n   * Find all instances of the specified fieldId and call the callback\n   * with a new ProtoHax instance for each.\n   */\n  each(fieldId: number, cb: (phax: ProtoHax) => void): ProtoHax {\n    while (this.ok) {\n      this.if(fieldId, cb);\n      // this.skip();\n    }\n    return this;\n  }\n}\n","/**\n * Create an encoder-decoder pair for lossy-encoding radian\n * values (`armR`) to integers that can be compactly encoded\n * as varints.\n * @param targetBytes The size, in bytes, of encoded values\n * when serialized as a varint\n */\nexport const createArmrCoder = (targetBytes: number) => {\n  const factor = 2 ** (7 * targetBytes);\n  const pi2 = Math.PI * 2 + 1;\n\n  return {\n    /**\n     * Lossily encode `v`, a value in radians between -PI and PI,\n     * as an unsigned integer to fit within `targetBytes` of\n     * serialized protobuf output.\n     * @see {createArmrCoder}\n     */\n    encodeArmR: (v: number) => (((v + Math.PI) * factor) / pi2) | 0,\n    /**\n     * Decode a lossily-encoded value `v` to a value in radians\n     * between -PI and PI.\n     * @see {createArmrCoder}\n     */\n    decodeArmR: (v: number) => (v * pi2) / factor - Math.PI,\n  };\n};\n\nexport const createDeltaCoder = (fractionalDigits: number) => {\n  const factor = 10 ** fractionalDigits;\n  return {\n    encodeDelta: (len: number, get: (i: number) => number): { init: number; deltas: number[] } => {\n      if (len === 0) return { init: 0, deltas: [] };\n\n      const init = get(0);\n      const deltas: number[] = [];\n\n      if (typeof init !== 'number') throw new Error('Invalid value');\n\n      let last = init;\n      for (let i = 1; i < len; i++) {\n        const val = get(i);\n        if (typeof val !== 'number') throw new Error('Invalid value');\n\n        const d = Math.round((val - last) * factor);\n        deltas.push(d);\n        last += d / factor; // ameliorate rounding errors\n      }\n      return { init, deltas };\n    },\n    decodeDelta: (init: number, deltas: number[], set: (i: number, v: number) => void): void => {\n      let cum = init;\n      set(0, cum);\n      for (let i = 0; i < deltas.length; i++) {\n        cum += deltas[i] / factor;\n        set(i + 1, cum);\n      }\n    },\n  };\n};\n\nexport const encodeBitfield = (len: number, next: (i: number) => number): number => {\n  if (len > 32) throw new Error('Cannot encode more than 32 values in a bitfield');\n  let res = 0;\n  for (let i = 0; i < len; i++) {\n    const val = next(i);\n    // values must be -1 or 1\n    if (val !== -1 && val !== 1) throw new Error('Invalid value: ' + val);\n    res |= ((val + 1) >>> 1) << i;\n    // javascript bitwise operations operate on 32-bit signed integers\n  }\n  return res >>> 0; // convert to unsigned\n};\nexport const decodeBitfield = (len: number, val: number, set: (i: number, val: number) => void): void => {\n  if (len > 32) throw new Error('Cannot encode more than 32 values in a bitfield');\n  for (let i = 0; i < len; i++) {\n    set(i, ((val & 1) << 1) - 1);\n    val >>>= 1;\n  }\n};\n\nexport const encodeStable = (len: number, get: (i: number) => number): { idxs: number[]; vals: number[] } => {\n  let last = 0;\n  const idxs: number[] = [];\n  const vals: number[] = [];\n  for (let i = 0; i < len; i++) {\n    const val = get(i);\n    if (val === last) continue;\n    idxs.push(i);\n    vals.push(val);\n    last = val;\n  }\n  return { idxs, vals };\n};\nexport const decodeStable = (\n  len: number,\n  idxs: number[],\n  vals: number[],\n  set: (i: number, val: number) => void,\n): void => {\n  if (idxs.length !== vals.length) throw new Error('Invalid data: arrays must be same length');\n  let cur = 0;\n  for (let i = 0, pos = 0; i < len; i++) {\n    if (idxs[pos] === i) {\n      cur = vals[pos];\n      pos++;\n    }\n    set(i, cur);\n  }\n};\n","{\n  \"nested\": {\n    \"NT\": {\n      \"nested\": {\n        \"Envelope\": {\n          \"oneofs\": {\n            \"kind\": {\n              \"oneof\": [\n                \"gameAction\",\n                \"lobbyAction\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"gameAction\": {\n              \"type\": \"GameAction\",\n              \"id\": 1\n            },\n            \"lobbyAction\": {\n              \"type\": \"LobbyAction\",\n              \"id\": 50\n            }\n          }\n        },\n        \"GameAction\": {\n          \"oneofs\": {\n            \"action\": {\n              \"oneof\": [\n                \"cPlayerMove\",\n                \"sPlayerMoves\",\n                \"cPlayerUpdate\",\n                \"sPlayerUpdate\",\n                \"cPlayerUpdateInventory\",\n                \"sPlayerUpdateInventory\",\n                \"cHostItemBank\",\n                \"sHostItemBank\",\n                \"cHostUserTake\",\n                \"sHostUserTake\",\n                \"cHostUserTakeGold\",\n                \"sHostUserTakeGold\",\n                \"cPlayerAddGold\",\n                \"sPlayerAddGold\",\n                \"cPlayerTakeGold\",\n                \"sPlayerTakeGold\",\n                \"cPlayerAddItem\",\n                \"sPlayerAddItem\",\n                \"cPlayerTakeItem\",\n                \"sPlayerTakeItem\",\n                \"cPlayerPickup\",\n                \"sPlayerPickup\",\n                \"cNemesisAbility\",\n                \"sNemesisAbility\",\n                \"cNemesisPickupItem\",\n                \"sNemesisPickupItem\",\n                \"cChat\",\n                \"sChat\",\n                \"cPlayerDeath\",\n                \"sPlayerDeath\",\n                \"cPlayerNewGamePlus\",\n                \"sPlayerNewGamePlus\",\n                \"cPlayerSecretHourglass\",\n                \"sPlayerSecretHourglass\",\n                \"cCustomModEvent\",\n                \"sCustomModEvent\",\n                \"cRespawnPenalty\",\n                \"sRespawnPenalty\",\n                \"cAngerySteve\",\n                \"sAngerySteve\",\n                \"sStatUpdate\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"cPlayerMove\": {\n              \"type\": \"CompactPlayerFrames\",\n              \"id\": 1\n            },\n            \"sPlayerMoves\": {\n              \"type\": \"ServerPlayerMoves\",\n              \"id\": 2\n            },\n            \"cPlayerUpdate\": {\n              \"type\": \"ClientPlayerUpdate\",\n              \"id\": 3\n            },\n            \"sPlayerUpdate\": {\n              \"type\": \"ServerPlayerUpdate\",\n              \"id\": 4\n            },\n            \"cPlayerUpdateInventory\": {\n              \"type\": \"ClientPlayerUpdateInventory\",\n              \"id\": 5\n            },\n            \"sPlayerUpdateInventory\": {\n              \"type\": \"ServerPlayerUpdateInventory\",\n              \"id\": 6\n            },\n            \"cHostItemBank\": {\n              \"type\": \"ClientHostItemBank\",\n              \"id\": 7\n            },\n            \"sHostItemBank\": {\n              \"type\": \"ServerHostItemBank\",\n              \"id\": 8\n            },\n            \"cHostUserTake\": {\n              \"type\": \"ClientHostUserTake\",\n              \"id\": 9\n            },\n            \"sHostUserTake\": {\n              \"type\": \"ServerHostUserTake\",\n              \"id\": 10\n            },\n            \"cHostUserTakeGold\": {\n              \"type\": \"ClientHostUserTakeGold\",\n              \"id\": 11\n            },\n            \"sHostUserTakeGold\": {\n              \"type\": \"ServerHostUserTakeGold\",\n              \"id\": 12\n            },\n            \"cPlayerAddGold\": {\n              \"type\": \"ClientPlayerAddGold\",\n              \"id\": 13\n            },\n            \"sPlayerAddGold\": {\n              \"type\": \"ServerPlayerAddGold\",\n              \"id\": 14\n            },\n            \"cPlayerTakeGold\": {\n              \"type\": \"ClientPlayerTakeGold\",\n              \"id\": 15\n            },\n            \"sPlayerTakeGold\": {\n              \"type\": \"ServerPlayerTakeGold\",\n              \"id\": 16\n            },\n            \"cPlayerAddItem\": {\n              \"type\": \"ClientPlayerAddItem\",\n              \"id\": 17\n            },\n            \"sPlayerAddItem\": {\n              \"type\": \"ServerPlayerAddItem\",\n              \"id\": 18\n            },\n            \"cPlayerTakeItem\": {\n              \"type\": \"ClientPlayerTakeItem\",\n              \"id\": 19\n            },\n            \"sPlayerTakeItem\": {\n              \"type\": \"ServerPlayerTakeItem\",\n              \"id\": 20\n            },\n            \"cPlayerPickup\": {\n              \"type\": \"ClientPlayerPickup\",\n              \"id\": 21\n            },\n            \"sPlayerPickup\": {\n              \"type\": \"ServerPlayerPickup\",\n              \"id\": 22\n            },\n            \"cNemesisAbility\": {\n              \"type\": \"ClientNemesisAbility\",\n              \"id\": 23\n            },\n            \"sNemesisAbility\": {\n              \"type\": \"ServerNemesisAbility\",\n              \"id\": 24\n            },\n            \"cNemesisPickupItem\": {\n              \"type\": \"ClientNemesisPickupItem\",\n              \"id\": 25\n            },\n            \"sNemesisPickupItem\": {\n              \"type\": \"ServerNemesisPickupItem\",\n              \"id\": 26\n            },\n            \"cChat\": {\n              \"type\": \"ClientChat\",\n              \"id\": 27\n            },\n            \"sChat\": {\n              \"type\": \"ServerChat\",\n              \"id\": 28\n            },\n            \"cPlayerDeath\": {\n              \"type\": \"ClientPlayerDeath\",\n              \"id\": 29\n            },\n            \"sPlayerDeath\": {\n              \"type\": \"ServerPlayerDeath\",\n              \"id\": 30\n            },\n            \"cPlayerNewGamePlus\": {\n              \"type\": \"ClientPlayerNewGamePlus\",\n              \"id\": 31\n            },\n            \"sPlayerNewGamePlus\": {\n              \"type\": \"ServerPlayerNewGamePlus\",\n              \"id\": 32\n            },\n            \"cPlayerSecretHourglass\": {\n              \"type\": \"ClientPlayerSecretHourglass\",\n              \"id\": 33\n            },\n            \"sPlayerSecretHourglass\": {\n              \"type\": \"ServerPlayerSecretHourglass\",\n              \"id\": 34\n            },\n            \"cCustomModEvent\": {\n              \"type\": \"ClientCustomModEvent\",\n              \"id\": 35\n            },\n            \"sCustomModEvent\": {\n              \"type\": \"ServerCustomModEvent\",\n              \"id\": 36\n            },\n            \"cRespawnPenalty\": {\n              \"type\": \"ClientRespawnPenalty\",\n              \"id\": 37\n            },\n            \"sRespawnPenalty\": {\n              \"type\": \"ServerRespawnPenalty\",\n              \"id\": 38\n            },\n            \"cAngerySteve\": {\n              \"type\": \"ClientAngerySteve\",\n              \"id\": 39\n            },\n            \"sAngerySteve\": {\n              \"type\": \"ServerAngerySteve\",\n              \"id\": 40\n            },\n            \"sStatUpdate\": {\n              \"type\": \"ServerStatsUpdate\",\n              \"id\": 42\n            }\n          }\n        },\n        \"PlayerFrame\": {\n          \"oneofs\": {\n            \"_x\": {\n              \"oneof\": [\n                \"x\"\n              ]\n            },\n            \"_y\": {\n              \"oneof\": [\n                \"y\"\n              ]\n            },\n            \"_armR\": {\n              \"oneof\": [\n                \"armR\"\n              ]\n            },\n            \"_armScaleY\": {\n              \"oneof\": [\n                \"armScaleY\"\n              ]\n            },\n            \"_scaleX\": {\n              \"oneof\": [\n                \"scaleX\"\n              ]\n            },\n            \"_anim\": {\n              \"oneof\": [\n                \"anim\"\n              ]\n            },\n            \"_held\": {\n              \"oneof\": [\n                \"held\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"x\": {\n              \"type\": \"float\",\n              \"id\": 1,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"y\": {\n              \"type\": \"float\",\n              \"id\": 2,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"armR\": {\n              \"type\": \"float\",\n              \"id\": 3,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"armScaleY\": {\n              \"type\": \"float\",\n              \"id\": 4,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"scaleX\": {\n              \"type\": \"float\",\n              \"id\": 5,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"anim\": {\n              \"type\": \"int32\",\n              \"id\": 6,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"held\": {\n              \"type\": \"int32\",\n              \"id\": 7,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"OldClientPlayerMove\": {\n          \"fields\": {\n            \"frames\": {\n              \"rule\": \"repeated\",\n              \"type\": \"PlayerFrame\",\n              \"id\": 1\n            }\n          }\n        },\n        \"OldServerPlayerMove\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"frames\": {\n              \"rule\": \"repeated\",\n              \"type\": \"PlayerFrame\",\n              \"id\": 2\n            }\n          }\n        },\n        \"CompactPlayerFrames\": {\n          \"fields\": {\n            \"xInit\": {\n              \"type\": \"float\",\n              \"id\": 1\n            },\n            \"yInit\": {\n              \"type\": \"float\",\n              \"id\": 2\n            },\n            \"xDeltas\": {\n              \"rule\": \"repeated\",\n              \"type\": \"sint32\",\n              \"id\": 3\n            },\n            \"yDeltas\": {\n              \"rule\": \"repeated\",\n              \"type\": \"sint32\",\n              \"id\": 4\n            },\n            \"armR\": {\n              \"rule\": \"repeated\",\n              \"type\": \"int32\",\n              \"id\": 5\n            },\n            \"armScaleY\": {\n              \"type\": \"int32\",\n              \"id\": 6\n            },\n            \"scaleX\": {\n              \"type\": \"int32\",\n              \"id\": 7\n            },\n            \"animIdx\": {\n              \"rule\": \"repeated\",\n              \"type\": \"int32\",\n              \"id\": 8\n            },\n            \"animVal\": {\n              \"rule\": \"repeated\",\n              \"type\": \"int32\",\n              \"id\": 9\n            },\n            \"heldIdx\": {\n              \"rule\": \"repeated\",\n              \"type\": \"int32\",\n              \"id\": 10\n            },\n            \"heldVal\": {\n              \"rule\": \"repeated\",\n              \"type\": \"int32\",\n              \"id\": 11\n            },\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 15\n            }\n          }\n        },\n        \"ServerPlayerMoves\": {\n          \"fields\": {\n            \"userFrames\": {\n              \"rule\": \"repeated\",\n              \"type\": \"CompactPlayerFrames\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ClientPlayerUpdate\": {\n          \"oneofs\": {\n            \"_curHp\": {\n              \"oneof\": [\n                \"curHp\"\n              ]\n            },\n            \"_maxHp\": {\n              \"oneof\": [\n                \"maxHp\"\n              ]\n            },\n            \"_location\": {\n              \"oneof\": [\n                \"location\"\n              ]\n            },\n            \"_sampo\": {\n              \"oneof\": [\n                \"sampo\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"curHp\": {\n              \"type\": \"float\",\n              \"id\": 1,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"maxHp\": {\n              \"type\": \"float\",\n              \"id\": 2,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"location\": {\n              \"type\": \"string\",\n              \"id\": 3,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"sampo\": {\n              \"type\": \"bool\",\n              \"id\": 4,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"ServerPlayerUpdate\": {\n          \"oneofs\": {\n            \"_curHp\": {\n              \"oneof\": [\n                \"curHp\"\n              ]\n            },\n            \"_maxHp\": {\n              \"oneof\": [\n                \"maxHp\"\n              ]\n            },\n            \"_location\": {\n              \"oneof\": [\n                \"location\"\n              ]\n            },\n            \"_sampo\": {\n              \"oneof\": [\n                \"sampo\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"curHp\": {\n              \"type\": \"float\",\n              \"id\": 2,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"maxHp\": {\n              \"type\": \"float\",\n              \"id\": 3,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"location\": {\n              \"type\": \"string\",\n              \"id\": 4,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"sampo\": {\n              \"type\": \"bool\",\n              \"id\": 5,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"ClientPlayerUpdateInventory\": {\n          \"fields\": {\n            \"wands\": {\n              \"rule\": \"repeated\",\n              \"type\": \"InventoryWand\",\n              \"id\": 1\n            },\n            \"items\": {\n              \"rule\": \"repeated\",\n              \"type\": \"InventoryItem\",\n              \"id\": 2\n            },\n            \"spells\": {\n              \"rule\": \"repeated\",\n              \"type\": \"InventorySpell\",\n              \"id\": 3\n            }\n          },\n          \"nested\": {\n            \"InventoryWand\": {\n              \"fields\": {\n                \"index\": {\n                  \"type\": \"uint32\",\n                  \"id\": 1\n                },\n                \"wand\": {\n                  \"type\": \"Wand\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"InventoryItem\": {\n              \"fields\": {\n                \"index\": {\n                  \"type\": \"uint32\",\n                  \"id\": 3\n                },\n                \"item\": {\n                  \"type\": \"Item\",\n                  \"id\": 4\n                }\n              }\n            },\n            \"InventorySpell\": {\n              \"fields\": {\n                \"index\": {\n                  \"type\": \"uint32\",\n                  \"id\": 1\n                },\n                \"spell\": {\n                  \"type\": \"Spell\",\n                  \"id\": 2\n                }\n              }\n            }\n          }\n        },\n        \"ServerPlayerUpdateInventory\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"wands\": {\n              \"rule\": \"repeated\",\n              \"type\": \"InventoryWand\",\n              \"id\": 2\n            },\n            \"items\": {\n              \"rule\": \"repeated\",\n              \"type\": \"InventoryItem\",\n              \"id\": 3\n            },\n            \"spells\": {\n              \"rule\": \"repeated\",\n              \"type\": \"InventorySpell\",\n              \"id\": 4\n            }\n          },\n          \"nested\": {\n            \"InventoryWand\": {\n              \"fields\": {\n                \"index\": {\n                  \"type\": \"uint32\",\n                  \"id\": 1\n                },\n                \"wand\": {\n                  \"type\": \"Wand\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"InventoryItem\": {\n              \"fields\": {\n                \"index\": {\n                  \"type\": \"uint32\",\n                  \"id\": 1\n                },\n                \"item\": {\n                  \"type\": \"Item\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"InventorySpell\": {\n              \"fields\": {\n                \"index\": {\n                  \"type\": \"uint32\",\n                  \"id\": 1\n                },\n                \"spell\": {\n                  \"type\": \"Spell\",\n                  \"id\": 2\n                }\n              }\n            }\n          }\n        },\n        \"ClientHostItemBank\": {\n          \"fields\": {\n            \"wands\": {\n              \"rule\": \"repeated\",\n              \"type\": \"Wand\",\n              \"id\": 1\n            },\n            \"spells\": {\n              \"rule\": \"repeated\",\n              \"type\": \"Spell\",\n              \"id\": 2\n            },\n            \"items\": {\n              \"rule\": \"repeated\",\n              \"type\": \"Item\",\n              \"id\": 3\n            },\n            \"gold\": {\n              \"type\": \"uint32\",\n              \"id\": 4\n            },\n            \"objects\": {\n              \"rule\": \"repeated\",\n              \"type\": \"EntityItem\",\n              \"id\": 5\n            }\n          }\n        },\n        \"ServerHostItemBank\": {\n          \"fields\": {\n            \"wands\": {\n              \"rule\": \"repeated\",\n              \"type\": \"Wand\",\n              \"id\": 1\n            },\n            \"spells\": {\n              \"rule\": \"repeated\",\n              \"type\": \"Spell\",\n              \"id\": 2\n            },\n            \"items\": {\n              \"rule\": \"repeated\",\n              \"type\": \"Item\",\n              \"id\": 3\n            },\n            \"gold\": {\n              \"type\": \"uint32\",\n              \"id\": 4\n            },\n            \"objects\": {\n              \"rule\": \"repeated\",\n              \"type\": \"EntityItem\",\n              \"id\": 5\n            }\n          }\n        },\n        \"ClientHostUserTake\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 2\n            },\n            \"success\": {\n              \"type\": \"bool\",\n              \"id\": 3\n            }\n          }\n        },\n        \"ServerHostUserTake\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 2\n            },\n            \"success\": {\n              \"type\": \"bool\",\n              \"id\": 3\n            }\n          }\n        },\n        \"ClientHostUserTakeGold\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"amount\": {\n              \"type\": \"uint32\",\n              \"id\": 2\n            },\n            \"success\": {\n              \"type\": \"bool\",\n              \"id\": 3\n            }\n          }\n        },\n        \"ServerHostUserTakeGold\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"amount\": {\n              \"type\": \"uint32\",\n              \"id\": 2\n            },\n            \"success\": {\n              \"type\": \"bool\",\n              \"id\": 3\n            }\n          }\n        },\n        \"ClientPlayerAddGold\": {\n          \"fields\": {\n            \"amount\": {\n              \"type\": \"uint32\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerPlayerAddGold\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"amount\": {\n              \"type\": \"uint32\",\n              \"id\": 2\n            }\n          }\n        },\n        \"ClientPlayerTakeGold\": {\n          \"fields\": {\n            \"amount\": {\n              \"type\": \"uint32\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerPlayerTakeGold\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"amount\": {\n              \"type\": \"uint32\",\n              \"id\": 2\n            }\n          }\n        },\n        \"ClientPlayerAddItem\": {\n          \"oneofs\": {\n            \"item\": {\n              \"oneof\": [\n                \"spells\",\n                \"wands\",\n                \"flasks\",\n                \"objects\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"spells\": {\n              \"type\": \"Spells\",\n              \"id\": 1\n            },\n            \"wands\": {\n              \"type\": \"Wands\",\n              \"id\": 2\n            },\n            \"flasks\": {\n              \"type\": \"Items\",\n              \"id\": 3\n            },\n            \"objects\": {\n              \"type\": \"Entities\",\n              \"id\": 4\n            }\n          },\n          \"nested\": {\n            \"Spells\": {\n              \"fields\": {\n                \"list\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Spell\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"Wands\": {\n              \"fields\": {\n                \"list\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Wand\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"Items\": {\n              \"fields\": {\n                \"list\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Item\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"Entities\": {\n              \"fields\": {\n                \"list\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"EntityItem\",\n                  \"id\": 1\n                }\n              }\n            }\n          }\n        },\n        \"ServerPlayerAddItem\": {\n          \"oneofs\": {\n            \"item\": {\n              \"oneof\": [\n                \"spells\",\n                \"wands\",\n                \"flasks\",\n                \"objects\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"spells\": {\n              \"type\": \"Spells\",\n              \"id\": 2\n            },\n            \"wands\": {\n              \"type\": \"Wands\",\n              \"id\": 3\n            },\n            \"flasks\": {\n              \"type\": \"Items\",\n              \"id\": 4\n            },\n            \"objects\": {\n              \"type\": \"Entities\",\n              \"id\": 5\n            }\n          },\n          \"nested\": {\n            \"Spells\": {\n              \"fields\": {\n                \"list\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Spell\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"Wands\": {\n              \"fields\": {\n                \"list\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Wand\",\n                  \"id\": 2\n                }\n              }\n            },\n            \"Items\": {\n              \"fields\": {\n                \"list\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"Item\",\n                  \"id\": 3\n                }\n              }\n            },\n            \"Entities\": {\n              \"fields\": {\n                \"list\": {\n                  \"rule\": \"repeated\",\n                  \"type\": \"EntityItem\",\n                  \"id\": 4\n                }\n              }\n            }\n          }\n        },\n        \"ClientPlayerTakeItem\": {\n          \"fields\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerPlayerTakeItem\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 2\n            }\n          }\n        },\n        \"ClientChat\": {\n          \"fields\": {\n            \"message\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerChat\": {\n          \"fields\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 2\n            },\n            \"name\": {\n              \"type\": \"string\",\n              \"id\": 3\n            },\n            \"message\": {\n              \"type\": \"string\",\n              \"id\": 4\n            }\n          }\n        },\n        \"ServerStatsUpdate\": {\n          \"fields\": {\n            \"data\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ClientPlayerPickup\": {\n          \"oneofs\": {\n            \"kind\": {\n              \"oneof\": [\n                \"heart\",\n                \"orb\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"heart\": {\n              \"type\": \"HeartPickup\",\n              \"id\": 1\n            },\n            \"orb\": {\n              \"type\": \"OrbPickup\",\n              \"id\": 2\n            }\n          },\n          \"nested\": {\n            \"HeartPickup\": {\n              \"fields\": {\n                \"hpPerk\": {\n                  \"type\": \"bool\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"OrbPickup\": {\n              \"fields\": {\n                \"id\": {\n                  \"type\": \"uint32\",\n                  \"id\": 1\n                }\n              }\n            }\n          }\n        },\n        \"ServerPlayerPickup\": {\n          \"oneofs\": {\n            \"kind\": {\n              \"oneof\": [\n                \"heart\",\n                \"orb\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"heart\": {\n              \"type\": \"HeartPickup\",\n              \"id\": 2\n            },\n            \"orb\": {\n              \"type\": \"OrbPickup\",\n              \"id\": 3\n            }\n          },\n          \"nested\": {\n            \"HeartPickup\": {\n              \"fields\": {\n                \"hpPerk\": {\n                  \"type\": \"bool\",\n                  \"id\": 1\n                }\n              }\n            },\n            \"OrbPickup\": {\n              \"fields\": {\n                \"id\": {\n                  \"type\": \"uint32\",\n                  \"id\": 1\n                }\n              }\n            }\n          }\n        },\n        \"ClientNemesisPickupItem\": {\n          \"fields\": {\n            \"gameId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerNemesisPickupItem\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"gameId\": {\n              \"type\": \"string\",\n              \"id\": 2\n            }\n          }\n        },\n        \"ClientNemesisAbility\": {\n          \"fields\": {\n            \"gameId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerNemesisAbility\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"gameId\": {\n              \"type\": \"string\",\n              \"id\": 2\n            }\n          }\n        },\n        \"ClientPlayerDeath\": {\n          \"oneofs\": {\n            \"_gameTime\": {\n              \"oneof\": [\n                \"gameTime\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"isWin\": {\n              \"type\": \"bool\",\n              \"id\": 1\n            },\n            \"gameTime\": {\n              \"type\": \"uint32\",\n              \"id\": 2,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"ServerPlayerDeath\": {\n          \"oneofs\": {\n            \"_gameTime\": {\n              \"oneof\": [\n                \"gameTime\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"isWin\": {\n              \"type\": \"bool\",\n              \"id\": 2\n            },\n            \"gameTime\": {\n              \"type\": \"uint32\",\n              \"id\": 3,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"ClientPlayerNewGamePlus\": {\n          \"fields\": {\n            \"amount\": {\n              \"type\": \"uint32\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerPlayerNewGamePlus\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"amount\": {\n              \"type\": \"uint32\",\n              \"id\": 2\n            }\n          }\n        },\n        \"ClientPlayerSecretHourglass\": {\n          \"fields\": {\n            \"material\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerPlayerSecretHourglass\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"material\": {\n              \"type\": \"string\",\n              \"id\": 2\n            }\n          }\n        },\n        \"ClientCustomModEvent\": {\n          \"fields\": {\n            \"payload\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerCustomModEvent\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"payload\": {\n              \"type\": \"string\",\n              \"id\": 2\n            }\n          }\n        },\n        \"ClientRespawnPenalty\": {\n          \"fields\": {\n            \"deaths\": {\n              \"type\": \"uint32\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerRespawnPenalty\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"deaths\": {\n              \"type\": \"uint32\",\n              \"id\": 2\n            }\n          }\n        },\n        \"ClientAngerySteve\": {\n          \"fields\": {\n            \"idk\": {\n              \"type\": \"bool\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerAngerySteve\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"Wand\": {\n          \"oneofs\": {\n            \"_sentBy\": {\n              \"oneof\": [\n                \"sentBy\"\n              ]\n            },\n            \"_contributedBy\": {\n              \"oneof\": [\n                \"contributedBy\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"stats\": {\n              \"type\": \"WandStats\",\n              \"id\": 2\n            },\n            \"alwaysCast\": {\n              \"rule\": \"repeated\",\n              \"type\": \"Spell\",\n              \"id\": 3\n            },\n            \"deck\": {\n              \"rule\": \"repeated\",\n              \"type\": \"Spell\",\n              \"id\": 4\n            },\n            \"sentBy\": {\n              \"type\": \"string\",\n              \"id\": 5,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"contributedBy\": {\n              \"type\": \"string\",\n              \"id\": 6,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          },\n          \"nested\": {\n            \"WandStats\": {\n              \"fields\": {\n                \"sprite\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"named\": {\n                  \"type\": \"bool\",\n                  \"id\": 2\n                },\n                \"uiName\": {\n                  \"type\": \"string\",\n                  \"id\": 3\n                },\n                \"manaMax\": {\n                  \"type\": \"float\",\n                  \"id\": 4\n                },\n                \"manaChargeSpeed\": {\n                  \"type\": \"float\",\n                  \"id\": 5\n                },\n                \"reloadTime\": {\n                  \"type\": \"int32\",\n                  \"id\": 6\n                },\n                \"actionsPerRound\": {\n                  \"type\": \"uint32\",\n                  \"id\": 7\n                },\n                \"deckCapacity\": {\n                  \"type\": \"uint32\",\n                  \"id\": 8\n                },\n                \"shuffleDeckWhenEmpty\": {\n                  \"type\": \"bool\",\n                  \"id\": 9\n                },\n                \"spreadDegrees\": {\n                  \"type\": \"float\",\n                  \"id\": 10\n                },\n                \"speedMultiplier\": {\n                  \"type\": \"float\",\n                  \"id\": 11\n                },\n                \"fireRateWait\": {\n                  \"type\": \"int32\",\n                  \"id\": 12\n                },\n                \"tipX\": {\n                  \"type\": \"float\",\n                  \"id\": 13\n                },\n                \"tipY\": {\n                  \"type\": \"float\",\n                  \"id\": 14\n                },\n                \"gripX\": {\n                  \"type\": \"float\",\n                  \"id\": 15\n                },\n                \"gripY\": {\n                  \"type\": \"float\",\n                  \"id\": 16\n                }\n              }\n            }\n          }\n        },\n        \"Spell\": {\n          \"oneofs\": {\n            \"_sentBy\": {\n              \"oneof\": [\n                \"sentBy\"\n              ]\n            },\n            \"_contributedBy\": {\n              \"oneof\": [\n                \"contributedBy\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"gameId\": {\n              \"type\": \"string\",\n              \"id\": 2\n            },\n            \"sentBy\": {\n              \"type\": \"string\",\n              \"id\": 3,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"contributedBy\": {\n              \"type\": \"string\",\n              \"id\": 4,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"usesRemaining\": {\n              \"type\": \"int32\",\n              \"id\": 5\n            }\n          }\n        },\n        \"Item\": {\n          \"oneofs\": {\n            \"_sentBy\": {\n              \"oneof\": [\n                \"sentBy\"\n              ]\n            },\n            \"_contributedBy\": {\n              \"oneof\": [\n                \"contributedBy\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"color\": {\n              \"type\": \"Color\",\n              \"id\": 2\n            },\n            \"content\": {\n              \"rule\": \"repeated\",\n              \"type\": \"Material\",\n              \"id\": 3\n            },\n            \"sentBy\": {\n              \"type\": \"string\",\n              \"id\": 4,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"contributedBy\": {\n              \"type\": \"string\",\n              \"id\": 5,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"isChest\": {\n              \"type\": \"bool\",\n              \"id\": 6,\n              \"options\": {\n                \"deprecated\": true\n              }\n            },\n            \"itemType\": {\n              \"type\": \"string\",\n              \"id\": 7\n            }\n          },\n          \"nested\": {\n            \"Color\": {\n              \"fields\": {\n                \"r\": {\n                  \"type\": \"float\",\n                  \"id\": 1\n                },\n                \"g\": {\n                  \"type\": \"float\",\n                  \"id\": 2\n                },\n                \"b\": {\n                  \"type\": \"float\",\n                  \"id\": 3\n                }\n              }\n            },\n            \"Material\": {\n              \"fields\": {\n                \"id\": {\n                  \"type\": \"uint32\",\n                  \"id\": 1\n                },\n                \"amount\": {\n                  \"type\": \"uint32\",\n                  \"id\": 2\n                }\n              }\n            }\n          }\n        },\n        \"EntityItem\": {\n          \"oneofs\": {\n            \"_sentBy\": {\n              \"oneof\": [\n                \"sentBy\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"path\": {\n              \"type\": \"string\",\n              \"id\": 2\n            },\n            \"sprite\": {\n              \"type\": \"string\",\n              \"id\": 3\n            },\n            \"sentBy\": {\n              \"type\": \"string\",\n              \"id\": 4,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"LobbyAction\": {\n          \"oneofs\": {\n            \"action\": {\n              \"oneof\": [\n                \"cRoomCreate\",\n                \"sRoomCreated\",\n                \"sRoomCreateFailed\",\n                \"cRoomUpdate\",\n                \"sRoomUpdated\",\n                \"sRoomUpdateFailed\",\n                \"cRoomFlagsUpdate\",\n                \"sRoomFlagsUpdated\",\n                \"sRoomFlagsUpdateFailed\",\n                \"cRoomDelete\",\n                \"sRoomDeleted\",\n                \"cJoinRoom\",\n                \"sJoinRoomSuccess\",\n                \"sJoinRoomFailed\",\n                \"sUserJoinedRoom\",\n                \"cLeaveRoom\",\n                \"sUserLeftRoom\",\n                \"cKickUser\",\n                \"sUserKicked\",\n                \"cBanUser\",\n                \"sUserBanned\",\n                \"cReadyState\",\n                \"sUserReadyState\",\n                \"cStartRun\",\n                \"sHostStart\",\n                \"cRequestRoomList\",\n                \"sRoomList\",\n                \"sDisconnected\",\n                \"sRoomAddToList\",\n                \"cRunOver\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"cRoomCreate\": {\n              \"type\": \"ClientRoomCreate\",\n              \"id\": 1\n            },\n            \"sRoomCreated\": {\n              \"type\": \"ServerRoomCreated\",\n              \"id\": 2\n            },\n            \"sRoomCreateFailed\": {\n              \"type\": \"ServerRoomCreateFailed\",\n              \"id\": 3\n            },\n            \"cRoomUpdate\": {\n              \"type\": \"ClientRoomUpdate\",\n              \"id\": 4\n            },\n            \"sRoomUpdated\": {\n              \"type\": \"ServerRoomUpdated\",\n              \"id\": 5\n            },\n            \"sRoomUpdateFailed\": {\n              \"type\": \"ServerRoomUpdateFailed\",\n              \"id\": 6\n            },\n            \"cRoomFlagsUpdate\": {\n              \"type\": \"ClientRoomFlagsUpdate\",\n              \"id\": 7\n            },\n            \"sRoomFlagsUpdated\": {\n              \"type\": \"ServerRoomFlagsUpdated\",\n              \"id\": 8\n            },\n            \"sRoomFlagsUpdateFailed\": {\n              \"type\": \"ServerRoomFlagsUpdateFailed\",\n              \"id\": 9\n            },\n            \"cRoomDelete\": {\n              \"type\": \"ClientRoomDelete\",\n              \"id\": 10\n            },\n            \"sRoomDeleted\": {\n              \"type\": \"ServerRoomDeleted\",\n              \"id\": 11\n            },\n            \"cJoinRoom\": {\n              \"type\": \"ClientJoinRoom\",\n              \"id\": 12\n            },\n            \"sJoinRoomSuccess\": {\n              \"type\": \"ServerJoinRoomSuccess\",\n              \"id\": 13\n            },\n            \"sJoinRoomFailed\": {\n              \"type\": \"ServerJoinRoomFailed\",\n              \"id\": 14\n            },\n            \"sUserJoinedRoom\": {\n              \"type\": \"ServerUserJoinedRoom\",\n              \"id\": 15\n            },\n            \"cLeaveRoom\": {\n              \"type\": \"ClientLeaveRoom\",\n              \"id\": 16\n            },\n            \"sUserLeftRoom\": {\n              \"type\": \"ServerUserLeftRoom\",\n              \"id\": 17\n            },\n            \"cKickUser\": {\n              \"type\": \"ClientKickUser\",\n              \"id\": 18\n            },\n            \"sUserKicked\": {\n              \"type\": \"ServerUserKicked\",\n              \"id\": 19\n            },\n            \"cBanUser\": {\n              \"type\": \"ClientBanUser\",\n              \"id\": 20\n            },\n            \"sUserBanned\": {\n              \"type\": \"ServerUserBanned\",\n              \"id\": 21\n            },\n            \"cReadyState\": {\n              \"type\": \"ClientReadyState\",\n              \"id\": 22\n            },\n            \"sUserReadyState\": {\n              \"type\": \"ServerUserReadyState\",\n              \"id\": 23\n            },\n            \"cStartRun\": {\n              \"type\": \"ClientStartRun\",\n              \"id\": 24\n            },\n            \"sHostStart\": {\n              \"type\": \"ServerHostStart\",\n              \"id\": 25\n            },\n            \"cRequestRoomList\": {\n              \"type\": \"ClientRequestRoomList\",\n              \"id\": 27\n            },\n            \"sRoomList\": {\n              \"type\": \"ServerRoomList\",\n              \"id\": 28\n            },\n            \"sDisconnected\": {\n              \"type\": \"ServerDisconnected\",\n              \"id\": 31\n            },\n            \"sRoomAddToList\": {\n              \"type\": \"ServerRoomAddToList\",\n              \"id\": 32\n            },\n            \"cRunOver\": {\n              \"type\": \"ClientRunOver\",\n              \"id\": 33\n            }\n          }\n        },\n        \"ClientRunOver\": {\n          \"oneofs\": {\n            \"_idk\": {\n              \"oneof\": [\n                \"idk\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"idk\": {\n              \"type\": \"bool\",\n              \"id\": 1,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"ServerDisconnected\": {\n          \"fields\": {\n            \"reason\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ClientRoomDelete\": {\n          \"fields\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerRoomDeleted\": {\n          \"fields\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ClientRoomCreate\": {\n          \"oneofs\": {\n            \"_password\": {\n              \"oneof\": [\n                \"password\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"name\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"gamemode\": {\n              \"type\": \"uint32\",\n              \"id\": 2\n            },\n            \"maxUsers\": {\n              \"type\": \"uint32\",\n              \"id\": 3\n            },\n            \"password\": {\n              \"type\": \"string\",\n              \"id\": 4,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"ServerRoomCreated\": {\n          \"oneofs\": {\n            \"_password\": {\n              \"oneof\": [\n                \"password\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"name\": {\n              \"type\": \"string\",\n              \"id\": 2\n            },\n            \"gamemode\": {\n              \"type\": \"uint32\",\n              \"id\": 3\n            },\n            \"maxUsers\": {\n              \"type\": \"uint32\",\n              \"id\": 4\n            },\n            \"password\": {\n              \"type\": \"string\",\n              \"id\": 5,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"locked\": {\n              \"type\": \"bool\",\n              \"id\": 6\n            },\n            \"users\": {\n              \"rule\": \"repeated\",\n              \"type\": \"User\",\n              \"id\": 7\n            }\n          },\n          \"nested\": {\n            \"User\": {\n              \"fields\": {\n                \"userId\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"ready\": {\n                  \"type\": \"bool\",\n                  \"id\": 3\n                },\n                \"owner\": {\n                  \"type\": \"bool\",\n                  \"id\": 4\n                }\n              }\n            }\n          }\n        },\n        \"ServerRoomCreateFailed\": {\n          \"fields\": {\n            \"reason\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ClientRoomUpdate\": {\n          \"oneofs\": {\n            \"_name\": {\n              \"oneof\": [\n                \"name\"\n              ]\n            },\n            \"_gamemode\": {\n              \"oneof\": [\n                \"gamemode\"\n              ]\n            },\n            \"_maxUsers\": {\n              \"oneof\": [\n                \"maxUsers\"\n              ]\n            },\n            \"_password\": {\n              \"oneof\": [\n                \"password\"\n              ]\n            },\n            \"_locked\": {\n              \"oneof\": [\n                \"locked\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"name\": {\n              \"type\": \"string\",\n              \"id\": 1,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"gamemode\": {\n              \"type\": \"uint32\",\n              \"id\": 2,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"maxUsers\": {\n              \"type\": \"uint32\",\n              \"id\": 3,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"password\": {\n              \"type\": \"string\",\n              \"id\": 4,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"locked\": {\n              \"type\": \"bool\",\n              \"id\": 5,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"ServerRoomUpdated\": {\n          \"oneofs\": {\n            \"_name\": {\n              \"oneof\": [\n                \"name\"\n              ]\n            },\n            \"_gamemode\": {\n              \"oneof\": [\n                \"gamemode\"\n              ]\n            },\n            \"_maxUsers\": {\n              \"oneof\": [\n                \"maxUsers\"\n              ]\n            },\n            \"_password\": {\n              \"oneof\": [\n                \"password\"\n              ]\n            },\n            \"_locked\": {\n              \"oneof\": [\n                \"locked\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"name\": {\n              \"type\": \"string\",\n              \"id\": 1,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"gamemode\": {\n              \"type\": \"uint32\",\n              \"id\": 2,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"maxUsers\": {\n              \"type\": \"uint32\",\n              \"id\": 3,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"password\": {\n              \"type\": \"string\",\n              \"id\": 4,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"locked\": {\n              \"type\": \"bool\",\n              \"id\": 5,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"ServerRoomUpdateFailed\": {\n          \"fields\": {\n            \"reason\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ClientRoomFlagsUpdate\": {\n          \"fields\": {\n            \"flags\": {\n              \"rule\": \"repeated\",\n              \"type\": \"GameFlag\",\n              \"id\": 1\n            }\n          },\n          \"nested\": {\n            \"GameFlag\": {\n              \"oneofs\": {\n                \"_intVal\": {\n                  \"oneof\": [\n                    \"intVal\"\n                  ]\n                },\n                \"_strVal\": {\n                  \"oneof\": [\n                    \"strVal\"\n                  ]\n                },\n                \"_floatVal\": {\n                  \"oneof\": [\n                    \"floatVal\"\n                  ]\n                },\n                \"_boolVal\": {\n                  \"oneof\": [\n                    \"boolVal\"\n                  ]\n                },\n                \"_uIntVal\": {\n                  \"oneof\": [\n                    \"uIntVal\"\n                  ]\n                }\n              },\n              \"fields\": {\n                \"flag\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"intVal\": {\n                  \"type\": \"int32\",\n                  \"id\": 2,\n                  \"options\": {\n                    \"proto3_optional\": true\n                  }\n                },\n                \"strVal\": {\n                  \"type\": \"string\",\n                  \"id\": 3,\n                  \"options\": {\n                    \"proto3_optional\": true\n                  }\n                },\n                \"floatVal\": {\n                  \"type\": \"float\",\n                  \"id\": 4,\n                  \"options\": {\n                    \"proto3_optional\": true\n                  }\n                },\n                \"boolVal\": {\n                  \"type\": \"bool\",\n                  \"id\": 5,\n                  \"options\": {\n                    \"proto3_optional\": true\n                  }\n                },\n                \"uIntVal\": {\n                  \"type\": \"uint32\",\n                  \"id\": 6,\n                  \"options\": {\n                    \"proto3_optional\": true\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"ServerRoomFlagsUpdated\": {\n          \"fields\": {\n            \"flags\": {\n              \"rule\": \"repeated\",\n              \"type\": \"GameFlag\",\n              \"id\": 1\n            }\n          },\n          \"nested\": {\n            \"GameFlag\": {\n              \"oneofs\": {\n                \"_intVal\": {\n                  \"oneof\": [\n                    \"intVal\"\n                  ]\n                },\n                \"_strVal\": {\n                  \"oneof\": [\n                    \"strVal\"\n                  ]\n                },\n                \"_floatVal\": {\n                  \"oneof\": [\n                    \"floatVal\"\n                  ]\n                },\n                \"_boolVal\": {\n                  \"oneof\": [\n                    \"boolVal\"\n                  ]\n                },\n                \"_uIntVal\": {\n                  \"oneof\": [\n                    \"uIntVal\"\n                  ]\n                }\n              },\n              \"fields\": {\n                \"flag\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"intVal\": {\n                  \"type\": \"int32\",\n                  \"id\": 2,\n                  \"options\": {\n                    \"proto3_optional\": true\n                  }\n                },\n                \"strVal\": {\n                  \"type\": \"string\",\n                  \"id\": 3,\n                  \"options\": {\n                    \"proto3_optional\": true\n                  }\n                },\n                \"floatVal\": {\n                  \"type\": \"float\",\n                  \"id\": 4,\n                  \"options\": {\n                    \"proto3_optional\": true\n                  }\n                },\n                \"boolVal\": {\n                  \"type\": \"bool\",\n                  \"id\": 5,\n                  \"options\": {\n                    \"proto3_optional\": true\n                  }\n                },\n                \"uIntVal\": {\n                  \"type\": \"uint32\",\n                  \"id\": 6,\n                  \"options\": {\n                    \"proto3_optional\": true\n                  }\n                }\n              }\n            }\n          }\n        },\n        \"ServerRoomFlagsUpdateFailed\": {\n          \"fields\": {\n            \"reason\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ClientJoinRoom\": {\n          \"oneofs\": {\n            \"_password\": {\n              \"oneof\": [\n                \"password\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"password\": {\n              \"type\": \"string\",\n              \"id\": 2,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"ServerJoinRoomSuccess\": {\n          \"oneofs\": {\n            \"_password\": {\n              \"oneof\": [\n                \"password\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"id\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"name\": {\n              \"type\": \"string\",\n              \"id\": 2\n            },\n            \"gamemode\": {\n              \"type\": \"uint32\",\n              \"id\": 3\n            },\n            \"maxUsers\": {\n              \"type\": \"uint32\",\n              \"id\": 4\n            },\n            \"password\": {\n              \"type\": \"string\",\n              \"id\": 5,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"locked\": {\n              \"type\": \"bool\",\n              \"id\": 6\n            },\n            \"users\": {\n              \"rule\": \"repeated\",\n              \"type\": \"User\",\n              \"id\": 7\n            }\n          },\n          \"nested\": {\n            \"User\": {\n              \"fields\": {\n                \"userId\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"ready\": {\n                  \"type\": \"bool\",\n                  \"id\": 3\n                },\n                \"owner\": {\n                  \"type\": \"bool\",\n                  \"id\": 4\n                }\n              }\n            }\n          }\n        },\n        \"ServerJoinRoomFailed\": {\n          \"fields\": {\n            \"reason\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerUserJoinedRoom\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"name\": {\n              \"type\": \"string\",\n              \"id\": 2\n            }\n          }\n        },\n        \"ClientLeaveRoom\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerUserLeftRoom\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ClientKickUser\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerUserKicked\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ClientBanUser\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerUserBanned\": {\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ClientReadyState\": {\n          \"oneofs\": {\n            \"_seed\": {\n              \"oneof\": [\n                \"seed\"\n              ]\n            },\n            \"_version\": {\n              \"oneof\": [\n                \"version\"\n              ]\n            },\n            \"_beta\": {\n              \"oneof\": [\n                \"beta\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"ready\": {\n              \"type\": \"bool\",\n              \"id\": 1\n            },\n            \"seed\": {\n              \"type\": \"string\",\n              \"id\": 2,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"mods\": {\n              \"rule\": \"repeated\",\n              \"type\": \"string\",\n              \"id\": 3\n            },\n            \"version\": {\n              \"type\": \"string\",\n              \"id\": 4,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"beta\": {\n              \"type\": \"bool\",\n              \"id\": 5,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"ServerUserReadyState\": {\n          \"oneofs\": {\n            \"_seed\": {\n              \"oneof\": [\n                \"seed\"\n              ]\n            },\n            \"_version\": {\n              \"oneof\": [\n                \"version\"\n              ]\n            },\n            \"_beta\": {\n              \"oneof\": [\n                \"beta\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"userId\": {\n              \"type\": \"string\",\n              \"id\": 1\n            },\n            \"ready\": {\n              \"type\": \"bool\",\n              \"id\": 2\n            },\n            \"seed\": {\n              \"type\": \"string\",\n              \"id\": 3,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"mods\": {\n              \"rule\": \"repeated\",\n              \"type\": \"string\",\n              \"id\": 4\n            },\n            \"version\": {\n              \"type\": \"string\",\n              \"id\": 5,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            },\n            \"beta\": {\n              \"type\": \"bool\",\n              \"id\": 6,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          }\n        },\n        \"ClientStartRun\": {\n          \"fields\": {\n            \"forced\": {\n              \"type\": \"bool\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerHostStart\": {\n          \"fields\": {\n            \"forced\": {\n              \"type\": \"bool\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ClientRequestRoomList\": {\n          \"fields\": {\n            \"page\": {\n              \"type\": \"uint32\",\n              \"id\": 1\n            }\n          }\n        },\n        \"ServerRoomList\": {\n          \"oneofs\": {\n            \"_pages\": {\n              \"oneof\": [\n                \"pages\"\n              ]\n            }\n          },\n          \"fields\": {\n            \"rooms\": {\n              \"rule\": \"repeated\",\n              \"type\": \"Room\",\n              \"id\": 1\n            },\n            \"pages\": {\n              \"type\": \"uint32\",\n              \"id\": 2,\n              \"options\": {\n                \"proto3_optional\": true\n              }\n            }\n          },\n          \"nested\": {\n            \"Room\": {\n              \"fields\": {\n                \"id\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"gamemode\": {\n                  \"type\": \"uint32\",\n                  \"id\": 3\n                },\n                \"curUsers\": {\n                  \"type\": \"uint32\",\n                  \"id\": 4\n                },\n                \"maxUsers\": {\n                  \"type\": \"uint32\",\n                  \"id\": 5\n                },\n                \"protected\": {\n                  \"type\": \"bool\",\n                  \"id\": 6\n                },\n                \"owner\": {\n                  \"type\": \"string\",\n                  \"id\": 7\n                },\n                \"locked\": {\n                  \"type\": \"bool\",\n                  \"id\": 8\n                }\n              }\n            }\n          }\n        },\n        \"ServerRoomAddToList\": {\n          \"fields\": {\n            \"room\": {\n              \"type\": \"Room\",\n              \"id\": 1\n            }\n          },\n          \"nested\": {\n            \"Room\": {\n              \"fields\": {\n                \"id\": {\n                  \"type\": \"string\",\n                  \"id\": 1\n                },\n                \"name\": {\n                  \"type\": \"string\",\n                  \"id\": 2\n                },\n                \"gamemode\": {\n                  \"type\": \"uint32\",\n                  \"id\": 3\n                },\n                \"curUsers\": {\n                  \"type\": \"uint32\",\n                  \"id\": 4\n                },\n                \"maxUsers\": {\n                  \"type\": \"uint32\",\n                  \"id\": 5\n                },\n                \"protected\": {\n                  \"type\": \"bool\",\n                  \"id\": 6\n                },\n                \"owner\": {\n                  \"type\": \"string\",\n                  \"id\": 7\n                },\n                \"locked\": {\n                  \"type\": \"bool\",\n                  \"id\": 8\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}","import def from './gen/pbjs_pb.json';\n\nconst NT = def.nested.NT.nested;\n\ntype FieldList = { [key: string]: { type: string; id: number } };\ntype FieldIds<T extends FieldList> = { [K in keyof T]: T[K]['id'] } & unknown;\ntype MessageIds<T extends { [key in keyof T]: { fields: FieldList } }> = {\n  [K in keyof T]: FieldIds<T[K]['fields']>;\n} & unknown;\n\ntype UnionToIntersection<U> = (U extends any ? (k: U) => void : never) extends (k: infer I) => void ? I : never;\n\nexport const Messages: MessageIds<typeof NT> = Object.create(null) as any;\nfor (const [msgName, defs] of Object.entries(NT) as [keyof typeof NT, (typeof NT)[keyof typeof NT]][]) {\n  if (!defs.fields) continue;\n\n  const fields: UnionToIntersection<FieldIds<typeof defs.fields>> = Object.create(null) as any;\n  for (const [fieldName, nameid] of Object.entries(defs.fields) as [keyof typeof fields, { id: number }][]) {\n    fields[fieldName] = nameid.id;\n  }\n  Messages[msgName] = fields;\n}\n\nexport const gameActions = Object.keys(\n  def.nested.NT.nested.GameAction.fields,\n) as (keyof typeof def.nested.NT.nested.GameAction.fields)[];\nexport const lobbyActions = Object.keys(\n  def.nested.NT.nested.LobbyAction.fields,\n) as (keyof typeof def.nested.NT.nested.LobbyAction.fields)[];\n","import { ProtoHax, Wiretype } from './protohax/protohax';\nimport { Messages } from './pbreflect';\n\nconst gameActionId = Messages.Envelope.gameAction;\nconst cPlayerMoveId = Messages.GameAction.cPlayerMove;\nconst sPlayerMovesId = Messages.GameAction.sPlayerMoves;\nconst cpfPlayerId = Messages.CompactPlayerFrames.userId;\nconst userFramesId = Messages.ServerPlayerMoves.userFrames;\n\nexport const maybePlayerMove = (envelope: Buffer) =>\n  new ProtoHax(envelope).with(gameActionId).with(cPlayerMoveId).Bytes();\n\nconst sizeofVarint32 = (val: number): number => {\n  if (val <= 0x7f) return 1;\n  if (val <= 0x3fff) return 2;\n  if (val <= 0x1fffff) return 3;\n  if (val <= 0xfffffff) return 4;\n  if (val <= 0xffffffff) return 5;\n  throw new RangeError('Invalid value (too many bits)');\n};\nconst writeVarint32 = (buf: Buffer, val: number, pos: number): number => {\n  if (val <= 0x7f) {\n    buf[pos++] = val;\n    return 1;\n  }\n\n  if (val <= 0x3fff) {\n    buf[pos++] = (val & 0x7f) | 0x80;\n    buf[pos++] = (val >>> 7) & 0x7f;\n    return 2;\n  }\n\n  if (val <= 0x1fffff) {\n    buf[pos++] = (val & 0x7f) | 0x80;\n    buf[pos++] = ((val >>> 7) & 0x7f) | 0x80;\n    buf[pos++] = (val >>> 14) & 0x7f;\n    return 3;\n  }\n\n  if (val <= 0xfffffff) {\n    buf[pos++] = (val & 0x7f) | 0x80;\n    buf[pos++] = ((val >>> 7) & 0x7f) | 0x80;\n    buf[pos++] = ((val >>> 14) & 0x7f) | 0x80;\n    buf[pos++] = (val >>> 21) & 0x7f;\n    return 4;\n  }\n\n  if (val <= 0xffffffff) {\n    buf[pos++] = (val & 0x7f) | 0x80;\n    buf[pos++] = ((val >>> 7) & 0x7f) | 0x80;\n    buf[pos++] = ((val >>> 14) & 0x7f) | 0x80;\n    buf[pos++] = ((val >>> 21) & 0x7f) | 0x80;\n    buf[pos++] = (val >>> 28) & 0x0f;\n    return 5;\n  }\n  throw new RangeError('Invalid value (too many bits)');\n};\n\nexport const tagPlayerMove = (cpf: Buffer, pmId: Buffer): Buffer | undefined => {\n  // reject c2s CompactPlayerFrames with userId specified\n  const embeddedUserId = new ProtoHax(cpf).with(cpfPlayerId).Bytes();\n  if (embeddedUserId.length > 0) return;\n\n  // prettier-ignore\n  const userFramesPayloadSize = (\n    (1 + 1) // userId string tag + length\n    + pmId.length // userId (string) payload\n    + cpf.length // CompactPlayerFrames message (from client)\n  );\n  const userFramesHeaderSize = sizeofVarint32(userFramesPayloadSize) + 1;\n\n  const spmPayloadSize = userFramesPayloadSize + userFramesHeaderSize;\n  const spmHeaderSize = sizeofVarint32(spmPayloadSize) + 1;\n\n  const gameActionPayloadSize = spmPayloadSize + spmHeaderSize;\n  const gameActionHeaderSize = sizeofVarint32(gameActionPayloadSize) + 1;\n\n  const msgLength = gameActionHeaderSize + spmHeaderSize + userFramesHeaderSize + userFramesPayloadSize;\n\n  const buf = Buffer.alloc(msgLength);\n\n  let pos = 0;\n\n  // write GameAction tag+length\n  buf[pos++] = (gameActionId << 3) | Wiretype.LEN;\n  pos += writeVarint32(buf, gameActionPayloadSize, pos);\n\n  // write ServerPlayerMoves tag+length\n  buf[pos++] = (sPlayerMovesId << 3) | Wiretype.LEN;\n  pos += writeVarint32(buf, spmPayloadSize, pos);\n\n  // write CompactPlayerFrames tag+length\n  buf[pos++] = (userFramesId << 3) | Wiretype.LEN;\n  pos += writeVarint32(buf, userFramesPayloadSize, pos);\n\n  // write userId\n  buf[pos++] = (cpfPlayerId << 3) | Wiretype.LEN;\n  buf[pos++] = pmId.length;\n  pmId.copy(buf, pos, 0);\n  pos += pmId.length;\n\n  // write the client-sent compactframes data\n  cpf.copy(buf, pos);\n\n  return buf;\n};\n","/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\nimport * as $protobuf from \"protobufjs/minimal\";\n\n// Common aliases\nconst $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nconst $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\nexport const NT = $root.NT = (() => {\n\n    /**\n     * Namespace NT.\n     * @exports NT\n     * @namespace\n     */\n    const NT = {};\n\n    NT.Envelope = (function() {\n\n        /**\n         * Properties of an Envelope.\n         * @memberof NT\n         * @interface IEnvelope\n         * @property {NT.IGameAction|null} [gameAction] Envelope gameAction\n         * @property {NT.ILobbyAction|null} [lobbyAction] Envelope lobbyAction\n         */\n\n        /**\n         * Constructs a new Envelope.\n         * @memberof NT\n         * @classdesc Represents an Envelope.\n         * @implements IEnvelope\n         * @constructor\n         * @param {NT.IEnvelope=} [properties] Properties to set\n         */\n        function Envelope(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Envelope gameAction.\n         * @member {NT.IGameAction|null|undefined} gameAction\n         * @memberof NT.Envelope\n         * @instance\n         */\n        Envelope.prototype.gameAction = null;\n\n        /**\n         * Envelope lobbyAction.\n         * @member {NT.ILobbyAction|null|undefined} lobbyAction\n         * @memberof NT.Envelope\n         * @instance\n         */\n        Envelope.prototype.lobbyAction = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Envelope kind.\n         * @member {\"gameAction\"|\"lobbyAction\"|undefined} kind\n         * @memberof NT.Envelope\n         * @instance\n         */\n        Object.defineProperty(Envelope.prototype, \"kind\", {\n            get: $util.oneOfGetter($oneOfFields = [\"gameAction\", \"lobbyAction\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Envelope instance using the specified properties.\n         * @function create\n         * @memberof NT.Envelope\n         * @static\n         * @param {NT.IEnvelope=} [properties] Properties to set\n         * @returns {NT.Envelope} Envelope instance\n         */\n        Envelope.create = function create(properties) {\n            return new Envelope(properties);\n        };\n\n        /**\n         * Encodes the specified Envelope message. Does not implicitly {@link NT.Envelope.verify|verify} messages.\n         * @function encode\n         * @memberof NT.Envelope\n         * @static\n         * @param {NT.IEnvelope} message Envelope message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Envelope.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.gameAction != null && Object.hasOwnProperty.call(message, \"gameAction\"))\n                $root.NT.GameAction.encode(message.gameAction, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.lobbyAction != null && Object.hasOwnProperty.call(message, \"lobbyAction\"))\n                $root.NT.LobbyAction.encode(message.lobbyAction, writer.uint32(/* id 50, wireType 2 =*/402).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Envelope message, length delimited. Does not implicitly {@link NT.Envelope.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.Envelope\n         * @static\n         * @param {NT.IEnvelope} message Envelope message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Envelope.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Envelope message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.Envelope\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.Envelope} Envelope\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Envelope.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.Envelope();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.gameAction = $root.NT.GameAction.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 50: {\n                        message.lobbyAction = $root.NT.LobbyAction.decode(reader, reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Envelope message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.Envelope\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.Envelope} Envelope\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Envelope.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Envelope message.\n         * @function verify\n         * @memberof NT.Envelope\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Envelope.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.gameAction != null && message.hasOwnProperty(\"gameAction\")) {\n                properties.kind = 1;\n                {\n                    let error = $root.NT.GameAction.verify(message.gameAction);\n                    if (error)\n                        return \"gameAction.\" + error;\n                }\n            }\n            if (message.lobbyAction != null && message.hasOwnProperty(\"lobbyAction\")) {\n                if (properties.kind === 1)\n                    return \"kind: multiple values\";\n                properties.kind = 1;\n                {\n                    let error = $root.NT.LobbyAction.verify(message.lobbyAction);\n                    if (error)\n                        return \"lobbyAction.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an Envelope message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.Envelope\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.Envelope} Envelope\n         */\n        Envelope.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.Envelope)\n                return object;\n            let message = new $root.NT.Envelope();\n            if (object.gameAction != null) {\n                if (typeof object.gameAction !== \"object\")\n                    throw TypeError(\".NT.Envelope.gameAction: object expected\");\n                message.gameAction = $root.NT.GameAction.fromObject(object.gameAction);\n            }\n            if (object.lobbyAction != null) {\n                if (typeof object.lobbyAction !== \"object\")\n                    throw TypeError(\".NT.Envelope.lobbyAction: object expected\");\n                message.lobbyAction = $root.NT.LobbyAction.fromObject(object.lobbyAction);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Envelope message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.Envelope\n         * @static\n         * @param {NT.Envelope} message Envelope\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Envelope.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.gameAction != null && message.hasOwnProperty(\"gameAction\")) {\n                object.gameAction = $root.NT.GameAction.toObject(message.gameAction, options);\n                if (options.oneofs)\n                    object.kind = \"gameAction\";\n            }\n            if (message.lobbyAction != null && message.hasOwnProperty(\"lobbyAction\")) {\n                object.lobbyAction = $root.NT.LobbyAction.toObject(message.lobbyAction, options);\n                if (options.oneofs)\n                    object.kind = \"lobbyAction\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Envelope to JSON.\n         * @function toJSON\n         * @memberof NT.Envelope\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Envelope.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Envelope\n         * @function getTypeUrl\n         * @memberof NT.Envelope\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Envelope.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.Envelope\";\n        };\n\n        return Envelope;\n    })();\n\n    NT.GameAction = (function() {\n\n        /**\n         * Properties of a GameAction.\n         * @memberof NT\n         * @interface IGameAction\n         * @property {NT.ICompactPlayerFrames|null} [cPlayerMove] GameAction cPlayerMove\n         * @property {NT.IServerPlayerMoves|null} [sPlayerMoves] GameAction sPlayerMoves\n         * @property {NT.IClientPlayerUpdate|null} [cPlayerUpdate] GameAction cPlayerUpdate\n         * @property {NT.IServerPlayerUpdate|null} [sPlayerUpdate] GameAction sPlayerUpdate\n         * @property {NT.IClientPlayerUpdateInventory|null} [cPlayerUpdateInventory] GameAction cPlayerUpdateInventory\n         * @property {NT.IServerPlayerUpdateInventory|null} [sPlayerUpdateInventory] GameAction sPlayerUpdateInventory\n         * @property {NT.IClientHostItemBank|null} [cHostItemBank] GameAction cHostItemBank\n         * @property {NT.IServerHostItemBank|null} [sHostItemBank] GameAction sHostItemBank\n         * @property {NT.IClientHostUserTake|null} [cHostUserTake] GameAction cHostUserTake\n         * @property {NT.IServerHostUserTake|null} [sHostUserTake] GameAction sHostUserTake\n         * @property {NT.IClientHostUserTakeGold|null} [cHostUserTakeGold] GameAction cHostUserTakeGold\n         * @property {NT.IServerHostUserTakeGold|null} [sHostUserTakeGold] GameAction sHostUserTakeGold\n         * @property {NT.IClientPlayerAddGold|null} [cPlayerAddGold] GameAction cPlayerAddGold\n         * @property {NT.IServerPlayerAddGold|null} [sPlayerAddGold] GameAction sPlayerAddGold\n         * @property {NT.IClientPlayerTakeGold|null} [cPlayerTakeGold] GameAction cPlayerTakeGold\n         * @property {NT.IServerPlayerTakeGold|null} [sPlayerTakeGold] GameAction sPlayerTakeGold\n         * @property {NT.IClientPlayerAddItem|null} [cPlayerAddItem] GameAction cPlayerAddItem\n         * @property {NT.IServerPlayerAddItem|null} [sPlayerAddItem] GameAction sPlayerAddItem\n         * @property {NT.IClientPlayerTakeItem|null} [cPlayerTakeItem] GameAction cPlayerTakeItem\n         * @property {NT.IServerPlayerTakeItem|null} [sPlayerTakeItem] GameAction sPlayerTakeItem\n         * @property {NT.IClientPlayerPickup|null} [cPlayerPickup] GameAction cPlayerPickup\n         * @property {NT.IServerPlayerPickup|null} [sPlayerPickup] GameAction sPlayerPickup\n         * @property {NT.IClientNemesisAbility|null} [cNemesisAbility] GameAction cNemesisAbility\n         * @property {NT.IServerNemesisAbility|null} [sNemesisAbility] GameAction sNemesisAbility\n         * @property {NT.IClientNemesisPickupItem|null} [cNemesisPickupItem] GameAction cNemesisPickupItem\n         * @property {NT.IServerNemesisPickupItem|null} [sNemesisPickupItem] GameAction sNemesisPickupItem\n         * @property {NT.IClientChat|null} [cChat] GameAction cChat\n         * @property {NT.IServerChat|null} [sChat] GameAction sChat\n         * @property {NT.IClientPlayerDeath|null} [cPlayerDeath] GameAction cPlayerDeath\n         * @property {NT.IServerPlayerDeath|null} [sPlayerDeath] GameAction sPlayerDeath\n         * @property {NT.IClientPlayerNewGamePlus|null} [cPlayerNewGamePlus] GameAction cPlayerNewGamePlus\n         * @property {NT.IServerPlayerNewGamePlus|null} [sPlayerNewGamePlus] GameAction sPlayerNewGamePlus\n         * @property {NT.IClientPlayerSecretHourglass|null} [cPlayerSecretHourglass] GameAction cPlayerSecretHourglass\n         * @property {NT.IServerPlayerSecretHourglass|null} [sPlayerSecretHourglass] GameAction sPlayerSecretHourglass\n         * @property {NT.IClientCustomModEvent|null} [cCustomModEvent] GameAction cCustomModEvent\n         * @property {NT.IServerCustomModEvent|null} [sCustomModEvent] GameAction sCustomModEvent\n         * @property {NT.IClientRespawnPenalty|null} [cRespawnPenalty] GameAction cRespawnPenalty\n         * @property {NT.IServerRespawnPenalty|null} [sRespawnPenalty] GameAction sRespawnPenalty\n         * @property {NT.IClientAngerySteve|null} [cAngerySteve] GameAction cAngerySteve\n         * @property {NT.IServerAngerySteve|null} [sAngerySteve] GameAction sAngerySteve\n         * @property {NT.IServerStatsUpdate|null} [sStatUpdate] GameAction sStatUpdate\n         */\n\n        /**\n         * Constructs a new GameAction.\n         * @memberof NT\n         * @classdesc Represents a GameAction.\n         * @implements IGameAction\n         * @constructor\n         * @param {NT.IGameAction=} [properties] Properties to set\n         */\n        function GameAction(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * GameAction cPlayerMove.\n         * @member {NT.ICompactPlayerFrames|null|undefined} cPlayerMove\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cPlayerMove = null;\n\n        /**\n         * GameAction sPlayerMoves.\n         * @member {NT.IServerPlayerMoves|null|undefined} sPlayerMoves\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sPlayerMoves = null;\n\n        /**\n         * GameAction cPlayerUpdate.\n         * @member {NT.IClientPlayerUpdate|null|undefined} cPlayerUpdate\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cPlayerUpdate = null;\n\n        /**\n         * GameAction sPlayerUpdate.\n         * @member {NT.IServerPlayerUpdate|null|undefined} sPlayerUpdate\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sPlayerUpdate = null;\n\n        /**\n         * GameAction cPlayerUpdateInventory.\n         * @member {NT.IClientPlayerUpdateInventory|null|undefined} cPlayerUpdateInventory\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cPlayerUpdateInventory = null;\n\n        /**\n         * GameAction sPlayerUpdateInventory.\n         * @member {NT.IServerPlayerUpdateInventory|null|undefined} sPlayerUpdateInventory\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sPlayerUpdateInventory = null;\n\n        /**\n         * GameAction cHostItemBank.\n         * @member {NT.IClientHostItemBank|null|undefined} cHostItemBank\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cHostItemBank = null;\n\n        /**\n         * GameAction sHostItemBank.\n         * @member {NT.IServerHostItemBank|null|undefined} sHostItemBank\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sHostItemBank = null;\n\n        /**\n         * GameAction cHostUserTake.\n         * @member {NT.IClientHostUserTake|null|undefined} cHostUserTake\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cHostUserTake = null;\n\n        /**\n         * GameAction sHostUserTake.\n         * @member {NT.IServerHostUserTake|null|undefined} sHostUserTake\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sHostUserTake = null;\n\n        /**\n         * GameAction cHostUserTakeGold.\n         * @member {NT.IClientHostUserTakeGold|null|undefined} cHostUserTakeGold\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cHostUserTakeGold = null;\n\n        /**\n         * GameAction sHostUserTakeGold.\n         * @member {NT.IServerHostUserTakeGold|null|undefined} sHostUserTakeGold\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sHostUserTakeGold = null;\n\n        /**\n         * GameAction cPlayerAddGold.\n         * @member {NT.IClientPlayerAddGold|null|undefined} cPlayerAddGold\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cPlayerAddGold = null;\n\n        /**\n         * GameAction sPlayerAddGold.\n         * @member {NT.IServerPlayerAddGold|null|undefined} sPlayerAddGold\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sPlayerAddGold = null;\n\n        /**\n         * GameAction cPlayerTakeGold.\n         * @member {NT.IClientPlayerTakeGold|null|undefined} cPlayerTakeGold\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cPlayerTakeGold = null;\n\n        /**\n         * GameAction sPlayerTakeGold.\n         * @member {NT.IServerPlayerTakeGold|null|undefined} sPlayerTakeGold\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sPlayerTakeGold = null;\n\n        /**\n         * GameAction cPlayerAddItem.\n         * @member {NT.IClientPlayerAddItem|null|undefined} cPlayerAddItem\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cPlayerAddItem = null;\n\n        /**\n         * GameAction sPlayerAddItem.\n         * @member {NT.IServerPlayerAddItem|null|undefined} sPlayerAddItem\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sPlayerAddItem = null;\n\n        /**\n         * GameAction cPlayerTakeItem.\n         * @member {NT.IClientPlayerTakeItem|null|undefined} cPlayerTakeItem\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cPlayerTakeItem = null;\n\n        /**\n         * GameAction sPlayerTakeItem.\n         * @member {NT.IServerPlayerTakeItem|null|undefined} sPlayerTakeItem\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sPlayerTakeItem = null;\n\n        /**\n         * GameAction cPlayerPickup.\n         * @member {NT.IClientPlayerPickup|null|undefined} cPlayerPickup\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cPlayerPickup = null;\n\n        /**\n         * GameAction sPlayerPickup.\n         * @member {NT.IServerPlayerPickup|null|undefined} sPlayerPickup\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sPlayerPickup = null;\n\n        /**\n         * GameAction cNemesisAbility.\n         * @member {NT.IClientNemesisAbility|null|undefined} cNemesisAbility\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cNemesisAbility = null;\n\n        /**\n         * GameAction sNemesisAbility.\n         * @member {NT.IServerNemesisAbility|null|undefined} sNemesisAbility\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sNemesisAbility = null;\n\n        /**\n         * GameAction cNemesisPickupItem.\n         * @member {NT.IClientNemesisPickupItem|null|undefined} cNemesisPickupItem\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cNemesisPickupItem = null;\n\n        /**\n         * GameAction sNemesisPickupItem.\n         * @member {NT.IServerNemesisPickupItem|null|undefined} sNemesisPickupItem\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sNemesisPickupItem = null;\n\n        /**\n         * GameAction cChat.\n         * @member {NT.IClientChat|null|undefined} cChat\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cChat = null;\n\n        /**\n         * GameAction sChat.\n         * @member {NT.IServerChat|null|undefined} sChat\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sChat = null;\n\n        /**\n         * GameAction cPlayerDeath.\n         * @member {NT.IClientPlayerDeath|null|undefined} cPlayerDeath\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cPlayerDeath = null;\n\n        /**\n         * GameAction sPlayerDeath.\n         * @member {NT.IServerPlayerDeath|null|undefined} sPlayerDeath\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sPlayerDeath = null;\n\n        /**\n         * GameAction cPlayerNewGamePlus.\n         * @member {NT.IClientPlayerNewGamePlus|null|undefined} cPlayerNewGamePlus\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cPlayerNewGamePlus = null;\n\n        /**\n         * GameAction sPlayerNewGamePlus.\n         * @member {NT.IServerPlayerNewGamePlus|null|undefined} sPlayerNewGamePlus\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sPlayerNewGamePlus = null;\n\n        /**\n         * GameAction cPlayerSecretHourglass.\n         * @member {NT.IClientPlayerSecretHourglass|null|undefined} cPlayerSecretHourglass\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cPlayerSecretHourglass = null;\n\n        /**\n         * GameAction sPlayerSecretHourglass.\n         * @member {NT.IServerPlayerSecretHourglass|null|undefined} sPlayerSecretHourglass\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sPlayerSecretHourglass = null;\n\n        /**\n         * GameAction cCustomModEvent.\n         * @member {NT.IClientCustomModEvent|null|undefined} cCustomModEvent\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cCustomModEvent = null;\n\n        /**\n         * GameAction sCustomModEvent.\n         * @member {NT.IServerCustomModEvent|null|undefined} sCustomModEvent\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sCustomModEvent = null;\n\n        /**\n         * GameAction cRespawnPenalty.\n         * @member {NT.IClientRespawnPenalty|null|undefined} cRespawnPenalty\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cRespawnPenalty = null;\n\n        /**\n         * GameAction sRespawnPenalty.\n         * @member {NT.IServerRespawnPenalty|null|undefined} sRespawnPenalty\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sRespawnPenalty = null;\n\n        /**\n         * GameAction cAngerySteve.\n         * @member {NT.IClientAngerySteve|null|undefined} cAngerySteve\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.cAngerySteve = null;\n\n        /**\n         * GameAction sAngerySteve.\n         * @member {NT.IServerAngerySteve|null|undefined} sAngerySteve\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sAngerySteve = null;\n\n        /**\n         * GameAction sStatUpdate.\n         * @member {NT.IServerStatsUpdate|null|undefined} sStatUpdate\n         * @memberof NT.GameAction\n         * @instance\n         */\n        GameAction.prototype.sStatUpdate = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * GameAction action.\n         * @member {\"cPlayerMove\"|\"sPlayerMoves\"|\"cPlayerUpdate\"|\"sPlayerUpdate\"|\"cPlayerUpdateInventory\"|\"sPlayerUpdateInventory\"|\"cHostItemBank\"|\"sHostItemBank\"|\"cHostUserTake\"|\"sHostUserTake\"|\"cHostUserTakeGold\"|\"sHostUserTakeGold\"|\"cPlayerAddGold\"|\"sPlayerAddGold\"|\"cPlayerTakeGold\"|\"sPlayerTakeGold\"|\"cPlayerAddItem\"|\"sPlayerAddItem\"|\"cPlayerTakeItem\"|\"sPlayerTakeItem\"|\"cPlayerPickup\"|\"sPlayerPickup\"|\"cNemesisAbility\"|\"sNemesisAbility\"|\"cNemesisPickupItem\"|\"sNemesisPickupItem\"|\"cChat\"|\"sChat\"|\"cPlayerDeath\"|\"sPlayerDeath\"|\"cPlayerNewGamePlus\"|\"sPlayerNewGamePlus\"|\"cPlayerSecretHourglass\"|\"sPlayerSecretHourglass\"|\"cCustomModEvent\"|\"sCustomModEvent\"|\"cRespawnPenalty\"|\"sRespawnPenalty\"|\"cAngerySteve\"|\"sAngerySteve\"|\"sStatUpdate\"|undefined} action\n         * @memberof NT.GameAction\n         * @instance\n         */\n        Object.defineProperty(GameAction.prototype, \"action\", {\n            get: $util.oneOfGetter($oneOfFields = [\"cPlayerMove\", \"sPlayerMoves\", \"cPlayerUpdate\", \"sPlayerUpdate\", \"cPlayerUpdateInventory\", \"sPlayerUpdateInventory\", \"cHostItemBank\", \"sHostItemBank\", \"cHostUserTake\", \"sHostUserTake\", \"cHostUserTakeGold\", \"sHostUserTakeGold\", \"cPlayerAddGold\", \"sPlayerAddGold\", \"cPlayerTakeGold\", \"sPlayerTakeGold\", \"cPlayerAddItem\", \"sPlayerAddItem\", \"cPlayerTakeItem\", \"sPlayerTakeItem\", \"cPlayerPickup\", \"sPlayerPickup\", \"cNemesisAbility\", \"sNemesisAbility\", \"cNemesisPickupItem\", \"sNemesisPickupItem\", \"cChat\", \"sChat\", \"cPlayerDeath\", \"sPlayerDeath\", \"cPlayerNewGamePlus\", \"sPlayerNewGamePlus\", \"cPlayerSecretHourglass\", \"sPlayerSecretHourglass\", \"cCustomModEvent\", \"sCustomModEvent\", \"cRespawnPenalty\", \"sRespawnPenalty\", \"cAngerySteve\", \"sAngerySteve\", \"sStatUpdate\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new GameAction instance using the specified properties.\n         * @function create\n         * @memberof NT.GameAction\n         * @static\n         * @param {NT.IGameAction=} [properties] Properties to set\n         * @returns {NT.GameAction} GameAction instance\n         */\n        GameAction.create = function create(properties) {\n            return new GameAction(properties);\n        };\n\n        /**\n         * Encodes the specified GameAction message. Does not implicitly {@link NT.GameAction.verify|verify} messages.\n         * @function encode\n         * @memberof NT.GameAction\n         * @static\n         * @param {NT.IGameAction} message GameAction message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GameAction.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.cPlayerMove != null && Object.hasOwnProperty.call(message, \"cPlayerMove\"))\n                $root.NT.CompactPlayerFrames.encode(message.cPlayerMove, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sPlayerMoves != null && Object.hasOwnProperty.call(message, \"sPlayerMoves\"))\n                $root.NT.ServerPlayerMoves.encode(message.sPlayerMoves, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.cPlayerUpdate != null && Object.hasOwnProperty.call(message, \"cPlayerUpdate\"))\n                $root.NT.ClientPlayerUpdate.encode(message.cPlayerUpdate, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.sPlayerUpdate != null && Object.hasOwnProperty.call(message, \"sPlayerUpdate\"))\n                $root.NT.ServerPlayerUpdate.encode(message.sPlayerUpdate, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.cPlayerUpdateInventory != null && Object.hasOwnProperty.call(message, \"cPlayerUpdateInventory\"))\n                $root.NT.ClientPlayerUpdateInventory.encode(message.cPlayerUpdateInventory, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.sPlayerUpdateInventory != null && Object.hasOwnProperty.call(message, \"sPlayerUpdateInventory\"))\n                $root.NT.ServerPlayerUpdateInventory.encode(message.sPlayerUpdateInventory, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.cHostItemBank != null && Object.hasOwnProperty.call(message, \"cHostItemBank\"))\n                $root.NT.ClientHostItemBank.encode(message.cHostItemBank, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.sHostItemBank != null && Object.hasOwnProperty.call(message, \"sHostItemBank\"))\n                $root.NT.ServerHostItemBank.encode(message.sHostItemBank, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.cHostUserTake != null && Object.hasOwnProperty.call(message, \"cHostUserTake\"))\n                $root.NT.ClientHostUserTake.encode(message.cHostUserTake, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.sHostUserTake != null && Object.hasOwnProperty.call(message, \"sHostUserTake\"))\n                $root.NT.ServerHostUserTake.encode(message.sHostUserTake, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.cHostUserTakeGold != null && Object.hasOwnProperty.call(message, \"cHostUserTakeGold\"))\n                $root.NT.ClientHostUserTakeGold.encode(message.cHostUserTakeGold, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.sHostUserTakeGold != null && Object.hasOwnProperty.call(message, \"sHostUserTakeGold\"))\n                $root.NT.ServerHostUserTakeGold.encode(message.sHostUserTakeGold, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.cPlayerAddGold != null && Object.hasOwnProperty.call(message, \"cPlayerAddGold\"))\n                $root.NT.ClientPlayerAddGold.encode(message.cPlayerAddGold, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.sPlayerAddGold != null && Object.hasOwnProperty.call(message, \"sPlayerAddGold\"))\n                $root.NT.ServerPlayerAddGold.encode(message.sPlayerAddGold, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.cPlayerTakeGold != null && Object.hasOwnProperty.call(message, \"cPlayerTakeGold\"))\n                $root.NT.ClientPlayerTakeGold.encode(message.cPlayerTakeGold, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.sPlayerTakeGold != null && Object.hasOwnProperty.call(message, \"sPlayerTakeGold\"))\n                $root.NT.ServerPlayerTakeGold.encode(message.sPlayerTakeGold, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();\n            if (message.cPlayerAddItem != null && Object.hasOwnProperty.call(message, \"cPlayerAddItem\"))\n                $root.NT.ClientPlayerAddItem.encode(message.cPlayerAddItem, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n            if (message.sPlayerAddItem != null && Object.hasOwnProperty.call(message, \"sPlayerAddItem\"))\n                $root.NT.ServerPlayerAddItem.encode(message.sPlayerAddItem, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n            if (message.cPlayerTakeItem != null && Object.hasOwnProperty.call(message, \"cPlayerTakeItem\"))\n                $root.NT.ClientPlayerTakeItem.encode(message.cPlayerTakeItem, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();\n            if (message.sPlayerTakeItem != null && Object.hasOwnProperty.call(message, \"sPlayerTakeItem\"))\n                $root.NT.ServerPlayerTakeItem.encode(message.sPlayerTakeItem, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.cPlayerPickup != null && Object.hasOwnProperty.call(message, \"cPlayerPickup\"))\n                $root.NT.ClientPlayerPickup.encode(message.cPlayerPickup, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n            if (message.sPlayerPickup != null && Object.hasOwnProperty.call(message, \"sPlayerPickup\"))\n                $root.NT.ServerPlayerPickup.encode(message.sPlayerPickup, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.cNemesisAbility != null && Object.hasOwnProperty.call(message, \"cNemesisAbility\"))\n                $root.NT.ClientNemesisAbility.encode(message.cNemesisAbility, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            if (message.sNemesisAbility != null && Object.hasOwnProperty.call(message, \"sNemesisAbility\"))\n                $root.NT.ServerNemesisAbility.encode(message.sNemesisAbility, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();\n            if (message.cNemesisPickupItem != null && Object.hasOwnProperty.call(message, \"cNemesisPickupItem\"))\n                $root.NT.ClientNemesisPickupItem.encode(message.cNemesisPickupItem, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            if (message.sNemesisPickupItem != null && Object.hasOwnProperty.call(message, \"sNemesisPickupItem\"))\n                $root.NT.ServerNemesisPickupItem.encode(message.sNemesisPickupItem, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();\n            if (message.cChat != null && Object.hasOwnProperty.call(message, \"cChat\"))\n                $root.NT.ClientChat.encode(message.cChat, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();\n            if (message.sChat != null && Object.hasOwnProperty.call(message, \"sChat\"))\n                $root.NT.ServerChat.encode(message.sChat, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();\n            if (message.cPlayerDeath != null && Object.hasOwnProperty.call(message, \"cPlayerDeath\"))\n                $root.NT.ClientPlayerDeath.encode(message.cPlayerDeath, writer.uint32(/* id 29, wireType 2 =*/234).fork()).ldelim();\n            if (message.sPlayerDeath != null && Object.hasOwnProperty.call(message, \"sPlayerDeath\"))\n                $root.NT.ServerPlayerDeath.encode(message.sPlayerDeath, writer.uint32(/* id 30, wireType 2 =*/242).fork()).ldelim();\n            if (message.cPlayerNewGamePlus != null && Object.hasOwnProperty.call(message, \"cPlayerNewGamePlus\"))\n                $root.NT.ClientPlayerNewGamePlus.encode(message.cPlayerNewGamePlus, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();\n            if (message.sPlayerNewGamePlus != null && Object.hasOwnProperty.call(message, \"sPlayerNewGamePlus\"))\n                $root.NT.ServerPlayerNewGamePlus.encode(message.sPlayerNewGamePlus, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();\n            if (message.cPlayerSecretHourglass != null && Object.hasOwnProperty.call(message, \"cPlayerSecretHourglass\"))\n                $root.NT.ClientPlayerSecretHourglass.encode(message.cPlayerSecretHourglass, writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();\n            if (message.sPlayerSecretHourglass != null && Object.hasOwnProperty.call(message, \"sPlayerSecretHourglass\"))\n                $root.NT.ServerPlayerSecretHourglass.encode(message.sPlayerSecretHourglass, writer.uint32(/* id 34, wireType 2 =*/274).fork()).ldelim();\n            if (message.cCustomModEvent != null && Object.hasOwnProperty.call(message, \"cCustomModEvent\"))\n                $root.NT.ClientCustomModEvent.encode(message.cCustomModEvent, writer.uint32(/* id 35, wireType 2 =*/282).fork()).ldelim();\n            if (message.sCustomModEvent != null && Object.hasOwnProperty.call(message, \"sCustomModEvent\"))\n                $root.NT.ServerCustomModEvent.encode(message.sCustomModEvent, writer.uint32(/* id 36, wireType 2 =*/290).fork()).ldelim();\n            if (message.cRespawnPenalty != null && Object.hasOwnProperty.call(message, \"cRespawnPenalty\"))\n                $root.NT.ClientRespawnPenalty.encode(message.cRespawnPenalty, writer.uint32(/* id 37, wireType 2 =*/298).fork()).ldelim();\n            if (message.sRespawnPenalty != null && Object.hasOwnProperty.call(message, \"sRespawnPenalty\"))\n                $root.NT.ServerRespawnPenalty.encode(message.sRespawnPenalty, writer.uint32(/* id 38, wireType 2 =*/306).fork()).ldelim();\n            if (message.cAngerySteve != null && Object.hasOwnProperty.call(message, \"cAngerySteve\"))\n                $root.NT.ClientAngerySteve.encode(message.cAngerySteve, writer.uint32(/* id 39, wireType 2 =*/314).fork()).ldelim();\n            if (message.sAngerySteve != null && Object.hasOwnProperty.call(message, \"sAngerySteve\"))\n                $root.NT.ServerAngerySteve.encode(message.sAngerySteve, writer.uint32(/* id 40, wireType 2 =*/322).fork()).ldelim();\n            if (message.sStatUpdate != null && Object.hasOwnProperty.call(message, \"sStatUpdate\"))\n                $root.NT.ServerStatsUpdate.encode(message.sStatUpdate, writer.uint32(/* id 42, wireType 2 =*/338).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified GameAction message, length delimited. Does not implicitly {@link NT.GameAction.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.GameAction\n         * @static\n         * @param {NT.IGameAction} message GameAction message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        GameAction.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a GameAction message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.GameAction\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.GameAction} GameAction\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GameAction.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.GameAction();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.cPlayerMove = $root.NT.CompactPlayerFrames.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.sPlayerMoves = $root.NT.ServerPlayerMoves.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.cPlayerUpdate = $root.NT.ClientPlayerUpdate.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.sPlayerUpdate = $root.NT.ServerPlayerUpdate.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.cPlayerUpdateInventory = $root.NT.ClientPlayerUpdateInventory.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.sPlayerUpdateInventory = $root.NT.ServerPlayerUpdateInventory.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        message.cHostItemBank = $root.NT.ClientHostItemBank.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sHostItemBank = $root.NT.ServerHostItemBank.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.cHostUserTake = $root.NT.ClientHostUserTake.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 10: {\n                        message.sHostUserTake = $root.NT.ServerHostUserTake.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 11: {\n                        message.cHostUserTakeGold = $root.NT.ClientHostUserTakeGold.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 12: {\n                        message.sHostUserTakeGold = $root.NT.ServerHostUserTakeGold.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 13: {\n                        message.cPlayerAddGold = $root.NT.ClientPlayerAddGold.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.sPlayerAddGold = $root.NT.ServerPlayerAddGold.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 15: {\n                        message.cPlayerTakeGold = $root.NT.ClientPlayerTakeGold.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 16: {\n                        message.sPlayerTakeGold = $root.NT.ServerPlayerTakeGold.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 17: {\n                        message.cPlayerAddItem = $root.NT.ClientPlayerAddItem.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 18: {\n                        message.sPlayerAddItem = $root.NT.ServerPlayerAddItem.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 19: {\n                        message.cPlayerTakeItem = $root.NT.ClientPlayerTakeItem.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 20: {\n                        message.sPlayerTakeItem = $root.NT.ServerPlayerTakeItem.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 21: {\n                        message.cPlayerPickup = $root.NT.ClientPlayerPickup.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.sPlayerPickup = $root.NT.ServerPlayerPickup.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 23: {\n                        message.cNemesisAbility = $root.NT.ClientNemesisAbility.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 24: {\n                        message.sNemesisAbility = $root.NT.ServerNemesisAbility.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 25: {\n                        message.cNemesisPickupItem = $root.NT.ClientNemesisPickupItem.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 26: {\n                        message.sNemesisPickupItem = $root.NT.ServerNemesisPickupItem.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 27: {\n                        message.cChat = $root.NT.ClientChat.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 28: {\n                        message.sChat = $root.NT.ServerChat.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 29: {\n                        message.cPlayerDeath = $root.NT.ClientPlayerDeath.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 30: {\n                        message.sPlayerDeath = $root.NT.ServerPlayerDeath.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 31: {\n                        message.cPlayerNewGamePlus = $root.NT.ClientPlayerNewGamePlus.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 32: {\n                        message.sPlayerNewGamePlus = $root.NT.ServerPlayerNewGamePlus.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 33: {\n                        message.cPlayerSecretHourglass = $root.NT.ClientPlayerSecretHourglass.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 34: {\n                        message.sPlayerSecretHourglass = $root.NT.ServerPlayerSecretHourglass.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 35: {\n                        message.cCustomModEvent = $root.NT.ClientCustomModEvent.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 36: {\n                        message.sCustomModEvent = $root.NT.ServerCustomModEvent.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 37: {\n                        message.cRespawnPenalty = $root.NT.ClientRespawnPenalty.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 38: {\n                        message.sRespawnPenalty = $root.NT.ServerRespawnPenalty.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 39: {\n                        message.cAngerySteve = $root.NT.ClientAngerySteve.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 40: {\n                        message.sAngerySteve = $root.NT.ServerAngerySteve.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 42: {\n                        message.sStatUpdate = $root.NT.ServerStatsUpdate.decode(reader, reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a GameAction message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.GameAction\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.GameAction} GameAction\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        GameAction.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a GameAction message.\n         * @function verify\n         * @memberof NT.GameAction\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        GameAction.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.cPlayerMove != null && message.hasOwnProperty(\"cPlayerMove\")) {\n                properties.action = 1;\n                {\n                    let error = $root.NT.CompactPlayerFrames.verify(message.cPlayerMove);\n                    if (error)\n                        return \"cPlayerMove.\" + error;\n                }\n            }\n            if (message.sPlayerMoves != null && message.hasOwnProperty(\"sPlayerMoves\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerPlayerMoves.verify(message.sPlayerMoves);\n                    if (error)\n                        return \"sPlayerMoves.\" + error;\n                }\n            }\n            if (message.cPlayerUpdate != null && message.hasOwnProperty(\"cPlayerUpdate\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientPlayerUpdate.verify(message.cPlayerUpdate);\n                    if (error)\n                        return \"cPlayerUpdate.\" + error;\n                }\n            }\n            if (message.sPlayerUpdate != null && message.hasOwnProperty(\"sPlayerUpdate\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerPlayerUpdate.verify(message.sPlayerUpdate);\n                    if (error)\n                        return \"sPlayerUpdate.\" + error;\n                }\n            }\n            if (message.cPlayerUpdateInventory != null && message.hasOwnProperty(\"cPlayerUpdateInventory\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientPlayerUpdateInventory.verify(message.cPlayerUpdateInventory);\n                    if (error)\n                        return \"cPlayerUpdateInventory.\" + error;\n                }\n            }\n            if (message.sPlayerUpdateInventory != null && message.hasOwnProperty(\"sPlayerUpdateInventory\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerPlayerUpdateInventory.verify(message.sPlayerUpdateInventory);\n                    if (error)\n                        return \"sPlayerUpdateInventory.\" + error;\n                }\n            }\n            if (message.cHostItemBank != null && message.hasOwnProperty(\"cHostItemBank\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientHostItemBank.verify(message.cHostItemBank);\n                    if (error)\n                        return \"cHostItemBank.\" + error;\n                }\n            }\n            if (message.sHostItemBank != null && message.hasOwnProperty(\"sHostItemBank\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerHostItemBank.verify(message.sHostItemBank);\n                    if (error)\n                        return \"sHostItemBank.\" + error;\n                }\n            }\n            if (message.cHostUserTake != null && message.hasOwnProperty(\"cHostUserTake\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientHostUserTake.verify(message.cHostUserTake);\n                    if (error)\n                        return \"cHostUserTake.\" + error;\n                }\n            }\n            if (message.sHostUserTake != null && message.hasOwnProperty(\"sHostUserTake\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerHostUserTake.verify(message.sHostUserTake);\n                    if (error)\n                        return \"sHostUserTake.\" + error;\n                }\n            }\n            if (message.cHostUserTakeGold != null && message.hasOwnProperty(\"cHostUserTakeGold\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientHostUserTakeGold.verify(message.cHostUserTakeGold);\n                    if (error)\n                        return \"cHostUserTakeGold.\" + error;\n                }\n            }\n            if (message.sHostUserTakeGold != null && message.hasOwnProperty(\"sHostUserTakeGold\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerHostUserTakeGold.verify(message.sHostUserTakeGold);\n                    if (error)\n                        return \"sHostUserTakeGold.\" + error;\n                }\n            }\n            if (message.cPlayerAddGold != null && message.hasOwnProperty(\"cPlayerAddGold\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientPlayerAddGold.verify(message.cPlayerAddGold);\n                    if (error)\n                        return \"cPlayerAddGold.\" + error;\n                }\n            }\n            if (message.sPlayerAddGold != null && message.hasOwnProperty(\"sPlayerAddGold\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerPlayerAddGold.verify(message.sPlayerAddGold);\n                    if (error)\n                        return \"sPlayerAddGold.\" + error;\n                }\n            }\n            if (message.cPlayerTakeGold != null && message.hasOwnProperty(\"cPlayerTakeGold\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientPlayerTakeGold.verify(message.cPlayerTakeGold);\n                    if (error)\n                        return \"cPlayerTakeGold.\" + error;\n                }\n            }\n            if (message.sPlayerTakeGold != null && message.hasOwnProperty(\"sPlayerTakeGold\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerPlayerTakeGold.verify(message.sPlayerTakeGold);\n                    if (error)\n                        return \"sPlayerTakeGold.\" + error;\n                }\n            }\n            if (message.cPlayerAddItem != null && message.hasOwnProperty(\"cPlayerAddItem\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientPlayerAddItem.verify(message.cPlayerAddItem);\n                    if (error)\n                        return \"cPlayerAddItem.\" + error;\n                }\n            }\n            if (message.sPlayerAddItem != null && message.hasOwnProperty(\"sPlayerAddItem\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerPlayerAddItem.verify(message.sPlayerAddItem);\n                    if (error)\n                        return \"sPlayerAddItem.\" + error;\n                }\n            }\n            if (message.cPlayerTakeItem != null && message.hasOwnProperty(\"cPlayerTakeItem\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientPlayerTakeItem.verify(message.cPlayerTakeItem);\n                    if (error)\n                        return \"cPlayerTakeItem.\" + error;\n                }\n            }\n            if (message.sPlayerTakeItem != null && message.hasOwnProperty(\"sPlayerTakeItem\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerPlayerTakeItem.verify(message.sPlayerTakeItem);\n                    if (error)\n                        return \"sPlayerTakeItem.\" + error;\n                }\n            }\n            if (message.cPlayerPickup != null && message.hasOwnProperty(\"cPlayerPickup\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientPlayerPickup.verify(message.cPlayerPickup);\n                    if (error)\n                        return \"cPlayerPickup.\" + error;\n                }\n            }\n            if (message.sPlayerPickup != null && message.hasOwnProperty(\"sPlayerPickup\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerPlayerPickup.verify(message.sPlayerPickup);\n                    if (error)\n                        return \"sPlayerPickup.\" + error;\n                }\n            }\n            if (message.cNemesisAbility != null && message.hasOwnProperty(\"cNemesisAbility\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientNemesisAbility.verify(message.cNemesisAbility);\n                    if (error)\n                        return \"cNemesisAbility.\" + error;\n                }\n            }\n            if (message.sNemesisAbility != null && message.hasOwnProperty(\"sNemesisAbility\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerNemesisAbility.verify(message.sNemesisAbility);\n                    if (error)\n                        return \"sNemesisAbility.\" + error;\n                }\n            }\n            if (message.cNemesisPickupItem != null && message.hasOwnProperty(\"cNemesisPickupItem\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientNemesisPickupItem.verify(message.cNemesisPickupItem);\n                    if (error)\n                        return \"cNemesisPickupItem.\" + error;\n                }\n            }\n            if (message.sNemesisPickupItem != null && message.hasOwnProperty(\"sNemesisPickupItem\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerNemesisPickupItem.verify(message.sNemesisPickupItem);\n                    if (error)\n                        return \"sNemesisPickupItem.\" + error;\n                }\n            }\n            if (message.cChat != null && message.hasOwnProperty(\"cChat\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientChat.verify(message.cChat);\n                    if (error)\n                        return \"cChat.\" + error;\n                }\n            }\n            if (message.sChat != null && message.hasOwnProperty(\"sChat\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerChat.verify(message.sChat);\n                    if (error)\n                        return \"sChat.\" + error;\n                }\n            }\n            if (message.cPlayerDeath != null && message.hasOwnProperty(\"cPlayerDeath\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientPlayerDeath.verify(message.cPlayerDeath);\n                    if (error)\n                        return \"cPlayerDeath.\" + error;\n                }\n            }\n            if (message.sPlayerDeath != null && message.hasOwnProperty(\"sPlayerDeath\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerPlayerDeath.verify(message.sPlayerDeath);\n                    if (error)\n                        return \"sPlayerDeath.\" + error;\n                }\n            }\n            if (message.cPlayerNewGamePlus != null && message.hasOwnProperty(\"cPlayerNewGamePlus\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientPlayerNewGamePlus.verify(message.cPlayerNewGamePlus);\n                    if (error)\n                        return \"cPlayerNewGamePlus.\" + error;\n                }\n            }\n            if (message.sPlayerNewGamePlus != null && message.hasOwnProperty(\"sPlayerNewGamePlus\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerPlayerNewGamePlus.verify(message.sPlayerNewGamePlus);\n                    if (error)\n                        return \"sPlayerNewGamePlus.\" + error;\n                }\n            }\n            if (message.cPlayerSecretHourglass != null && message.hasOwnProperty(\"cPlayerSecretHourglass\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientPlayerSecretHourglass.verify(message.cPlayerSecretHourglass);\n                    if (error)\n                        return \"cPlayerSecretHourglass.\" + error;\n                }\n            }\n            if (message.sPlayerSecretHourglass != null && message.hasOwnProperty(\"sPlayerSecretHourglass\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerPlayerSecretHourglass.verify(message.sPlayerSecretHourglass);\n                    if (error)\n                        return \"sPlayerSecretHourglass.\" + error;\n                }\n            }\n            if (message.cCustomModEvent != null && message.hasOwnProperty(\"cCustomModEvent\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientCustomModEvent.verify(message.cCustomModEvent);\n                    if (error)\n                        return \"cCustomModEvent.\" + error;\n                }\n            }\n            if (message.sCustomModEvent != null && message.hasOwnProperty(\"sCustomModEvent\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerCustomModEvent.verify(message.sCustomModEvent);\n                    if (error)\n                        return \"sCustomModEvent.\" + error;\n                }\n            }\n            if (message.cRespawnPenalty != null && message.hasOwnProperty(\"cRespawnPenalty\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientRespawnPenalty.verify(message.cRespawnPenalty);\n                    if (error)\n                        return \"cRespawnPenalty.\" + error;\n                }\n            }\n            if (message.sRespawnPenalty != null && message.hasOwnProperty(\"sRespawnPenalty\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerRespawnPenalty.verify(message.sRespawnPenalty);\n                    if (error)\n                        return \"sRespawnPenalty.\" + error;\n                }\n            }\n            if (message.cAngerySteve != null && message.hasOwnProperty(\"cAngerySteve\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientAngerySteve.verify(message.cAngerySteve);\n                    if (error)\n                        return \"cAngerySteve.\" + error;\n                }\n            }\n            if (message.sAngerySteve != null && message.hasOwnProperty(\"sAngerySteve\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerAngerySteve.verify(message.sAngerySteve);\n                    if (error)\n                        return \"sAngerySteve.\" + error;\n                }\n            }\n            if (message.sStatUpdate != null && message.hasOwnProperty(\"sStatUpdate\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerStatsUpdate.verify(message.sStatUpdate);\n                    if (error)\n                        return \"sStatUpdate.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a GameAction message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.GameAction\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.GameAction} GameAction\n         */\n        GameAction.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.GameAction)\n                return object;\n            let message = new $root.NT.GameAction();\n            if (object.cPlayerMove != null) {\n                if (typeof object.cPlayerMove !== \"object\")\n                    throw TypeError(\".NT.GameAction.cPlayerMove: object expected\");\n                message.cPlayerMove = $root.NT.CompactPlayerFrames.fromObject(object.cPlayerMove);\n            }\n            if (object.sPlayerMoves != null) {\n                if (typeof object.sPlayerMoves !== \"object\")\n                    throw TypeError(\".NT.GameAction.sPlayerMoves: object expected\");\n                message.sPlayerMoves = $root.NT.ServerPlayerMoves.fromObject(object.sPlayerMoves);\n            }\n            if (object.cPlayerUpdate != null) {\n                if (typeof object.cPlayerUpdate !== \"object\")\n                    throw TypeError(\".NT.GameAction.cPlayerUpdate: object expected\");\n                message.cPlayerUpdate = $root.NT.ClientPlayerUpdate.fromObject(object.cPlayerUpdate);\n            }\n            if (object.sPlayerUpdate != null) {\n                if (typeof object.sPlayerUpdate !== \"object\")\n                    throw TypeError(\".NT.GameAction.sPlayerUpdate: object expected\");\n                message.sPlayerUpdate = $root.NT.ServerPlayerUpdate.fromObject(object.sPlayerUpdate);\n            }\n            if (object.cPlayerUpdateInventory != null) {\n                if (typeof object.cPlayerUpdateInventory !== \"object\")\n                    throw TypeError(\".NT.GameAction.cPlayerUpdateInventory: object expected\");\n                message.cPlayerUpdateInventory = $root.NT.ClientPlayerUpdateInventory.fromObject(object.cPlayerUpdateInventory);\n            }\n            if (object.sPlayerUpdateInventory != null) {\n                if (typeof object.sPlayerUpdateInventory !== \"object\")\n                    throw TypeError(\".NT.GameAction.sPlayerUpdateInventory: object expected\");\n                message.sPlayerUpdateInventory = $root.NT.ServerPlayerUpdateInventory.fromObject(object.sPlayerUpdateInventory);\n            }\n            if (object.cHostItemBank != null) {\n                if (typeof object.cHostItemBank !== \"object\")\n                    throw TypeError(\".NT.GameAction.cHostItemBank: object expected\");\n                message.cHostItemBank = $root.NT.ClientHostItemBank.fromObject(object.cHostItemBank);\n            }\n            if (object.sHostItemBank != null) {\n                if (typeof object.sHostItemBank !== \"object\")\n                    throw TypeError(\".NT.GameAction.sHostItemBank: object expected\");\n                message.sHostItemBank = $root.NT.ServerHostItemBank.fromObject(object.sHostItemBank);\n            }\n            if (object.cHostUserTake != null) {\n                if (typeof object.cHostUserTake !== \"object\")\n                    throw TypeError(\".NT.GameAction.cHostUserTake: object expected\");\n                message.cHostUserTake = $root.NT.ClientHostUserTake.fromObject(object.cHostUserTake);\n            }\n            if (object.sHostUserTake != null) {\n                if (typeof object.sHostUserTake !== \"object\")\n                    throw TypeError(\".NT.GameAction.sHostUserTake: object expected\");\n                message.sHostUserTake = $root.NT.ServerHostUserTake.fromObject(object.sHostUserTake);\n            }\n            if (object.cHostUserTakeGold != null) {\n                if (typeof object.cHostUserTakeGold !== \"object\")\n                    throw TypeError(\".NT.GameAction.cHostUserTakeGold: object expected\");\n                message.cHostUserTakeGold = $root.NT.ClientHostUserTakeGold.fromObject(object.cHostUserTakeGold);\n            }\n            if (object.sHostUserTakeGold != null) {\n                if (typeof object.sHostUserTakeGold !== \"object\")\n                    throw TypeError(\".NT.GameAction.sHostUserTakeGold: object expected\");\n                message.sHostUserTakeGold = $root.NT.ServerHostUserTakeGold.fromObject(object.sHostUserTakeGold);\n            }\n            if (object.cPlayerAddGold != null) {\n                if (typeof object.cPlayerAddGold !== \"object\")\n                    throw TypeError(\".NT.GameAction.cPlayerAddGold: object expected\");\n                message.cPlayerAddGold = $root.NT.ClientPlayerAddGold.fromObject(object.cPlayerAddGold);\n            }\n            if (object.sPlayerAddGold != null) {\n                if (typeof object.sPlayerAddGold !== \"object\")\n                    throw TypeError(\".NT.GameAction.sPlayerAddGold: object expected\");\n                message.sPlayerAddGold = $root.NT.ServerPlayerAddGold.fromObject(object.sPlayerAddGold);\n            }\n            if (object.cPlayerTakeGold != null) {\n                if (typeof object.cPlayerTakeGold !== \"object\")\n                    throw TypeError(\".NT.GameAction.cPlayerTakeGold: object expected\");\n                message.cPlayerTakeGold = $root.NT.ClientPlayerTakeGold.fromObject(object.cPlayerTakeGold);\n            }\n            if (object.sPlayerTakeGold != null) {\n                if (typeof object.sPlayerTakeGold !== \"object\")\n                    throw TypeError(\".NT.GameAction.sPlayerTakeGold: object expected\");\n                message.sPlayerTakeGold = $root.NT.ServerPlayerTakeGold.fromObject(object.sPlayerTakeGold);\n            }\n            if (object.cPlayerAddItem != null) {\n                if (typeof object.cPlayerAddItem !== \"object\")\n                    throw TypeError(\".NT.GameAction.cPlayerAddItem: object expected\");\n                message.cPlayerAddItem = $root.NT.ClientPlayerAddItem.fromObject(object.cPlayerAddItem);\n            }\n            if (object.sPlayerAddItem != null) {\n                if (typeof object.sPlayerAddItem !== \"object\")\n                    throw TypeError(\".NT.GameAction.sPlayerAddItem: object expected\");\n                message.sPlayerAddItem = $root.NT.ServerPlayerAddItem.fromObject(object.sPlayerAddItem);\n            }\n            if (object.cPlayerTakeItem != null) {\n                if (typeof object.cPlayerTakeItem !== \"object\")\n                    throw TypeError(\".NT.GameAction.cPlayerTakeItem: object expected\");\n                message.cPlayerTakeItem = $root.NT.ClientPlayerTakeItem.fromObject(object.cPlayerTakeItem);\n            }\n            if (object.sPlayerTakeItem != null) {\n                if (typeof object.sPlayerTakeItem !== \"object\")\n                    throw TypeError(\".NT.GameAction.sPlayerTakeItem: object expected\");\n                message.sPlayerTakeItem = $root.NT.ServerPlayerTakeItem.fromObject(object.sPlayerTakeItem);\n            }\n            if (object.cPlayerPickup != null) {\n                if (typeof object.cPlayerPickup !== \"object\")\n                    throw TypeError(\".NT.GameAction.cPlayerPickup: object expected\");\n                message.cPlayerPickup = $root.NT.ClientPlayerPickup.fromObject(object.cPlayerPickup);\n            }\n            if (object.sPlayerPickup != null) {\n                if (typeof object.sPlayerPickup !== \"object\")\n                    throw TypeError(\".NT.GameAction.sPlayerPickup: object expected\");\n                message.sPlayerPickup = $root.NT.ServerPlayerPickup.fromObject(object.sPlayerPickup);\n            }\n            if (object.cNemesisAbility != null) {\n                if (typeof object.cNemesisAbility !== \"object\")\n                    throw TypeError(\".NT.GameAction.cNemesisAbility: object expected\");\n                message.cNemesisAbility = $root.NT.ClientNemesisAbility.fromObject(object.cNemesisAbility);\n            }\n            if (object.sNemesisAbility != null) {\n                if (typeof object.sNemesisAbility !== \"object\")\n                    throw TypeError(\".NT.GameAction.sNemesisAbility: object expected\");\n                message.sNemesisAbility = $root.NT.ServerNemesisAbility.fromObject(object.sNemesisAbility);\n            }\n            if (object.cNemesisPickupItem != null) {\n                if (typeof object.cNemesisPickupItem !== \"object\")\n                    throw TypeError(\".NT.GameAction.cNemesisPickupItem: object expected\");\n                message.cNemesisPickupItem = $root.NT.ClientNemesisPickupItem.fromObject(object.cNemesisPickupItem);\n            }\n            if (object.sNemesisPickupItem != null) {\n                if (typeof object.sNemesisPickupItem !== \"object\")\n                    throw TypeError(\".NT.GameAction.sNemesisPickupItem: object expected\");\n                message.sNemesisPickupItem = $root.NT.ServerNemesisPickupItem.fromObject(object.sNemesisPickupItem);\n            }\n            if (object.cChat != null) {\n                if (typeof object.cChat !== \"object\")\n                    throw TypeError(\".NT.GameAction.cChat: object expected\");\n                message.cChat = $root.NT.ClientChat.fromObject(object.cChat);\n            }\n            if (object.sChat != null) {\n                if (typeof object.sChat !== \"object\")\n                    throw TypeError(\".NT.GameAction.sChat: object expected\");\n                message.sChat = $root.NT.ServerChat.fromObject(object.sChat);\n            }\n            if (object.cPlayerDeath != null) {\n                if (typeof object.cPlayerDeath !== \"object\")\n                    throw TypeError(\".NT.GameAction.cPlayerDeath: object expected\");\n                message.cPlayerDeath = $root.NT.ClientPlayerDeath.fromObject(object.cPlayerDeath);\n            }\n            if (object.sPlayerDeath != null) {\n                if (typeof object.sPlayerDeath !== \"object\")\n                    throw TypeError(\".NT.GameAction.sPlayerDeath: object expected\");\n                message.sPlayerDeath = $root.NT.ServerPlayerDeath.fromObject(object.sPlayerDeath);\n            }\n            if (object.cPlayerNewGamePlus != null) {\n                if (typeof object.cPlayerNewGamePlus !== \"object\")\n                    throw TypeError(\".NT.GameAction.cPlayerNewGamePlus: object expected\");\n                message.cPlayerNewGamePlus = $root.NT.ClientPlayerNewGamePlus.fromObject(object.cPlayerNewGamePlus);\n            }\n            if (object.sPlayerNewGamePlus != null) {\n                if (typeof object.sPlayerNewGamePlus !== \"object\")\n                    throw TypeError(\".NT.GameAction.sPlayerNewGamePlus: object expected\");\n                message.sPlayerNewGamePlus = $root.NT.ServerPlayerNewGamePlus.fromObject(object.sPlayerNewGamePlus);\n            }\n            if (object.cPlayerSecretHourglass != null) {\n                if (typeof object.cPlayerSecretHourglass !== \"object\")\n                    throw TypeError(\".NT.GameAction.cPlayerSecretHourglass: object expected\");\n                message.cPlayerSecretHourglass = $root.NT.ClientPlayerSecretHourglass.fromObject(object.cPlayerSecretHourglass);\n            }\n            if (object.sPlayerSecretHourglass != null) {\n                if (typeof object.sPlayerSecretHourglass !== \"object\")\n                    throw TypeError(\".NT.GameAction.sPlayerSecretHourglass: object expected\");\n                message.sPlayerSecretHourglass = $root.NT.ServerPlayerSecretHourglass.fromObject(object.sPlayerSecretHourglass);\n            }\n            if (object.cCustomModEvent != null) {\n                if (typeof object.cCustomModEvent !== \"object\")\n                    throw TypeError(\".NT.GameAction.cCustomModEvent: object expected\");\n                message.cCustomModEvent = $root.NT.ClientCustomModEvent.fromObject(object.cCustomModEvent);\n            }\n            if (object.sCustomModEvent != null) {\n                if (typeof object.sCustomModEvent !== \"object\")\n                    throw TypeError(\".NT.GameAction.sCustomModEvent: object expected\");\n                message.sCustomModEvent = $root.NT.ServerCustomModEvent.fromObject(object.sCustomModEvent);\n            }\n            if (object.cRespawnPenalty != null) {\n                if (typeof object.cRespawnPenalty !== \"object\")\n                    throw TypeError(\".NT.GameAction.cRespawnPenalty: object expected\");\n                message.cRespawnPenalty = $root.NT.ClientRespawnPenalty.fromObject(object.cRespawnPenalty);\n            }\n            if (object.sRespawnPenalty != null) {\n                if (typeof object.sRespawnPenalty !== \"object\")\n                    throw TypeError(\".NT.GameAction.sRespawnPenalty: object expected\");\n                message.sRespawnPenalty = $root.NT.ServerRespawnPenalty.fromObject(object.sRespawnPenalty);\n            }\n            if (object.cAngerySteve != null) {\n                if (typeof object.cAngerySteve !== \"object\")\n                    throw TypeError(\".NT.GameAction.cAngerySteve: object expected\");\n                message.cAngerySteve = $root.NT.ClientAngerySteve.fromObject(object.cAngerySteve);\n            }\n            if (object.sAngerySteve != null) {\n                if (typeof object.sAngerySteve !== \"object\")\n                    throw TypeError(\".NT.GameAction.sAngerySteve: object expected\");\n                message.sAngerySteve = $root.NT.ServerAngerySteve.fromObject(object.sAngerySteve);\n            }\n            if (object.sStatUpdate != null) {\n                if (typeof object.sStatUpdate !== \"object\")\n                    throw TypeError(\".NT.GameAction.sStatUpdate: object expected\");\n                message.sStatUpdate = $root.NT.ServerStatsUpdate.fromObject(object.sStatUpdate);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a GameAction message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.GameAction\n         * @static\n         * @param {NT.GameAction} message GameAction\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        GameAction.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.cPlayerMove != null && message.hasOwnProperty(\"cPlayerMove\")) {\n                object.cPlayerMove = $root.NT.CompactPlayerFrames.toObject(message.cPlayerMove, options);\n                if (options.oneofs)\n                    object.action = \"cPlayerMove\";\n            }\n            if (message.sPlayerMoves != null && message.hasOwnProperty(\"sPlayerMoves\")) {\n                object.sPlayerMoves = $root.NT.ServerPlayerMoves.toObject(message.sPlayerMoves, options);\n                if (options.oneofs)\n                    object.action = \"sPlayerMoves\";\n            }\n            if (message.cPlayerUpdate != null && message.hasOwnProperty(\"cPlayerUpdate\")) {\n                object.cPlayerUpdate = $root.NT.ClientPlayerUpdate.toObject(message.cPlayerUpdate, options);\n                if (options.oneofs)\n                    object.action = \"cPlayerUpdate\";\n            }\n            if (message.sPlayerUpdate != null && message.hasOwnProperty(\"sPlayerUpdate\")) {\n                object.sPlayerUpdate = $root.NT.ServerPlayerUpdate.toObject(message.sPlayerUpdate, options);\n                if (options.oneofs)\n                    object.action = \"sPlayerUpdate\";\n            }\n            if (message.cPlayerUpdateInventory != null && message.hasOwnProperty(\"cPlayerUpdateInventory\")) {\n                object.cPlayerUpdateInventory = $root.NT.ClientPlayerUpdateInventory.toObject(message.cPlayerUpdateInventory, options);\n                if (options.oneofs)\n                    object.action = \"cPlayerUpdateInventory\";\n            }\n            if (message.sPlayerUpdateInventory != null && message.hasOwnProperty(\"sPlayerUpdateInventory\")) {\n                object.sPlayerUpdateInventory = $root.NT.ServerPlayerUpdateInventory.toObject(message.sPlayerUpdateInventory, options);\n                if (options.oneofs)\n                    object.action = \"sPlayerUpdateInventory\";\n            }\n            if (message.cHostItemBank != null && message.hasOwnProperty(\"cHostItemBank\")) {\n                object.cHostItemBank = $root.NT.ClientHostItemBank.toObject(message.cHostItemBank, options);\n                if (options.oneofs)\n                    object.action = \"cHostItemBank\";\n            }\n            if (message.sHostItemBank != null && message.hasOwnProperty(\"sHostItemBank\")) {\n                object.sHostItemBank = $root.NT.ServerHostItemBank.toObject(message.sHostItemBank, options);\n                if (options.oneofs)\n                    object.action = \"sHostItemBank\";\n            }\n            if (message.cHostUserTake != null && message.hasOwnProperty(\"cHostUserTake\")) {\n                object.cHostUserTake = $root.NT.ClientHostUserTake.toObject(message.cHostUserTake, options);\n                if (options.oneofs)\n                    object.action = \"cHostUserTake\";\n            }\n            if (message.sHostUserTake != null && message.hasOwnProperty(\"sHostUserTake\")) {\n                object.sHostUserTake = $root.NT.ServerHostUserTake.toObject(message.sHostUserTake, options);\n                if (options.oneofs)\n                    object.action = \"sHostUserTake\";\n            }\n            if (message.cHostUserTakeGold != null && message.hasOwnProperty(\"cHostUserTakeGold\")) {\n                object.cHostUserTakeGold = $root.NT.ClientHostUserTakeGold.toObject(message.cHostUserTakeGold, options);\n                if (options.oneofs)\n                    object.action = \"cHostUserTakeGold\";\n            }\n            if (message.sHostUserTakeGold != null && message.hasOwnProperty(\"sHostUserTakeGold\")) {\n                object.sHostUserTakeGold = $root.NT.ServerHostUserTakeGold.toObject(message.sHostUserTakeGold, options);\n                if (options.oneofs)\n                    object.action = \"sHostUserTakeGold\";\n            }\n            if (message.cPlayerAddGold != null && message.hasOwnProperty(\"cPlayerAddGold\")) {\n                object.cPlayerAddGold = $root.NT.ClientPlayerAddGold.toObject(message.cPlayerAddGold, options);\n                if (options.oneofs)\n                    object.action = \"cPlayerAddGold\";\n            }\n            if (message.sPlayerAddGold != null && message.hasOwnProperty(\"sPlayerAddGold\")) {\n                object.sPlayerAddGold = $root.NT.ServerPlayerAddGold.toObject(message.sPlayerAddGold, options);\n                if (options.oneofs)\n                    object.action = \"sPlayerAddGold\";\n            }\n            if (message.cPlayerTakeGold != null && message.hasOwnProperty(\"cPlayerTakeGold\")) {\n                object.cPlayerTakeGold = $root.NT.ClientPlayerTakeGold.toObject(message.cPlayerTakeGold, options);\n                if (options.oneofs)\n                    object.action = \"cPlayerTakeGold\";\n            }\n            if (message.sPlayerTakeGold != null && message.hasOwnProperty(\"sPlayerTakeGold\")) {\n                object.sPlayerTakeGold = $root.NT.ServerPlayerTakeGold.toObject(message.sPlayerTakeGold, options);\n                if (options.oneofs)\n                    object.action = \"sPlayerTakeGold\";\n            }\n            if (message.cPlayerAddItem != null && message.hasOwnProperty(\"cPlayerAddItem\")) {\n                object.cPlayerAddItem = $root.NT.ClientPlayerAddItem.toObject(message.cPlayerAddItem, options);\n                if (options.oneofs)\n                    object.action = \"cPlayerAddItem\";\n            }\n            if (message.sPlayerAddItem != null && message.hasOwnProperty(\"sPlayerAddItem\")) {\n                object.sPlayerAddItem = $root.NT.ServerPlayerAddItem.toObject(message.sPlayerAddItem, options);\n                if (options.oneofs)\n                    object.action = \"sPlayerAddItem\";\n            }\n            if (message.cPlayerTakeItem != null && message.hasOwnProperty(\"cPlayerTakeItem\")) {\n                object.cPlayerTakeItem = $root.NT.ClientPlayerTakeItem.toObject(message.cPlayerTakeItem, options);\n                if (options.oneofs)\n                    object.action = \"cPlayerTakeItem\";\n            }\n            if (message.sPlayerTakeItem != null && message.hasOwnProperty(\"sPlayerTakeItem\")) {\n                object.sPlayerTakeItem = $root.NT.ServerPlayerTakeItem.toObject(message.sPlayerTakeItem, options);\n                if (options.oneofs)\n                    object.action = \"sPlayerTakeItem\";\n            }\n            if (message.cPlayerPickup != null && message.hasOwnProperty(\"cPlayerPickup\")) {\n                object.cPlayerPickup = $root.NT.ClientPlayerPickup.toObject(message.cPlayerPickup, options);\n                if (options.oneofs)\n                    object.action = \"cPlayerPickup\";\n            }\n            if (message.sPlayerPickup != null && message.hasOwnProperty(\"sPlayerPickup\")) {\n                object.sPlayerPickup = $root.NT.ServerPlayerPickup.toObject(message.sPlayerPickup, options);\n                if (options.oneofs)\n                    object.action = \"sPlayerPickup\";\n            }\n            if (message.cNemesisAbility != null && message.hasOwnProperty(\"cNemesisAbility\")) {\n                object.cNemesisAbility = $root.NT.ClientNemesisAbility.toObject(message.cNemesisAbility, options);\n                if (options.oneofs)\n                    object.action = \"cNemesisAbility\";\n            }\n            if (message.sNemesisAbility != null && message.hasOwnProperty(\"sNemesisAbility\")) {\n                object.sNemesisAbility = $root.NT.ServerNemesisAbility.toObject(message.sNemesisAbility, options);\n                if (options.oneofs)\n                    object.action = \"sNemesisAbility\";\n            }\n            if (message.cNemesisPickupItem != null && message.hasOwnProperty(\"cNemesisPickupItem\")) {\n                object.cNemesisPickupItem = $root.NT.ClientNemesisPickupItem.toObject(message.cNemesisPickupItem, options);\n                if (options.oneofs)\n                    object.action = \"cNemesisPickupItem\";\n            }\n            if (message.sNemesisPickupItem != null && message.hasOwnProperty(\"sNemesisPickupItem\")) {\n                object.sNemesisPickupItem = $root.NT.ServerNemesisPickupItem.toObject(message.sNemesisPickupItem, options);\n                if (options.oneofs)\n                    object.action = \"sNemesisPickupItem\";\n            }\n            if (message.cChat != null && message.hasOwnProperty(\"cChat\")) {\n                object.cChat = $root.NT.ClientChat.toObject(message.cChat, options);\n                if (options.oneofs)\n                    object.action = \"cChat\";\n            }\n            if (message.sChat != null && message.hasOwnProperty(\"sChat\")) {\n                object.sChat = $root.NT.ServerChat.toObject(message.sChat, options);\n                if (options.oneofs)\n                    object.action = \"sChat\";\n            }\n            if (message.cPlayerDeath != null && message.hasOwnProperty(\"cPlayerDeath\")) {\n                object.cPlayerDeath = $root.NT.ClientPlayerDeath.toObject(message.cPlayerDeath, options);\n                if (options.oneofs)\n                    object.action = \"cPlayerDeath\";\n            }\n            if (message.sPlayerDeath != null && message.hasOwnProperty(\"sPlayerDeath\")) {\n                object.sPlayerDeath = $root.NT.ServerPlayerDeath.toObject(message.sPlayerDeath, options);\n                if (options.oneofs)\n                    object.action = \"sPlayerDeath\";\n            }\n            if (message.cPlayerNewGamePlus != null && message.hasOwnProperty(\"cPlayerNewGamePlus\")) {\n                object.cPlayerNewGamePlus = $root.NT.ClientPlayerNewGamePlus.toObject(message.cPlayerNewGamePlus, options);\n                if (options.oneofs)\n                    object.action = \"cPlayerNewGamePlus\";\n            }\n            if (message.sPlayerNewGamePlus != null && message.hasOwnProperty(\"sPlayerNewGamePlus\")) {\n                object.sPlayerNewGamePlus = $root.NT.ServerPlayerNewGamePlus.toObject(message.sPlayerNewGamePlus, options);\n                if (options.oneofs)\n                    object.action = \"sPlayerNewGamePlus\";\n            }\n            if (message.cPlayerSecretHourglass != null && message.hasOwnProperty(\"cPlayerSecretHourglass\")) {\n                object.cPlayerSecretHourglass = $root.NT.ClientPlayerSecretHourglass.toObject(message.cPlayerSecretHourglass, options);\n                if (options.oneofs)\n                    object.action = \"cPlayerSecretHourglass\";\n            }\n            if (message.sPlayerSecretHourglass != null && message.hasOwnProperty(\"sPlayerSecretHourglass\")) {\n                object.sPlayerSecretHourglass = $root.NT.ServerPlayerSecretHourglass.toObject(message.sPlayerSecretHourglass, options);\n                if (options.oneofs)\n                    object.action = \"sPlayerSecretHourglass\";\n            }\n            if (message.cCustomModEvent != null && message.hasOwnProperty(\"cCustomModEvent\")) {\n                object.cCustomModEvent = $root.NT.ClientCustomModEvent.toObject(message.cCustomModEvent, options);\n                if (options.oneofs)\n                    object.action = \"cCustomModEvent\";\n            }\n            if (message.sCustomModEvent != null && message.hasOwnProperty(\"sCustomModEvent\")) {\n                object.sCustomModEvent = $root.NT.ServerCustomModEvent.toObject(message.sCustomModEvent, options);\n                if (options.oneofs)\n                    object.action = \"sCustomModEvent\";\n            }\n            if (message.cRespawnPenalty != null && message.hasOwnProperty(\"cRespawnPenalty\")) {\n                object.cRespawnPenalty = $root.NT.ClientRespawnPenalty.toObject(message.cRespawnPenalty, options);\n                if (options.oneofs)\n                    object.action = \"cRespawnPenalty\";\n            }\n            if (message.sRespawnPenalty != null && message.hasOwnProperty(\"sRespawnPenalty\")) {\n                object.sRespawnPenalty = $root.NT.ServerRespawnPenalty.toObject(message.sRespawnPenalty, options);\n                if (options.oneofs)\n                    object.action = \"sRespawnPenalty\";\n            }\n            if (message.cAngerySteve != null && message.hasOwnProperty(\"cAngerySteve\")) {\n                object.cAngerySteve = $root.NT.ClientAngerySteve.toObject(message.cAngerySteve, options);\n                if (options.oneofs)\n                    object.action = \"cAngerySteve\";\n            }\n            if (message.sAngerySteve != null && message.hasOwnProperty(\"sAngerySteve\")) {\n                object.sAngerySteve = $root.NT.ServerAngerySteve.toObject(message.sAngerySteve, options);\n                if (options.oneofs)\n                    object.action = \"sAngerySteve\";\n            }\n            if (message.sStatUpdate != null && message.hasOwnProperty(\"sStatUpdate\")) {\n                object.sStatUpdate = $root.NT.ServerStatsUpdate.toObject(message.sStatUpdate, options);\n                if (options.oneofs)\n                    object.action = \"sStatUpdate\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this GameAction to JSON.\n         * @function toJSON\n         * @memberof NT.GameAction\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        GameAction.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for GameAction\n         * @function getTypeUrl\n         * @memberof NT.GameAction\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        GameAction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.GameAction\";\n        };\n\n        return GameAction;\n    })();\n\n    NT.PlayerFrame = (function() {\n\n        /**\n         * Properties of a PlayerFrame.\n         * @memberof NT\n         * @interface IPlayerFrame\n         * @property {number|null} [x] PlayerFrame x\n         * @property {number|null} [y] PlayerFrame y\n         * @property {number|null} [armR] PlayerFrame armR\n         * @property {number|null} [armScaleY] PlayerFrame armScaleY\n         * @property {number|null} [scaleX] PlayerFrame scaleX\n         * @property {number|null} [anim] PlayerFrame anim\n         * @property {number|null} [held] PlayerFrame held\n         */\n\n        /**\n         * Constructs a new PlayerFrame.\n         * @memberof NT\n         * @classdesc Represents a PlayerFrame.\n         * @implements IPlayerFrame\n         * @constructor\n         * @param {NT.IPlayerFrame=} [properties] Properties to set\n         */\n        function PlayerFrame(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * PlayerFrame x.\n         * @member {number|null|undefined} x\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        PlayerFrame.prototype.x = null;\n\n        /**\n         * PlayerFrame y.\n         * @member {number|null|undefined} y\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        PlayerFrame.prototype.y = null;\n\n        /**\n         * PlayerFrame armR.\n         * @member {number|null|undefined} armR\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        PlayerFrame.prototype.armR = null;\n\n        /**\n         * PlayerFrame armScaleY.\n         * @member {number|null|undefined} armScaleY\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        PlayerFrame.prototype.armScaleY = null;\n\n        /**\n         * PlayerFrame scaleX.\n         * @member {number|null|undefined} scaleX\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        PlayerFrame.prototype.scaleX = null;\n\n        /**\n         * PlayerFrame anim.\n         * @member {number|null|undefined} anim\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        PlayerFrame.prototype.anim = null;\n\n        /**\n         * PlayerFrame held.\n         * @member {number|null|undefined} held\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        PlayerFrame.prototype.held = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * PlayerFrame _x.\n         * @member {\"x\"|undefined} _x\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        Object.defineProperty(PlayerFrame.prototype, \"_x\", {\n            get: $util.oneOfGetter($oneOfFields = [\"x\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * PlayerFrame _y.\n         * @member {\"y\"|undefined} _y\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        Object.defineProperty(PlayerFrame.prototype, \"_y\", {\n            get: $util.oneOfGetter($oneOfFields = [\"y\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * PlayerFrame _armR.\n         * @member {\"armR\"|undefined} _armR\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        Object.defineProperty(PlayerFrame.prototype, \"_armR\", {\n            get: $util.oneOfGetter($oneOfFields = [\"armR\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * PlayerFrame _armScaleY.\n         * @member {\"armScaleY\"|undefined} _armScaleY\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        Object.defineProperty(PlayerFrame.prototype, \"_armScaleY\", {\n            get: $util.oneOfGetter($oneOfFields = [\"armScaleY\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * PlayerFrame _scaleX.\n         * @member {\"scaleX\"|undefined} _scaleX\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        Object.defineProperty(PlayerFrame.prototype, \"_scaleX\", {\n            get: $util.oneOfGetter($oneOfFields = [\"scaleX\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * PlayerFrame _anim.\n         * @member {\"anim\"|undefined} _anim\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        Object.defineProperty(PlayerFrame.prototype, \"_anim\", {\n            get: $util.oneOfGetter($oneOfFields = [\"anim\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * PlayerFrame _held.\n         * @member {\"held\"|undefined} _held\n         * @memberof NT.PlayerFrame\n         * @instance\n         */\n        Object.defineProperty(PlayerFrame.prototype, \"_held\", {\n            get: $util.oneOfGetter($oneOfFields = [\"held\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new PlayerFrame instance using the specified properties.\n         * @function create\n         * @memberof NT.PlayerFrame\n         * @static\n         * @param {NT.IPlayerFrame=} [properties] Properties to set\n         * @returns {NT.PlayerFrame} PlayerFrame instance\n         */\n        PlayerFrame.create = function create(properties) {\n            return new PlayerFrame(properties);\n        };\n\n        /**\n         * Encodes the specified PlayerFrame message. Does not implicitly {@link NT.PlayerFrame.verify|verify} messages.\n         * @function encode\n         * @memberof NT.PlayerFrame\n         * @static\n         * @param {NT.IPlayerFrame} message PlayerFrame message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PlayerFrame.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.x != null && Object.hasOwnProperty.call(message, \"x\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.x);\n            if (message.y != null && Object.hasOwnProperty.call(message, \"y\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.y);\n            if (message.armR != null && Object.hasOwnProperty.call(message, \"armR\"))\n                writer.uint32(/* id 3, wireType 5 =*/29).float(message.armR);\n            if (message.armScaleY != null && Object.hasOwnProperty.call(message, \"armScaleY\"))\n                writer.uint32(/* id 4, wireType 5 =*/37).float(message.armScaleY);\n            if (message.scaleX != null && Object.hasOwnProperty.call(message, \"scaleX\"))\n                writer.uint32(/* id 5, wireType 5 =*/45).float(message.scaleX);\n            if (message.anim != null && Object.hasOwnProperty.call(message, \"anim\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.anim);\n            if (message.held != null && Object.hasOwnProperty.call(message, \"held\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.held);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified PlayerFrame message, length delimited. Does not implicitly {@link NT.PlayerFrame.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.PlayerFrame\n         * @static\n         * @param {NT.IPlayerFrame} message PlayerFrame message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        PlayerFrame.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a PlayerFrame message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.PlayerFrame\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.PlayerFrame} PlayerFrame\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PlayerFrame.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.PlayerFrame();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.x = reader.float();\n                        break;\n                    }\n                case 2: {\n                        message.y = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.armR = reader.float();\n                        break;\n                    }\n                case 4: {\n                        message.armScaleY = reader.float();\n                        break;\n                    }\n                case 5: {\n                        message.scaleX = reader.float();\n                        break;\n                    }\n                case 6: {\n                        message.anim = reader.int32();\n                        break;\n                    }\n                case 7: {\n                        message.held = reader.int32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a PlayerFrame message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.PlayerFrame\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.PlayerFrame} PlayerFrame\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        PlayerFrame.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a PlayerFrame message.\n         * @function verify\n         * @memberof NT.PlayerFrame\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        PlayerFrame.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.x != null && message.hasOwnProperty(\"x\")) {\n                properties._x = 1;\n                if (typeof message.x !== \"number\")\n                    return \"x: number expected\";\n            }\n            if (message.y != null && message.hasOwnProperty(\"y\")) {\n                properties._y = 1;\n                if (typeof message.y !== \"number\")\n                    return \"y: number expected\";\n            }\n            if (message.armR != null && message.hasOwnProperty(\"armR\")) {\n                properties._armR = 1;\n                if (typeof message.armR !== \"number\")\n                    return \"armR: number expected\";\n            }\n            if (message.armScaleY != null && message.hasOwnProperty(\"armScaleY\")) {\n                properties._armScaleY = 1;\n                if (typeof message.armScaleY !== \"number\")\n                    return \"armScaleY: number expected\";\n            }\n            if (message.scaleX != null && message.hasOwnProperty(\"scaleX\")) {\n                properties._scaleX = 1;\n                if (typeof message.scaleX !== \"number\")\n                    return \"scaleX: number expected\";\n            }\n            if (message.anim != null && message.hasOwnProperty(\"anim\")) {\n                properties._anim = 1;\n                if (!$util.isInteger(message.anim))\n                    return \"anim: integer expected\";\n            }\n            if (message.held != null && message.hasOwnProperty(\"held\")) {\n                properties._held = 1;\n                if (!$util.isInteger(message.held))\n                    return \"held: integer expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a PlayerFrame message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.PlayerFrame\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.PlayerFrame} PlayerFrame\n         */\n        PlayerFrame.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.PlayerFrame)\n                return object;\n            let message = new $root.NT.PlayerFrame();\n            if (object.x != null)\n                message.x = Number(object.x);\n            if (object.y != null)\n                message.y = Number(object.y);\n            if (object.armR != null)\n                message.armR = Number(object.armR);\n            if (object.armScaleY != null)\n                message.armScaleY = Number(object.armScaleY);\n            if (object.scaleX != null)\n                message.scaleX = Number(object.scaleX);\n            if (object.anim != null)\n                message.anim = object.anim | 0;\n            if (object.held != null)\n                message.held = object.held | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a PlayerFrame message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.PlayerFrame\n         * @static\n         * @param {NT.PlayerFrame} message PlayerFrame\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        PlayerFrame.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.x != null && message.hasOwnProperty(\"x\")) {\n                object.x = options.json && !isFinite(message.x) ? String(message.x) : message.x;\n                if (options.oneofs)\n                    object._x = \"x\";\n            }\n            if (message.y != null && message.hasOwnProperty(\"y\")) {\n                object.y = options.json && !isFinite(message.y) ? String(message.y) : message.y;\n                if (options.oneofs)\n                    object._y = \"y\";\n            }\n            if (message.armR != null && message.hasOwnProperty(\"armR\")) {\n                object.armR = options.json && !isFinite(message.armR) ? String(message.armR) : message.armR;\n                if (options.oneofs)\n                    object._armR = \"armR\";\n            }\n            if (message.armScaleY != null && message.hasOwnProperty(\"armScaleY\")) {\n                object.armScaleY = options.json && !isFinite(message.armScaleY) ? String(message.armScaleY) : message.armScaleY;\n                if (options.oneofs)\n                    object._armScaleY = \"armScaleY\";\n            }\n            if (message.scaleX != null && message.hasOwnProperty(\"scaleX\")) {\n                object.scaleX = options.json && !isFinite(message.scaleX) ? String(message.scaleX) : message.scaleX;\n                if (options.oneofs)\n                    object._scaleX = \"scaleX\";\n            }\n            if (message.anim != null && message.hasOwnProperty(\"anim\")) {\n                object.anim = message.anim;\n                if (options.oneofs)\n                    object._anim = \"anim\";\n            }\n            if (message.held != null && message.hasOwnProperty(\"held\")) {\n                object.held = message.held;\n                if (options.oneofs)\n                    object._held = \"held\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this PlayerFrame to JSON.\n         * @function toJSON\n         * @memberof NT.PlayerFrame\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        PlayerFrame.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for PlayerFrame\n         * @function getTypeUrl\n         * @memberof NT.PlayerFrame\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        PlayerFrame.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.PlayerFrame\";\n        };\n\n        return PlayerFrame;\n    })();\n\n    NT.OldClientPlayerMove = (function() {\n\n        /**\n         * Properties of an OldClientPlayerMove.\n         * @memberof NT\n         * @interface IOldClientPlayerMove\n         * @property {Array.<NT.IPlayerFrame>|null} [frames] OldClientPlayerMove frames\n         */\n\n        /**\n         * Constructs a new OldClientPlayerMove.\n         * @memberof NT\n         * @classdesc Represents an OldClientPlayerMove.\n         * @implements IOldClientPlayerMove\n         * @constructor\n         * @param {NT.IOldClientPlayerMove=} [properties] Properties to set\n         */\n        function OldClientPlayerMove(properties) {\n            this.frames = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OldClientPlayerMove frames.\n         * @member {Array.<NT.IPlayerFrame>} frames\n         * @memberof NT.OldClientPlayerMove\n         * @instance\n         */\n        OldClientPlayerMove.prototype.frames = $util.emptyArray;\n\n        /**\n         * Creates a new OldClientPlayerMove instance using the specified properties.\n         * @function create\n         * @memberof NT.OldClientPlayerMove\n         * @static\n         * @param {NT.IOldClientPlayerMove=} [properties] Properties to set\n         * @returns {NT.OldClientPlayerMove} OldClientPlayerMove instance\n         */\n        OldClientPlayerMove.create = function create(properties) {\n            return new OldClientPlayerMove(properties);\n        };\n\n        /**\n         * Encodes the specified OldClientPlayerMove message. Does not implicitly {@link NT.OldClientPlayerMove.verify|verify} messages.\n         * @function encode\n         * @memberof NT.OldClientPlayerMove\n         * @static\n         * @param {NT.IOldClientPlayerMove} message OldClientPlayerMove message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OldClientPlayerMove.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.frames != null && message.frames.length)\n                for (let i = 0; i < message.frames.length; ++i)\n                    $root.NT.PlayerFrame.encode(message.frames[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OldClientPlayerMove message, length delimited. Does not implicitly {@link NT.OldClientPlayerMove.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.OldClientPlayerMove\n         * @static\n         * @param {NT.IOldClientPlayerMove} message OldClientPlayerMove message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OldClientPlayerMove.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OldClientPlayerMove message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.OldClientPlayerMove\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.OldClientPlayerMove} OldClientPlayerMove\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OldClientPlayerMove.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.OldClientPlayerMove();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.frames && message.frames.length))\n                            message.frames = [];\n                        message.frames.push($root.NT.PlayerFrame.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OldClientPlayerMove message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.OldClientPlayerMove\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.OldClientPlayerMove} OldClientPlayerMove\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OldClientPlayerMove.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OldClientPlayerMove message.\n         * @function verify\n         * @memberof NT.OldClientPlayerMove\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OldClientPlayerMove.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.frames != null && message.hasOwnProperty(\"frames\")) {\n                if (!Array.isArray(message.frames))\n                    return \"frames: array expected\";\n                for (let i = 0; i < message.frames.length; ++i) {\n                    let error = $root.NT.PlayerFrame.verify(message.frames[i]);\n                    if (error)\n                        return \"frames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an OldClientPlayerMove message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.OldClientPlayerMove\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.OldClientPlayerMove} OldClientPlayerMove\n         */\n        OldClientPlayerMove.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.OldClientPlayerMove)\n                return object;\n            let message = new $root.NT.OldClientPlayerMove();\n            if (object.frames) {\n                if (!Array.isArray(object.frames))\n                    throw TypeError(\".NT.OldClientPlayerMove.frames: array expected\");\n                message.frames = [];\n                for (let i = 0; i < object.frames.length; ++i) {\n                    if (typeof object.frames[i] !== \"object\")\n                        throw TypeError(\".NT.OldClientPlayerMove.frames: object expected\");\n                    message.frames[i] = $root.NT.PlayerFrame.fromObject(object.frames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OldClientPlayerMove message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.OldClientPlayerMove\n         * @static\n         * @param {NT.OldClientPlayerMove} message OldClientPlayerMove\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OldClientPlayerMove.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.frames = [];\n            if (message.frames && message.frames.length) {\n                object.frames = [];\n                for (let j = 0; j < message.frames.length; ++j)\n                    object.frames[j] = $root.NT.PlayerFrame.toObject(message.frames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this OldClientPlayerMove to JSON.\n         * @function toJSON\n         * @memberof NT.OldClientPlayerMove\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OldClientPlayerMove.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OldClientPlayerMove\n         * @function getTypeUrl\n         * @memberof NT.OldClientPlayerMove\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OldClientPlayerMove.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.OldClientPlayerMove\";\n        };\n\n        return OldClientPlayerMove;\n    })();\n\n    NT.OldServerPlayerMove = (function() {\n\n        /**\n         * Properties of an OldServerPlayerMove.\n         * @memberof NT\n         * @interface IOldServerPlayerMove\n         * @property {string|null} [userId] OldServerPlayerMove userId\n         * @property {Array.<NT.IPlayerFrame>|null} [frames] OldServerPlayerMove frames\n         */\n\n        /**\n         * Constructs a new OldServerPlayerMove.\n         * @memberof NT\n         * @classdesc Represents an OldServerPlayerMove.\n         * @implements IOldServerPlayerMove\n         * @constructor\n         * @param {NT.IOldServerPlayerMove=} [properties] Properties to set\n         */\n        function OldServerPlayerMove(properties) {\n            this.frames = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * OldServerPlayerMove userId.\n         * @member {string} userId\n         * @memberof NT.OldServerPlayerMove\n         * @instance\n         */\n        OldServerPlayerMove.prototype.userId = \"\";\n\n        /**\n         * OldServerPlayerMove frames.\n         * @member {Array.<NT.IPlayerFrame>} frames\n         * @memberof NT.OldServerPlayerMove\n         * @instance\n         */\n        OldServerPlayerMove.prototype.frames = $util.emptyArray;\n\n        /**\n         * Creates a new OldServerPlayerMove instance using the specified properties.\n         * @function create\n         * @memberof NT.OldServerPlayerMove\n         * @static\n         * @param {NT.IOldServerPlayerMove=} [properties] Properties to set\n         * @returns {NT.OldServerPlayerMove} OldServerPlayerMove instance\n         */\n        OldServerPlayerMove.create = function create(properties) {\n            return new OldServerPlayerMove(properties);\n        };\n\n        /**\n         * Encodes the specified OldServerPlayerMove message. Does not implicitly {@link NT.OldServerPlayerMove.verify|verify} messages.\n         * @function encode\n         * @memberof NT.OldServerPlayerMove\n         * @static\n         * @param {NT.IOldServerPlayerMove} message OldServerPlayerMove message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OldServerPlayerMove.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.frames != null && message.frames.length)\n                for (let i = 0; i < message.frames.length; ++i)\n                    $root.NT.PlayerFrame.encode(message.frames[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified OldServerPlayerMove message, length delimited. Does not implicitly {@link NT.OldServerPlayerMove.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.OldServerPlayerMove\n         * @static\n         * @param {NT.IOldServerPlayerMove} message OldServerPlayerMove message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        OldServerPlayerMove.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an OldServerPlayerMove message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.OldServerPlayerMove\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.OldServerPlayerMove} OldServerPlayerMove\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OldServerPlayerMove.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.OldServerPlayerMove();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.frames && message.frames.length))\n                            message.frames = [];\n                        message.frames.push($root.NT.PlayerFrame.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an OldServerPlayerMove message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.OldServerPlayerMove\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.OldServerPlayerMove} OldServerPlayerMove\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        OldServerPlayerMove.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an OldServerPlayerMove message.\n         * @function verify\n         * @memberof NT.OldServerPlayerMove\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        OldServerPlayerMove.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.frames != null && message.hasOwnProperty(\"frames\")) {\n                if (!Array.isArray(message.frames))\n                    return \"frames: array expected\";\n                for (let i = 0; i < message.frames.length; ++i) {\n                    let error = $root.NT.PlayerFrame.verify(message.frames[i]);\n                    if (error)\n                        return \"frames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates an OldServerPlayerMove message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.OldServerPlayerMove\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.OldServerPlayerMove} OldServerPlayerMove\n         */\n        OldServerPlayerMove.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.OldServerPlayerMove)\n                return object;\n            let message = new $root.NT.OldServerPlayerMove();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.frames) {\n                if (!Array.isArray(object.frames))\n                    throw TypeError(\".NT.OldServerPlayerMove.frames: array expected\");\n                message.frames = [];\n                for (let i = 0; i < object.frames.length; ++i) {\n                    if (typeof object.frames[i] !== \"object\")\n                        throw TypeError(\".NT.OldServerPlayerMove.frames: object expected\");\n                    message.frames[i] = $root.NT.PlayerFrame.fromObject(object.frames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an OldServerPlayerMove message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.OldServerPlayerMove\n         * @static\n         * @param {NT.OldServerPlayerMove} message OldServerPlayerMove\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        OldServerPlayerMove.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.frames = [];\n            if (options.defaults)\n                object.userId = \"\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.frames && message.frames.length) {\n                object.frames = [];\n                for (let j = 0; j < message.frames.length; ++j)\n                    object.frames[j] = $root.NT.PlayerFrame.toObject(message.frames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this OldServerPlayerMove to JSON.\n         * @function toJSON\n         * @memberof NT.OldServerPlayerMove\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        OldServerPlayerMove.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for OldServerPlayerMove\n         * @function getTypeUrl\n         * @memberof NT.OldServerPlayerMove\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        OldServerPlayerMove.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.OldServerPlayerMove\";\n        };\n\n        return OldServerPlayerMove;\n    })();\n\n    NT.CompactPlayerFrames = (function() {\n\n        /**\n         * Properties of a CompactPlayerFrames.\n         * @memberof NT\n         * @interface ICompactPlayerFrames\n         * @property {number|null} [xInit] CompactPlayerFrames xInit\n         * @property {number|null} [yInit] CompactPlayerFrames yInit\n         * @property {Array.<number>|null} [xDeltas] CompactPlayerFrames xDeltas\n         * @property {Array.<number>|null} [yDeltas] CompactPlayerFrames yDeltas\n         * @property {Array.<number>|null} [armR] CompactPlayerFrames armR\n         * @property {number|null} [armScaleY] CompactPlayerFrames armScaleY\n         * @property {number|null} [scaleX] CompactPlayerFrames scaleX\n         * @property {Array.<number>|null} [animIdx] CompactPlayerFrames animIdx\n         * @property {Array.<number>|null} [animVal] CompactPlayerFrames animVal\n         * @property {Array.<number>|null} [heldIdx] CompactPlayerFrames heldIdx\n         * @property {Array.<number>|null} [heldVal] CompactPlayerFrames heldVal\n         * @property {string|null} [userId] CompactPlayerFrames userId\n         */\n\n        /**\n         * Constructs a new CompactPlayerFrames.\n         * @memberof NT\n         * @classdesc Represents a CompactPlayerFrames.\n         * @implements ICompactPlayerFrames\n         * @constructor\n         * @param {NT.ICompactPlayerFrames=} [properties] Properties to set\n         */\n        function CompactPlayerFrames(properties) {\n            this.xDeltas = [];\n            this.yDeltas = [];\n            this.armR = [];\n            this.animIdx = [];\n            this.animVal = [];\n            this.heldIdx = [];\n            this.heldVal = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CompactPlayerFrames xInit.\n         * @member {number} xInit\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         */\n        CompactPlayerFrames.prototype.xInit = 0;\n\n        /**\n         * CompactPlayerFrames yInit.\n         * @member {number} yInit\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         */\n        CompactPlayerFrames.prototype.yInit = 0;\n\n        /**\n         * CompactPlayerFrames xDeltas.\n         * @member {Array.<number>} xDeltas\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         */\n        CompactPlayerFrames.prototype.xDeltas = $util.emptyArray;\n\n        /**\n         * CompactPlayerFrames yDeltas.\n         * @member {Array.<number>} yDeltas\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         */\n        CompactPlayerFrames.prototype.yDeltas = $util.emptyArray;\n\n        /**\n         * CompactPlayerFrames armR.\n         * @member {Array.<number>} armR\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         */\n        CompactPlayerFrames.prototype.armR = $util.emptyArray;\n\n        /**\n         * CompactPlayerFrames armScaleY.\n         * @member {number} armScaleY\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         */\n        CompactPlayerFrames.prototype.armScaleY = 0;\n\n        /**\n         * CompactPlayerFrames scaleX.\n         * @member {number} scaleX\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         */\n        CompactPlayerFrames.prototype.scaleX = 0;\n\n        /**\n         * CompactPlayerFrames animIdx.\n         * @member {Array.<number>} animIdx\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         */\n        CompactPlayerFrames.prototype.animIdx = $util.emptyArray;\n\n        /**\n         * CompactPlayerFrames animVal.\n         * @member {Array.<number>} animVal\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         */\n        CompactPlayerFrames.prototype.animVal = $util.emptyArray;\n\n        /**\n         * CompactPlayerFrames heldIdx.\n         * @member {Array.<number>} heldIdx\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         */\n        CompactPlayerFrames.prototype.heldIdx = $util.emptyArray;\n\n        /**\n         * CompactPlayerFrames heldVal.\n         * @member {Array.<number>} heldVal\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         */\n        CompactPlayerFrames.prototype.heldVal = $util.emptyArray;\n\n        /**\n         * CompactPlayerFrames userId.\n         * @member {string} userId\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         */\n        CompactPlayerFrames.prototype.userId = \"\";\n\n        /**\n         * Creates a new CompactPlayerFrames instance using the specified properties.\n         * @function create\n         * @memberof NT.CompactPlayerFrames\n         * @static\n         * @param {NT.ICompactPlayerFrames=} [properties] Properties to set\n         * @returns {NT.CompactPlayerFrames} CompactPlayerFrames instance\n         */\n        CompactPlayerFrames.create = function create(properties) {\n            return new CompactPlayerFrames(properties);\n        };\n\n        /**\n         * Encodes the specified CompactPlayerFrames message. Does not implicitly {@link NT.CompactPlayerFrames.verify|verify} messages.\n         * @function encode\n         * @memberof NT.CompactPlayerFrames\n         * @static\n         * @param {NT.ICompactPlayerFrames} message CompactPlayerFrames message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompactPlayerFrames.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.xInit != null && Object.hasOwnProperty.call(message, \"xInit\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.xInit);\n            if (message.yInit != null && Object.hasOwnProperty.call(message, \"yInit\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.yInit);\n            if (message.xDeltas != null && message.xDeltas.length) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork();\n                for (let i = 0; i < message.xDeltas.length; ++i)\n                    writer.sint32(message.xDeltas[i]);\n                writer.ldelim();\n            }\n            if (message.yDeltas != null && message.yDeltas.length) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork();\n                for (let i = 0; i < message.yDeltas.length; ++i)\n                    writer.sint32(message.yDeltas[i]);\n                writer.ldelim();\n            }\n            if (message.armR != null && message.armR.length) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork();\n                for (let i = 0; i < message.armR.length; ++i)\n                    writer.int32(message.armR[i]);\n                writer.ldelim();\n            }\n            if (message.armScaleY != null && Object.hasOwnProperty.call(message, \"armScaleY\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).int32(message.armScaleY);\n            if (message.scaleX != null && Object.hasOwnProperty.call(message, \"scaleX\"))\n                writer.uint32(/* id 7, wireType 0 =*/56).int32(message.scaleX);\n            if (message.animIdx != null && message.animIdx.length) {\n                writer.uint32(/* id 8, wireType 2 =*/66).fork();\n                for (let i = 0; i < message.animIdx.length; ++i)\n                    writer.int32(message.animIdx[i]);\n                writer.ldelim();\n            }\n            if (message.animVal != null && message.animVal.length) {\n                writer.uint32(/* id 9, wireType 2 =*/74).fork();\n                for (let i = 0; i < message.animVal.length; ++i)\n                    writer.int32(message.animVal[i]);\n                writer.ldelim();\n            }\n            if (message.heldIdx != null && message.heldIdx.length) {\n                writer.uint32(/* id 10, wireType 2 =*/82).fork();\n                for (let i = 0; i < message.heldIdx.length; ++i)\n                    writer.int32(message.heldIdx[i]);\n                writer.ldelim();\n            }\n            if (message.heldVal != null && message.heldVal.length) {\n                writer.uint32(/* id 11, wireType 2 =*/90).fork();\n                for (let i = 0; i < message.heldVal.length; ++i)\n                    writer.int32(message.heldVal[i]);\n                writer.ldelim();\n            }\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 15, wireType 2 =*/122).string(message.userId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CompactPlayerFrames message, length delimited. Does not implicitly {@link NT.CompactPlayerFrames.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.CompactPlayerFrames\n         * @static\n         * @param {NT.ICompactPlayerFrames} message CompactPlayerFrames message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CompactPlayerFrames.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CompactPlayerFrames message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.CompactPlayerFrames\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.CompactPlayerFrames} CompactPlayerFrames\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompactPlayerFrames.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.CompactPlayerFrames();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.xInit = reader.float();\n                        break;\n                    }\n                case 2: {\n                        message.yInit = reader.float();\n                        break;\n                    }\n                case 3: {\n                        if (!(message.xDeltas && message.xDeltas.length))\n                            message.xDeltas = [];\n                        if ((tag & 7) === 2) {\n                            let end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.xDeltas.push(reader.sint32());\n                        } else\n                            message.xDeltas.push(reader.sint32());\n                        break;\n                    }\n                case 4: {\n                        if (!(message.yDeltas && message.yDeltas.length))\n                            message.yDeltas = [];\n                        if ((tag & 7) === 2) {\n                            let end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.yDeltas.push(reader.sint32());\n                        } else\n                            message.yDeltas.push(reader.sint32());\n                        break;\n                    }\n                case 5: {\n                        if (!(message.armR && message.armR.length))\n                            message.armR = [];\n                        if ((tag & 7) === 2) {\n                            let end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.armR.push(reader.int32());\n                        } else\n                            message.armR.push(reader.int32());\n                        break;\n                    }\n                case 6: {\n                        message.armScaleY = reader.int32();\n                        break;\n                    }\n                case 7: {\n                        message.scaleX = reader.int32();\n                        break;\n                    }\n                case 8: {\n                        if (!(message.animIdx && message.animIdx.length))\n                            message.animIdx = [];\n                        if ((tag & 7) === 2) {\n                            let end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.animIdx.push(reader.int32());\n                        } else\n                            message.animIdx.push(reader.int32());\n                        break;\n                    }\n                case 9: {\n                        if (!(message.animVal && message.animVal.length))\n                            message.animVal = [];\n                        if ((tag & 7) === 2) {\n                            let end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.animVal.push(reader.int32());\n                        } else\n                            message.animVal.push(reader.int32());\n                        break;\n                    }\n                case 10: {\n                        if (!(message.heldIdx && message.heldIdx.length))\n                            message.heldIdx = [];\n                        if ((tag & 7) === 2) {\n                            let end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.heldIdx.push(reader.int32());\n                        } else\n                            message.heldIdx.push(reader.int32());\n                        break;\n                    }\n                case 11: {\n                        if (!(message.heldVal && message.heldVal.length))\n                            message.heldVal = [];\n                        if ((tag & 7) === 2) {\n                            let end2 = reader.uint32() + reader.pos;\n                            while (reader.pos < end2)\n                                message.heldVal.push(reader.int32());\n                        } else\n                            message.heldVal.push(reader.int32());\n                        break;\n                    }\n                case 15: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CompactPlayerFrames message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.CompactPlayerFrames\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.CompactPlayerFrames} CompactPlayerFrames\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CompactPlayerFrames.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CompactPlayerFrames message.\n         * @function verify\n         * @memberof NT.CompactPlayerFrames\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CompactPlayerFrames.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.xInit != null && message.hasOwnProperty(\"xInit\"))\n                if (typeof message.xInit !== \"number\")\n                    return \"xInit: number expected\";\n            if (message.yInit != null && message.hasOwnProperty(\"yInit\"))\n                if (typeof message.yInit !== \"number\")\n                    return \"yInit: number expected\";\n            if (message.xDeltas != null && message.hasOwnProperty(\"xDeltas\")) {\n                if (!Array.isArray(message.xDeltas))\n                    return \"xDeltas: array expected\";\n                for (let i = 0; i < message.xDeltas.length; ++i)\n                    if (!$util.isInteger(message.xDeltas[i]))\n                        return \"xDeltas: integer[] expected\";\n            }\n            if (message.yDeltas != null && message.hasOwnProperty(\"yDeltas\")) {\n                if (!Array.isArray(message.yDeltas))\n                    return \"yDeltas: array expected\";\n                for (let i = 0; i < message.yDeltas.length; ++i)\n                    if (!$util.isInteger(message.yDeltas[i]))\n                        return \"yDeltas: integer[] expected\";\n            }\n            if (message.armR != null && message.hasOwnProperty(\"armR\")) {\n                if (!Array.isArray(message.armR))\n                    return \"armR: array expected\";\n                for (let i = 0; i < message.armR.length; ++i)\n                    if (!$util.isInteger(message.armR[i]))\n                        return \"armR: integer[] expected\";\n            }\n            if (message.armScaleY != null && message.hasOwnProperty(\"armScaleY\"))\n                if (!$util.isInteger(message.armScaleY))\n                    return \"armScaleY: integer expected\";\n            if (message.scaleX != null && message.hasOwnProperty(\"scaleX\"))\n                if (!$util.isInteger(message.scaleX))\n                    return \"scaleX: integer expected\";\n            if (message.animIdx != null && message.hasOwnProperty(\"animIdx\")) {\n                if (!Array.isArray(message.animIdx))\n                    return \"animIdx: array expected\";\n                for (let i = 0; i < message.animIdx.length; ++i)\n                    if (!$util.isInteger(message.animIdx[i]))\n                        return \"animIdx: integer[] expected\";\n            }\n            if (message.animVal != null && message.hasOwnProperty(\"animVal\")) {\n                if (!Array.isArray(message.animVal))\n                    return \"animVal: array expected\";\n                for (let i = 0; i < message.animVal.length; ++i)\n                    if (!$util.isInteger(message.animVal[i]))\n                        return \"animVal: integer[] expected\";\n            }\n            if (message.heldIdx != null && message.hasOwnProperty(\"heldIdx\")) {\n                if (!Array.isArray(message.heldIdx))\n                    return \"heldIdx: array expected\";\n                for (let i = 0; i < message.heldIdx.length; ++i)\n                    if (!$util.isInteger(message.heldIdx[i]))\n                        return \"heldIdx: integer[] expected\";\n            }\n            if (message.heldVal != null && message.hasOwnProperty(\"heldVal\")) {\n                if (!Array.isArray(message.heldVal))\n                    return \"heldVal: array expected\";\n                for (let i = 0; i < message.heldVal.length; ++i)\n                    if (!$util.isInteger(message.heldVal[i]))\n                        return \"heldVal: integer[] expected\";\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CompactPlayerFrames message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.CompactPlayerFrames\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.CompactPlayerFrames} CompactPlayerFrames\n         */\n        CompactPlayerFrames.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.CompactPlayerFrames)\n                return object;\n            let message = new $root.NT.CompactPlayerFrames();\n            if (object.xInit != null)\n                message.xInit = Number(object.xInit);\n            if (object.yInit != null)\n                message.yInit = Number(object.yInit);\n            if (object.xDeltas) {\n                if (!Array.isArray(object.xDeltas))\n                    throw TypeError(\".NT.CompactPlayerFrames.xDeltas: array expected\");\n                message.xDeltas = [];\n                for (let i = 0; i < object.xDeltas.length; ++i)\n                    message.xDeltas[i] = object.xDeltas[i] | 0;\n            }\n            if (object.yDeltas) {\n                if (!Array.isArray(object.yDeltas))\n                    throw TypeError(\".NT.CompactPlayerFrames.yDeltas: array expected\");\n                message.yDeltas = [];\n                for (let i = 0; i < object.yDeltas.length; ++i)\n                    message.yDeltas[i] = object.yDeltas[i] | 0;\n            }\n            if (object.armR) {\n                if (!Array.isArray(object.armR))\n                    throw TypeError(\".NT.CompactPlayerFrames.armR: array expected\");\n                message.armR = [];\n                for (let i = 0; i < object.armR.length; ++i)\n                    message.armR[i] = object.armR[i] | 0;\n            }\n            if (object.armScaleY != null)\n                message.armScaleY = object.armScaleY | 0;\n            if (object.scaleX != null)\n                message.scaleX = object.scaleX | 0;\n            if (object.animIdx) {\n                if (!Array.isArray(object.animIdx))\n                    throw TypeError(\".NT.CompactPlayerFrames.animIdx: array expected\");\n                message.animIdx = [];\n                for (let i = 0; i < object.animIdx.length; ++i)\n                    message.animIdx[i] = object.animIdx[i] | 0;\n            }\n            if (object.animVal) {\n                if (!Array.isArray(object.animVal))\n                    throw TypeError(\".NT.CompactPlayerFrames.animVal: array expected\");\n                message.animVal = [];\n                for (let i = 0; i < object.animVal.length; ++i)\n                    message.animVal[i] = object.animVal[i] | 0;\n            }\n            if (object.heldIdx) {\n                if (!Array.isArray(object.heldIdx))\n                    throw TypeError(\".NT.CompactPlayerFrames.heldIdx: array expected\");\n                message.heldIdx = [];\n                for (let i = 0; i < object.heldIdx.length; ++i)\n                    message.heldIdx[i] = object.heldIdx[i] | 0;\n            }\n            if (object.heldVal) {\n                if (!Array.isArray(object.heldVal))\n                    throw TypeError(\".NT.CompactPlayerFrames.heldVal: array expected\");\n                message.heldVal = [];\n                for (let i = 0; i < object.heldVal.length; ++i)\n                    message.heldVal[i] = object.heldVal[i] | 0;\n            }\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CompactPlayerFrames message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.CompactPlayerFrames\n         * @static\n         * @param {NT.CompactPlayerFrames} message CompactPlayerFrames\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CompactPlayerFrames.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.xDeltas = [];\n                object.yDeltas = [];\n                object.armR = [];\n                object.animIdx = [];\n                object.animVal = [];\n                object.heldIdx = [];\n                object.heldVal = [];\n            }\n            if (options.defaults) {\n                object.xInit = 0;\n                object.yInit = 0;\n                object.armScaleY = 0;\n                object.scaleX = 0;\n                object.userId = \"\";\n            }\n            if (message.xInit != null && message.hasOwnProperty(\"xInit\"))\n                object.xInit = options.json && !isFinite(message.xInit) ? String(message.xInit) : message.xInit;\n            if (message.yInit != null && message.hasOwnProperty(\"yInit\"))\n                object.yInit = options.json && !isFinite(message.yInit) ? String(message.yInit) : message.yInit;\n            if (message.xDeltas && message.xDeltas.length) {\n                object.xDeltas = [];\n                for (let j = 0; j < message.xDeltas.length; ++j)\n                    object.xDeltas[j] = message.xDeltas[j];\n            }\n            if (message.yDeltas && message.yDeltas.length) {\n                object.yDeltas = [];\n                for (let j = 0; j < message.yDeltas.length; ++j)\n                    object.yDeltas[j] = message.yDeltas[j];\n            }\n            if (message.armR && message.armR.length) {\n                object.armR = [];\n                for (let j = 0; j < message.armR.length; ++j)\n                    object.armR[j] = message.armR[j];\n            }\n            if (message.armScaleY != null && message.hasOwnProperty(\"armScaleY\"))\n                object.armScaleY = message.armScaleY;\n            if (message.scaleX != null && message.hasOwnProperty(\"scaleX\"))\n                object.scaleX = message.scaleX;\n            if (message.animIdx && message.animIdx.length) {\n                object.animIdx = [];\n                for (let j = 0; j < message.animIdx.length; ++j)\n                    object.animIdx[j] = message.animIdx[j];\n            }\n            if (message.animVal && message.animVal.length) {\n                object.animVal = [];\n                for (let j = 0; j < message.animVal.length; ++j)\n                    object.animVal[j] = message.animVal[j];\n            }\n            if (message.heldIdx && message.heldIdx.length) {\n                object.heldIdx = [];\n                for (let j = 0; j < message.heldIdx.length; ++j)\n                    object.heldIdx[j] = message.heldIdx[j];\n            }\n            if (message.heldVal && message.heldVal.length) {\n                object.heldVal = [];\n                for (let j = 0; j < message.heldVal.length; ++j)\n                    object.heldVal[j] = message.heldVal[j];\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            return object;\n        };\n\n        /**\n         * Converts this CompactPlayerFrames to JSON.\n         * @function toJSON\n         * @memberof NT.CompactPlayerFrames\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CompactPlayerFrames.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for CompactPlayerFrames\n         * @function getTypeUrl\n         * @memberof NT.CompactPlayerFrames\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        CompactPlayerFrames.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.CompactPlayerFrames\";\n        };\n\n        return CompactPlayerFrames;\n    })();\n\n    NT.ServerPlayerMoves = (function() {\n\n        /**\n         * Properties of a ServerPlayerMoves.\n         * @memberof NT\n         * @interface IServerPlayerMoves\n         * @property {Array.<NT.ICompactPlayerFrames>|null} [userFrames] ServerPlayerMoves userFrames\n         */\n\n        /**\n         * Constructs a new ServerPlayerMoves.\n         * @memberof NT\n         * @classdesc Represents a ServerPlayerMoves.\n         * @implements IServerPlayerMoves\n         * @constructor\n         * @param {NT.IServerPlayerMoves=} [properties] Properties to set\n         */\n        function ServerPlayerMoves(properties) {\n            this.userFrames = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerPlayerMoves userFrames.\n         * @member {Array.<NT.ICompactPlayerFrames>} userFrames\n         * @memberof NT.ServerPlayerMoves\n         * @instance\n         */\n        ServerPlayerMoves.prototype.userFrames = $util.emptyArray;\n\n        /**\n         * Creates a new ServerPlayerMoves instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerPlayerMoves\n         * @static\n         * @param {NT.IServerPlayerMoves=} [properties] Properties to set\n         * @returns {NT.ServerPlayerMoves} ServerPlayerMoves instance\n         */\n        ServerPlayerMoves.create = function create(properties) {\n            return new ServerPlayerMoves(properties);\n        };\n\n        /**\n         * Encodes the specified ServerPlayerMoves message. Does not implicitly {@link NT.ServerPlayerMoves.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerPlayerMoves\n         * @static\n         * @param {NT.IServerPlayerMoves} message ServerPlayerMoves message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerMoves.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userFrames != null && message.userFrames.length)\n                for (let i = 0; i < message.userFrames.length; ++i)\n                    $root.NT.CompactPlayerFrames.encode(message.userFrames[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerPlayerMoves message, length delimited. Does not implicitly {@link NT.ServerPlayerMoves.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerPlayerMoves\n         * @static\n         * @param {NT.IServerPlayerMoves} message ServerPlayerMoves message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerMoves.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerPlayerMoves message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerPlayerMoves\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerPlayerMoves} ServerPlayerMoves\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerMoves.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerMoves();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.userFrames && message.userFrames.length))\n                            message.userFrames = [];\n                        message.userFrames.push($root.NT.CompactPlayerFrames.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerPlayerMoves message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerPlayerMoves\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerPlayerMoves} ServerPlayerMoves\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerMoves.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerPlayerMoves message.\n         * @function verify\n         * @memberof NT.ServerPlayerMoves\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerPlayerMoves.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userFrames != null && message.hasOwnProperty(\"userFrames\")) {\n                if (!Array.isArray(message.userFrames))\n                    return \"userFrames: array expected\";\n                for (let i = 0; i < message.userFrames.length; ++i) {\n                    let error = $root.NT.CompactPlayerFrames.verify(message.userFrames[i]);\n                    if (error)\n                        return \"userFrames.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerPlayerMoves message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerPlayerMoves\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerPlayerMoves} ServerPlayerMoves\n         */\n        ServerPlayerMoves.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerPlayerMoves)\n                return object;\n            let message = new $root.NT.ServerPlayerMoves();\n            if (object.userFrames) {\n                if (!Array.isArray(object.userFrames))\n                    throw TypeError(\".NT.ServerPlayerMoves.userFrames: array expected\");\n                message.userFrames = [];\n                for (let i = 0; i < object.userFrames.length; ++i) {\n                    if (typeof object.userFrames[i] !== \"object\")\n                        throw TypeError(\".NT.ServerPlayerMoves.userFrames: object expected\");\n                    message.userFrames[i] = $root.NT.CompactPlayerFrames.fromObject(object.userFrames[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerPlayerMoves message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerPlayerMoves\n         * @static\n         * @param {NT.ServerPlayerMoves} message ServerPlayerMoves\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerPlayerMoves.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.userFrames = [];\n            if (message.userFrames && message.userFrames.length) {\n                object.userFrames = [];\n                for (let j = 0; j < message.userFrames.length; ++j)\n                    object.userFrames[j] = $root.NT.CompactPlayerFrames.toObject(message.userFrames[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerPlayerMoves to JSON.\n         * @function toJSON\n         * @memberof NT.ServerPlayerMoves\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerPlayerMoves.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerPlayerMoves\n         * @function getTypeUrl\n         * @memberof NT.ServerPlayerMoves\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerPlayerMoves.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerPlayerMoves\";\n        };\n\n        return ServerPlayerMoves;\n    })();\n\n    NT.ClientPlayerUpdate = (function() {\n\n        /**\n         * Properties of a ClientPlayerUpdate.\n         * @memberof NT\n         * @interface IClientPlayerUpdate\n         * @property {number|null} [curHp] ClientPlayerUpdate curHp\n         * @property {number|null} [maxHp] ClientPlayerUpdate maxHp\n         * @property {string|null} [location] ClientPlayerUpdate location\n         * @property {boolean|null} [sampo] ClientPlayerUpdate sampo\n         */\n\n        /**\n         * Constructs a new ClientPlayerUpdate.\n         * @memberof NT\n         * @classdesc Represents a ClientPlayerUpdate.\n         * @implements IClientPlayerUpdate\n         * @constructor\n         * @param {NT.IClientPlayerUpdate=} [properties] Properties to set\n         */\n        function ClientPlayerUpdate(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientPlayerUpdate curHp.\n         * @member {number|null|undefined} curHp\n         * @memberof NT.ClientPlayerUpdate\n         * @instance\n         */\n        ClientPlayerUpdate.prototype.curHp = null;\n\n        /**\n         * ClientPlayerUpdate maxHp.\n         * @member {number|null|undefined} maxHp\n         * @memberof NT.ClientPlayerUpdate\n         * @instance\n         */\n        ClientPlayerUpdate.prototype.maxHp = null;\n\n        /**\n         * ClientPlayerUpdate location.\n         * @member {string|null|undefined} location\n         * @memberof NT.ClientPlayerUpdate\n         * @instance\n         */\n        ClientPlayerUpdate.prototype.location = null;\n\n        /**\n         * ClientPlayerUpdate sampo.\n         * @member {boolean|null|undefined} sampo\n         * @memberof NT.ClientPlayerUpdate\n         * @instance\n         */\n        ClientPlayerUpdate.prototype.sampo = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ClientPlayerUpdate _curHp.\n         * @member {\"curHp\"|undefined} _curHp\n         * @memberof NT.ClientPlayerUpdate\n         * @instance\n         */\n        Object.defineProperty(ClientPlayerUpdate.prototype, \"_curHp\", {\n            get: $util.oneOfGetter($oneOfFields = [\"curHp\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ClientPlayerUpdate _maxHp.\n         * @member {\"maxHp\"|undefined} _maxHp\n         * @memberof NT.ClientPlayerUpdate\n         * @instance\n         */\n        Object.defineProperty(ClientPlayerUpdate.prototype, \"_maxHp\", {\n            get: $util.oneOfGetter($oneOfFields = [\"maxHp\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ClientPlayerUpdate _location.\n         * @member {\"location\"|undefined} _location\n         * @memberof NT.ClientPlayerUpdate\n         * @instance\n         */\n        Object.defineProperty(ClientPlayerUpdate.prototype, \"_location\", {\n            get: $util.oneOfGetter($oneOfFields = [\"location\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ClientPlayerUpdate _sampo.\n         * @member {\"sampo\"|undefined} _sampo\n         * @memberof NT.ClientPlayerUpdate\n         * @instance\n         */\n        Object.defineProperty(ClientPlayerUpdate.prototype, \"_sampo\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sampo\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ClientPlayerUpdate instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientPlayerUpdate\n         * @static\n         * @param {NT.IClientPlayerUpdate=} [properties] Properties to set\n         * @returns {NT.ClientPlayerUpdate} ClientPlayerUpdate instance\n         */\n        ClientPlayerUpdate.create = function create(properties) {\n            return new ClientPlayerUpdate(properties);\n        };\n\n        /**\n         * Encodes the specified ClientPlayerUpdate message. Does not implicitly {@link NT.ClientPlayerUpdate.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientPlayerUpdate\n         * @static\n         * @param {NT.IClientPlayerUpdate} message ClientPlayerUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerUpdate.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.curHp != null && Object.hasOwnProperty.call(message, \"curHp\"))\n                writer.uint32(/* id 1, wireType 5 =*/13).float(message.curHp);\n            if (message.maxHp != null && Object.hasOwnProperty.call(message, \"maxHp\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.maxHp);\n            if (message.location != null && Object.hasOwnProperty.call(message, \"location\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.location);\n            if (message.sampo != null && Object.hasOwnProperty.call(message, \"sampo\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).bool(message.sampo);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientPlayerUpdate message, length delimited. Does not implicitly {@link NT.ClientPlayerUpdate.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientPlayerUpdate\n         * @static\n         * @param {NT.IClientPlayerUpdate} message ClientPlayerUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientPlayerUpdate message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientPlayerUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientPlayerUpdate} ClientPlayerUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerUpdate.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerUpdate();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.curHp = reader.float();\n                        break;\n                    }\n                case 2: {\n                        message.maxHp = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.location = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.sampo = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientPlayerUpdate message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientPlayerUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientPlayerUpdate} ClientPlayerUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerUpdate.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientPlayerUpdate message.\n         * @function verify\n         * @memberof NT.ClientPlayerUpdate\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientPlayerUpdate.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.curHp != null && message.hasOwnProperty(\"curHp\")) {\n                properties._curHp = 1;\n                if (typeof message.curHp !== \"number\")\n                    return \"curHp: number expected\";\n            }\n            if (message.maxHp != null && message.hasOwnProperty(\"maxHp\")) {\n                properties._maxHp = 1;\n                if (typeof message.maxHp !== \"number\")\n                    return \"maxHp: number expected\";\n            }\n            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                properties._location = 1;\n                if (!$util.isString(message.location))\n                    return \"location: string expected\";\n            }\n            if (message.sampo != null && message.hasOwnProperty(\"sampo\")) {\n                properties._sampo = 1;\n                if (typeof message.sampo !== \"boolean\")\n                    return \"sampo: boolean expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientPlayerUpdate message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientPlayerUpdate\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientPlayerUpdate} ClientPlayerUpdate\n         */\n        ClientPlayerUpdate.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientPlayerUpdate)\n                return object;\n            let message = new $root.NT.ClientPlayerUpdate();\n            if (object.curHp != null)\n                message.curHp = Number(object.curHp);\n            if (object.maxHp != null)\n                message.maxHp = Number(object.maxHp);\n            if (object.location != null)\n                message.location = String(object.location);\n            if (object.sampo != null)\n                message.sampo = Boolean(object.sampo);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientPlayerUpdate message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientPlayerUpdate\n         * @static\n         * @param {NT.ClientPlayerUpdate} message ClientPlayerUpdate\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientPlayerUpdate.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.curHp != null && message.hasOwnProperty(\"curHp\")) {\n                object.curHp = options.json && !isFinite(message.curHp) ? String(message.curHp) : message.curHp;\n                if (options.oneofs)\n                    object._curHp = \"curHp\";\n            }\n            if (message.maxHp != null && message.hasOwnProperty(\"maxHp\")) {\n                object.maxHp = options.json && !isFinite(message.maxHp) ? String(message.maxHp) : message.maxHp;\n                if (options.oneofs)\n                    object._maxHp = \"maxHp\";\n            }\n            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                object.location = message.location;\n                if (options.oneofs)\n                    object._location = \"location\";\n            }\n            if (message.sampo != null && message.hasOwnProperty(\"sampo\")) {\n                object.sampo = message.sampo;\n                if (options.oneofs)\n                    object._sampo = \"sampo\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientPlayerUpdate to JSON.\n         * @function toJSON\n         * @memberof NT.ClientPlayerUpdate\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientPlayerUpdate.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientPlayerUpdate\n         * @function getTypeUrl\n         * @memberof NT.ClientPlayerUpdate\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientPlayerUpdate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientPlayerUpdate\";\n        };\n\n        return ClientPlayerUpdate;\n    })();\n\n    NT.ServerPlayerUpdate = (function() {\n\n        /**\n         * Properties of a ServerPlayerUpdate.\n         * @memberof NT\n         * @interface IServerPlayerUpdate\n         * @property {string|null} [userId] ServerPlayerUpdate userId\n         * @property {number|null} [curHp] ServerPlayerUpdate curHp\n         * @property {number|null} [maxHp] ServerPlayerUpdate maxHp\n         * @property {string|null} [location] ServerPlayerUpdate location\n         * @property {boolean|null} [sampo] ServerPlayerUpdate sampo\n         */\n\n        /**\n         * Constructs a new ServerPlayerUpdate.\n         * @memberof NT\n         * @classdesc Represents a ServerPlayerUpdate.\n         * @implements IServerPlayerUpdate\n         * @constructor\n         * @param {NT.IServerPlayerUpdate=} [properties] Properties to set\n         */\n        function ServerPlayerUpdate(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerPlayerUpdate userId.\n         * @member {string} userId\n         * @memberof NT.ServerPlayerUpdate\n         * @instance\n         */\n        ServerPlayerUpdate.prototype.userId = \"\";\n\n        /**\n         * ServerPlayerUpdate curHp.\n         * @member {number|null|undefined} curHp\n         * @memberof NT.ServerPlayerUpdate\n         * @instance\n         */\n        ServerPlayerUpdate.prototype.curHp = null;\n\n        /**\n         * ServerPlayerUpdate maxHp.\n         * @member {number|null|undefined} maxHp\n         * @memberof NT.ServerPlayerUpdate\n         * @instance\n         */\n        ServerPlayerUpdate.prototype.maxHp = null;\n\n        /**\n         * ServerPlayerUpdate location.\n         * @member {string|null|undefined} location\n         * @memberof NT.ServerPlayerUpdate\n         * @instance\n         */\n        ServerPlayerUpdate.prototype.location = null;\n\n        /**\n         * ServerPlayerUpdate sampo.\n         * @member {boolean|null|undefined} sampo\n         * @memberof NT.ServerPlayerUpdate\n         * @instance\n         */\n        ServerPlayerUpdate.prototype.sampo = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ServerPlayerUpdate _curHp.\n         * @member {\"curHp\"|undefined} _curHp\n         * @memberof NT.ServerPlayerUpdate\n         * @instance\n         */\n        Object.defineProperty(ServerPlayerUpdate.prototype, \"_curHp\", {\n            get: $util.oneOfGetter($oneOfFields = [\"curHp\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ServerPlayerUpdate _maxHp.\n         * @member {\"maxHp\"|undefined} _maxHp\n         * @memberof NT.ServerPlayerUpdate\n         * @instance\n         */\n        Object.defineProperty(ServerPlayerUpdate.prototype, \"_maxHp\", {\n            get: $util.oneOfGetter($oneOfFields = [\"maxHp\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ServerPlayerUpdate _location.\n         * @member {\"location\"|undefined} _location\n         * @memberof NT.ServerPlayerUpdate\n         * @instance\n         */\n        Object.defineProperty(ServerPlayerUpdate.prototype, \"_location\", {\n            get: $util.oneOfGetter($oneOfFields = [\"location\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ServerPlayerUpdate _sampo.\n         * @member {\"sampo\"|undefined} _sampo\n         * @memberof NT.ServerPlayerUpdate\n         * @instance\n         */\n        Object.defineProperty(ServerPlayerUpdate.prototype, \"_sampo\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sampo\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ServerPlayerUpdate instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerPlayerUpdate\n         * @static\n         * @param {NT.IServerPlayerUpdate=} [properties] Properties to set\n         * @returns {NT.ServerPlayerUpdate} ServerPlayerUpdate instance\n         */\n        ServerPlayerUpdate.create = function create(properties) {\n            return new ServerPlayerUpdate(properties);\n        };\n\n        /**\n         * Encodes the specified ServerPlayerUpdate message. Does not implicitly {@link NT.ServerPlayerUpdate.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerPlayerUpdate\n         * @static\n         * @param {NT.IServerPlayerUpdate} message ServerPlayerUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerUpdate.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.curHp != null && Object.hasOwnProperty.call(message, \"curHp\"))\n                writer.uint32(/* id 2, wireType 5 =*/21).float(message.curHp);\n            if (message.maxHp != null && Object.hasOwnProperty.call(message, \"maxHp\"))\n                writer.uint32(/* id 3, wireType 5 =*/29).float(message.maxHp);\n            if (message.location != null && Object.hasOwnProperty.call(message, \"location\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.location);\n            if (message.sampo != null && Object.hasOwnProperty.call(message, \"sampo\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.sampo);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerPlayerUpdate message, length delimited. Does not implicitly {@link NT.ServerPlayerUpdate.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerPlayerUpdate\n         * @static\n         * @param {NT.IServerPlayerUpdate} message ServerPlayerUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerPlayerUpdate message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerPlayerUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerPlayerUpdate} ServerPlayerUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerUpdate.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerUpdate();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.curHp = reader.float();\n                        break;\n                    }\n                case 3: {\n                        message.maxHp = reader.float();\n                        break;\n                    }\n                case 4: {\n                        message.location = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.sampo = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerPlayerUpdate message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerPlayerUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerPlayerUpdate} ServerPlayerUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerUpdate.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerPlayerUpdate message.\n         * @function verify\n         * @memberof NT.ServerPlayerUpdate\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerPlayerUpdate.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.curHp != null && message.hasOwnProperty(\"curHp\")) {\n                properties._curHp = 1;\n                if (typeof message.curHp !== \"number\")\n                    return \"curHp: number expected\";\n            }\n            if (message.maxHp != null && message.hasOwnProperty(\"maxHp\")) {\n                properties._maxHp = 1;\n                if (typeof message.maxHp !== \"number\")\n                    return \"maxHp: number expected\";\n            }\n            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                properties._location = 1;\n                if (!$util.isString(message.location))\n                    return \"location: string expected\";\n            }\n            if (message.sampo != null && message.hasOwnProperty(\"sampo\")) {\n                properties._sampo = 1;\n                if (typeof message.sampo !== \"boolean\")\n                    return \"sampo: boolean expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerPlayerUpdate message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerPlayerUpdate\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerPlayerUpdate} ServerPlayerUpdate\n         */\n        ServerPlayerUpdate.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerPlayerUpdate)\n                return object;\n            let message = new $root.NT.ServerPlayerUpdate();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.curHp != null)\n                message.curHp = Number(object.curHp);\n            if (object.maxHp != null)\n                message.maxHp = Number(object.maxHp);\n            if (object.location != null)\n                message.location = String(object.location);\n            if (object.sampo != null)\n                message.sampo = Boolean(object.sampo);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerPlayerUpdate message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerPlayerUpdate\n         * @static\n         * @param {NT.ServerPlayerUpdate} message ServerPlayerUpdate\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerPlayerUpdate.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.userId = \"\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.curHp != null && message.hasOwnProperty(\"curHp\")) {\n                object.curHp = options.json && !isFinite(message.curHp) ? String(message.curHp) : message.curHp;\n                if (options.oneofs)\n                    object._curHp = \"curHp\";\n            }\n            if (message.maxHp != null && message.hasOwnProperty(\"maxHp\")) {\n                object.maxHp = options.json && !isFinite(message.maxHp) ? String(message.maxHp) : message.maxHp;\n                if (options.oneofs)\n                    object._maxHp = \"maxHp\";\n            }\n            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                object.location = message.location;\n                if (options.oneofs)\n                    object._location = \"location\";\n            }\n            if (message.sampo != null && message.hasOwnProperty(\"sampo\")) {\n                object.sampo = message.sampo;\n                if (options.oneofs)\n                    object._sampo = \"sampo\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerPlayerUpdate to JSON.\n         * @function toJSON\n         * @memberof NT.ServerPlayerUpdate\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerPlayerUpdate.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerPlayerUpdate\n         * @function getTypeUrl\n         * @memberof NT.ServerPlayerUpdate\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerPlayerUpdate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerPlayerUpdate\";\n        };\n\n        return ServerPlayerUpdate;\n    })();\n\n    NT.ClientPlayerUpdateInventory = (function() {\n\n        /**\n         * Properties of a ClientPlayerUpdateInventory.\n         * @memberof NT\n         * @interface IClientPlayerUpdateInventory\n         * @property {Array.<NT.ClientPlayerUpdateInventory.IInventoryWand>|null} [wands] ClientPlayerUpdateInventory wands\n         * @property {Array.<NT.ClientPlayerUpdateInventory.IInventoryItem>|null} [items] ClientPlayerUpdateInventory items\n         * @property {Array.<NT.ClientPlayerUpdateInventory.IInventorySpell>|null} [spells] ClientPlayerUpdateInventory spells\n         */\n\n        /**\n         * Constructs a new ClientPlayerUpdateInventory.\n         * @memberof NT\n         * @classdesc Represents a ClientPlayerUpdateInventory.\n         * @implements IClientPlayerUpdateInventory\n         * @constructor\n         * @param {NT.IClientPlayerUpdateInventory=} [properties] Properties to set\n         */\n        function ClientPlayerUpdateInventory(properties) {\n            this.wands = [];\n            this.items = [];\n            this.spells = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientPlayerUpdateInventory wands.\n         * @member {Array.<NT.ClientPlayerUpdateInventory.IInventoryWand>} wands\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @instance\n         */\n        ClientPlayerUpdateInventory.prototype.wands = $util.emptyArray;\n\n        /**\n         * ClientPlayerUpdateInventory items.\n         * @member {Array.<NT.ClientPlayerUpdateInventory.IInventoryItem>} items\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @instance\n         */\n        ClientPlayerUpdateInventory.prototype.items = $util.emptyArray;\n\n        /**\n         * ClientPlayerUpdateInventory spells.\n         * @member {Array.<NT.ClientPlayerUpdateInventory.IInventorySpell>} spells\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @instance\n         */\n        ClientPlayerUpdateInventory.prototype.spells = $util.emptyArray;\n\n        /**\n         * Creates a new ClientPlayerUpdateInventory instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @static\n         * @param {NT.IClientPlayerUpdateInventory=} [properties] Properties to set\n         * @returns {NT.ClientPlayerUpdateInventory} ClientPlayerUpdateInventory instance\n         */\n        ClientPlayerUpdateInventory.create = function create(properties) {\n            return new ClientPlayerUpdateInventory(properties);\n        };\n\n        /**\n         * Encodes the specified ClientPlayerUpdateInventory message. Does not implicitly {@link NT.ClientPlayerUpdateInventory.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @static\n         * @param {NT.IClientPlayerUpdateInventory} message ClientPlayerUpdateInventory message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerUpdateInventory.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.wands != null && message.wands.length)\n                for (let i = 0; i < message.wands.length; ++i)\n                    $root.NT.ClientPlayerUpdateInventory.InventoryWand.encode(message.wands[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.items != null && message.items.length)\n                for (let i = 0; i < message.items.length; ++i)\n                    $root.NT.ClientPlayerUpdateInventory.InventoryItem.encode(message.items[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.spells != null && message.spells.length)\n                for (let i = 0; i < message.spells.length; ++i)\n                    $root.NT.ClientPlayerUpdateInventory.InventorySpell.encode(message.spells[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientPlayerUpdateInventory message, length delimited. Does not implicitly {@link NT.ClientPlayerUpdateInventory.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @static\n         * @param {NT.IClientPlayerUpdateInventory} message ClientPlayerUpdateInventory message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerUpdateInventory.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientPlayerUpdateInventory message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientPlayerUpdateInventory} ClientPlayerUpdateInventory\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerUpdateInventory.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerUpdateInventory();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.wands && message.wands.length))\n                            message.wands = [];\n                        message.wands.push($root.NT.ClientPlayerUpdateInventory.InventoryWand.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        if (!(message.items && message.items.length))\n                            message.items = [];\n                        message.items.push($root.NT.ClientPlayerUpdateInventory.InventoryItem.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 3: {\n                        if (!(message.spells && message.spells.length))\n                            message.spells = [];\n                        message.spells.push($root.NT.ClientPlayerUpdateInventory.InventorySpell.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientPlayerUpdateInventory message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientPlayerUpdateInventory} ClientPlayerUpdateInventory\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerUpdateInventory.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientPlayerUpdateInventory message.\n         * @function verify\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientPlayerUpdateInventory.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.wands != null && message.hasOwnProperty(\"wands\")) {\n                if (!Array.isArray(message.wands))\n                    return \"wands: array expected\";\n                for (let i = 0; i < message.wands.length; ++i) {\n                    let error = $root.NT.ClientPlayerUpdateInventory.InventoryWand.verify(message.wands[i]);\n                    if (error)\n                        return \"wands.\" + error;\n                }\n            }\n            if (message.items != null && message.hasOwnProperty(\"items\")) {\n                if (!Array.isArray(message.items))\n                    return \"items: array expected\";\n                for (let i = 0; i < message.items.length; ++i) {\n                    let error = $root.NT.ClientPlayerUpdateInventory.InventoryItem.verify(message.items[i]);\n                    if (error)\n                        return \"items.\" + error;\n                }\n            }\n            if (message.spells != null && message.hasOwnProperty(\"spells\")) {\n                if (!Array.isArray(message.spells))\n                    return \"spells: array expected\";\n                for (let i = 0; i < message.spells.length; ++i) {\n                    let error = $root.NT.ClientPlayerUpdateInventory.InventorySpell.verify(message.spells[i]);\n                    if (error)\n                        return \"spells.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientPlayerUpdateInventory message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientPlayerUpdateInventory} ClientPlayerUpdateInventory\n         */\n        ClientPlayerUpdateInventory.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientPlayerUpdateInventory)\n                return object;\n            let message = new $root.NT.ClientPlayerUpdateInventory();\n            if (object.wands) {\n                if (!Array.isArray(object.wands))\n                    throw TypeError(\".NT.ClientPlayerUpdateInventory.wands: array expected\");\n                message.wands = [];\n                for (let i = 0; i < object.wands.length; ++i) {\n                    if (typeof object.wands[i] !== \"object\")\n                        throw TypeError(\".NT.ClientPlayerUpdateInventory.wands: object expected\");\n                    message.wands[i] = $root.NT.ClientPlayerUpdateInventory.InventoryWand.fromObject(object.wands[i]);\n                }\n            }\n            if (object.items) {\n                if (!Array.isArray(object.items))\n                    throw TypeError(\".NT.ClientPlayerUpdateInventory.items: array expected\");\n                message.items = [];\n                for (let i = 0; i < object.items.length; ++i) {\n                    if (typeof object.items[i] !== \"object\")\n                        throw TypeError(\".NT.ClientPlayerUpdateInventory.items: object expected\");\n                    message.items[i] = $root.NT.ClientPlayerUpdateInventory.InventoryItem.fromObject(object.items[i]);\n                }\n            }\n            if (object.spells) {\n                if (!Array.isArray(object.spells))\n                    throw TypeError(\".NT.ClientPlayerUpdateInventory.spells: array expected\");\n                message.spells = [];\n                for (let i = 0; i < object.spells.length; ++i) {\n                    if (typeof object.spells[i] !== \"object\")\n                        throw TypeError(\".NT.ClientPlayerUpdateInventory.spells: object expected\");\n                    message.spells[i] = $root.NT.ClientPlayerUpdateInventory.InventorySpell.fromObject(object.spells[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientPlayerUpdateInventory message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @static\n         * @param {NT.ClientPlayerUpdateInventory} message ClientPlayerUpdateInventory\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientPlayerUpdateInventory.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.wands = [];\n                object.items = [];\n                object.spells = [];\n            }\n            if (message.wands && message.wands.length) {\n                object.wands = [];\n                for (let j = 0; j < message.wands.length; ++j)\n                    object.wands[j] = $root.NT.ClientPlayerUpdateInventory.InventoryWand.toObject(message.wands[j], options);\n            }\n            if (message.items && message.items.length) {\n                object.items = [];\n                for (let j = 0; j < message.items.length; ++j)\n                    object.items[j] = $root.NT.ClientPlayerUpdateInventory.InventoryItem.toObject(message.items[j], options);\n            }\n            if (message.spells && message.spells.length) {\n                object.spells = [];\n                for (let j = 0; j < message.spells.length; ++j)\n                    object.spells[j] = $root.NT.ClientPlayerUpdateInventory.InventorySpell.toObject(message.spells[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientPlayerUpdateInventory to JSON.\n         * @function toJSON\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientPlayerUpdateInventory.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientPlayerUpdateInventory\n         * @function getTypeUrl\n         * @memberof NT.ClientPlayerUpdateInventory\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientPlayerUpdateInventory.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientPlayerUpdateInventory\";\n        };\n\n        ClientPlayerUpdateInventory.InventoryWand = (function() {\n\n            /**\n             * Properties of an InventoryWand.\n             * @memberof NT.ClientPlayerUpdateInventory\n             * @interface IInventoryWand\n             * @property {number|null} [index] InventoryWand index\n             * @property {NT.IWand|null} [wand] InventoryWand wand\n             */\n\n            /**\n             * Constructs a new InventoryWand.\n             * @memberof NT.ClientPlayerUpdateInventory\n             * @classdesc Represents an InventoryWand.\n             * @implements IInventoryWand\n             * @constructor\n             * @param {NT.ClientPlayerUpdateInventory.IInventoryWand=} [properties] Properties to set\n             */\n            function InventoryWand(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * InventoryWand index.\n             * @member {number} index\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryWand\n             * @instance\n             */\n            InventoryWand.prototype.index = 0;\n\n            /**\n             * InventoryWand wand.\n             * @member {NT.IWand|null|undefined} wand\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryWand\n             * @instance\n             */\n            InventoryWand.prototype.wand = null;\n\n            /**\n             * Creates a new InventoryWand instance using the specified properties.\n             * @function create\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {NT.ClientPlayerUpdateInventory.IInventoryWand=} [properties] Properties to set\n             * @returns {NT.ClientPlayerUpdateInventory.InventoryWand} InventoryWand instance\n             */\n            InventoryWand.create = function create(properties) {\n                return new InventoryWand(properties);\n            };\n\n            /**\n             * Encodes the specified InventoryWand message. Does not implicitly {@link NT.ClientPlayerUpdateInventory.InventoryWand.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {NT.ClientPlayerUpdateInventory.IInventoryWand} message InventoryWand message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            InventoryWand.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);\n                if (message.wand != null && Object.hasOwnProperty.call(message, \"wand\"))\n                    $root.NT.Wand.encode(message.wand, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified InventoryWand message, length delimited. Does not implicitly {@link NT.ClientPlayerUpdateInventory.InventoryWand.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {NT.ClientPlayerUpdateInventory.IInventoryWand} message InventoryWand message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            InventoryWand.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an InventoryWand message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ClientPlayerUpdateInventory.InventoryWand} InventoryWand\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            InventoryWand.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerUpdateInventory.InventoryWand();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.index = reader.uint32();\n                            break;\n                        }\n                    case 2: {\n                            message.wand = $root.NT.Wand.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an InventoryWand message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ClientPlayerUpdateInventory.InventoryWand} InventoryWand\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            InventoryWand.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an InventoryWand message.\n             * @function verify\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            InventoryWand.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.index != null && message.hasOwnProperty(\"index\"))\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                if (message.wand != null && message.hasOwnProperty(\"wand\")) {\n                    let error = $root.NT.Wand.verify(message.wand);\n                    if (error)\n                        return \"wand.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an InventoryWand message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ClientPlayerUpdateInventory.InventoryWand} InventoryWand\n             */\n            InventoryWand.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ClientPlayerUpdateInventory.InventoryWand)\n                    return object;\n                let message = new $root.NT.ClientPlayerUpdateInventory.InventoryWand();\n                if (object.index != null)\n                    message.index = object.index >>> 0;\n                if (object.wand != null) {\n                    if (typeof object.wand !== \"object\")\n                        throw TypeError(\".NT.ClientPlayerUpdateInventory.InventoryWand.wand: object expected\");\n                    message.wand = $root.NT.Wand.fromObject(object.wand);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an InventoryWand message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {NT.ClientPlayerUpdateInventory.InventoryWand} message InventoryWand\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            InventoryWand.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.index = 0;\n                    object.wand = null;\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\"))\n                    object.index = message.index;\n                if (message.wand != null && message.hasOwnProperty(\"wand\"))\n                    object.wand = $root.NT.Wand.toObject(message.wand, options);\n                return object;\n            };\n\n            /**\n             * Converts this InventoryWand to JSON.\n             * @function toJSON\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryWand\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            InventoryWand.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for InventoryWand\n             * @function getTypeUrl\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            InventoryWand.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ClientPlayerUpdateInventory.InventoryWand\";\n            };\n\n            return InventoryWand;\n        })();\n\n        ClientPlayerUpdateInventory.InventoryItem = (function() {\n\n            /**\n             * Properties of an InventoryItem.\n             * @memberof NT.ClientPlayerUpdateInventory\n             * @interface IInventoryItem\n             * @property {number|null} [index] InventoryItem index\n             * @property {NT.IItem|null} [item] InventoryItem item\n             */\n\n            /**\n             * Constructs a new InventoryItem.\n             * @memberof NT.ClientPlayerUpdateInventory\n             * @classdesc Represents an InventoryItem.\n             * @implements IInventoryItem\n             * @constructor\n             * @param {NT.ClientPlayerUpdateInventory.IInventoryItem=} [properties] Properties to set\n             */\n            function InventoryItem(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * InventoryItem index.\n             * @member {number} index\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryItem\n             * @instance\n             */\n            InventoryItem.prototype.index = 0;\n\n            /**\n             * InventoryItem item.\n             * @member {NT.IItem|null|undefined} item\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryItem\n             * @instance\n             */\n            InventoryItem.prototype.item = null;\n\n            /**\n             * Creates a new InventoryItem instance using the specified properties.\n             * @function create\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {NT.ClientPlayerUpdateInventory.IInventoryItem=} [properties] Properties to set\n             * @returns {NT.ClientPlayerUpdateInventory.InventoryItem} InventoryItem instance\n             */\n            InventoryItem.create = function create(properties) {\n                return new InventoryItem(properties);\n            };\n\n            /**\n             * Encodes the specified InventoryItem message. Does not implicitly {@link NT.ClientPlayerUpdateInventory.InventoryItem.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {NT.ClientPlayerUpdateInventory.IInventoryItem} message InventoryItem message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            InventoryItem.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.index);\n                if (message.item != null && Object.hasOwnProperty.call(message, \"item\"))\n                    $root.NT.Item.encode(message.item, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified InventoryItem message, length delimited. Does not implicitly {@link NT.ClientPlayerUpdateInventory.InventoryItem.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {NT.ClientPlayerUpdateInventory.IInventoryItem} message InventoryItem message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            InventoryItem.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an InventoryItem message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ClientPlayerUpdateInventory.InventoryItem} InventoryItem\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            InventoryItem.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerUpdateInventory.InventoryItem();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 3: {\n                            message.index = reader.uint32();\n                            break;\n                        }\n                    case 4: {\n                            message.item = $root.NT.Item.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an InventoryItem message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ClientPlayerUpdateInventory.InventoryItem} InventoryItem\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            InventoryItem.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an InventoryItem message.\n             * @function verify\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            InventoryItem.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.index != null && message.hasOwnProperty(\"index\"))\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                if (message.item != null && message.hasOwnProperty(\"item\")) {\n                    let error = $root.NT.Item.verify(message.item);\n                    if (error)\n                        return \"item.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an InventoryItem message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ClientPlayerUpdateInventory.InventoryItem} InventoryItem\n             */\n            InventoryItem.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ClientPlayerUpdateInventory.InventoryItem)\n                    return object;\n                let message = new $root.NT.ClientPlayerUpdateInventory.InventoryItem();\n                if (object.index != null)\n                    message.index = object.index >>> 0;\n                if (object.item != null) {\n                    if (typeof object.item !== \"object\")\n                        throw TypeError(\".NT.ClientPlayerUpdateInventory.InventoryItem.item: object expected\");\n                    message.item = $root.NT.Item.fromObject(object.item);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an InventoryItem message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {NT.ClientPlayerUpdateInventory.InventoryItem} message InventoryItem\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            InventoryItem.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.index = 0;\n                    object.item = null;\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\"))\n                    object.index = message.index;\n                if (message.item != null && message.hasOwnProperty(\"item\"))\n                    object.item = $root.NT.Item.toObject(message.item, options);\n                return object;\n            };\n\n            /**\n             * Converts this InventoryItem to JSON.\n             * @function toJSON\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryItem\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            InventoryItem.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for InventoryItem\n             * @function getTypeUrl\n             * @memberof NT.ClientPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            InventoryItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ClientPlayerUpdateInventory.InventoryItem\";\n            };\n\n            return InventoryItem;\n        })();\n\n        ClientPlayerUpdateInventory.InventorySpell = (function() {\n\n            /**\n             * Properties of an InventorySpell.\n             * @memberof NT.ClientPlayerUpdateInventory\n             * @interface IInventorySpell\n             * @property {number|null} [index] InventorySpell index\n             * @property {NT.ISpell|null} [spell] InventorySpell spell\n             */\n\n            /**\n             * Constructs a new InventorySpell.\n             * @memberof NT.ClientPlayerUpdateInventory\n             * @classdesc Represents an InventorySpell.\n             * @implements IInventorySpell\n             * @constructor\n             * @param {NT.ClientPlayerUpdateInventory.IInventorySpell=} [properties] Properties to set\n             */\n            function InventorySpell(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * InventorySpell index.\n             * @member {number} index\n             * @memberof NT.ClientPlayerUpdateInventory.InventorySpell\n             * @instance\n             */\n            InventorySpell.prototype.index = 0;\n\n            /**\n             * InventorySpell spell.\n             * @member {NT.ISpell|null|undefined} spell\n             * @memberof NT.ClientPlayerUpdateInventory.InventorySpell\n             * @instance\n             */\n            InventorySpell.prototype.spell = null;\n\n            /**\n             * Creates a new InventorySpell instance using the specified properties.\n             * @function create\n             * @memberof NT.ClientPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {NT.ClientPlayerUpdateInventory.IInventorySpell=} [properties] Properties to set\n             * @returns {NT.ClientPlayerUpdateInventory.InventorySpell} InventorySpell instance\n             */\n            InventorySpell.create = function create(properties) {\n                return new InventorySpell(properties);\n            };\n\n            /**\n             * Encodes the specified InventorySpell message. Does not implicitly {@link NT.ClientPlayerUpdateInventory.InventorySpell.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ClientPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {NT.ClientPlayerUpdateInventory.IInventorySpell} message InventorySpell message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            InventorySpell.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);\n                if (message.spell != null && Object.hasOwnProperty.call(message, \"spell\"))\n                    $root.NT.Spell.encode(message.spell, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified InventorySpell message, length delimited. Does not implicitly {@link NT.ClientPlayerUpdateInventory.InventorySpell.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ClientPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {NT.ClientPlayerUpdateInventory.IInventorySpell} message InventorySpell message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            InventorySpell.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an InventorySpell message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ClientPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ClientPlayerUpdateInventory.InventorySpell} InventorySpell\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            InventorySpell.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerUpdateInventory.InventorySpell();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.index = reader.uint32();\n                            break;\n                        }\n                    case 2: {\n                            message.spell = $root.NT.Spell.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an InventorySpell message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ClientPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ClientPlayerUpdateInventory.InventorySpell} InventorySpell\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            InventorySpell.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an InventorySpell message.\n             * @function verify\n             * @memberof NT.ClientPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            InventorySpell.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.index != null && message.hasOwnProperty(\"index\"))\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                if (message.spell != null && message.hasOwnProperty(\"spell\")) {\n                    let error = $root.NT.Spell.verify(message.spell);\n                    if (error)\n                        return \"spell.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an InventorySpell message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ClientPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ClientPlayerUpdateInventory.InventorySpell} InventorySpell\n             */\n            InventorySpell.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ClientPlayerUpdateInventory.InventorySpell)\n                    return object;\n                let message = new $root.NT.ClientPlayerUpdateInventory.InventorySpell();\n                if (object.index != null)\n                    message.index = object.index >>> 0;\n                if (object.spell != null) {\n                    if (typeof object.spell !== \"object\")\n                        throw TypeError(\".NT.ClientPlayerUpdateInventory.InventorySpell.spell: object expected\");\n                    message.spell = $root.NT.Spell.fromObject(object.spell);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an InventorySpell message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ClientPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {NT.ClientPlayerUpdateInventory.InventorySpell} message InventorySpell\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            InventorySpell.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.index = 0;\n                    object.spell = null;\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\"))\n                    object.index = message.index;\n                if (message.spell != null && message.hasOwnProperty(\"spell\"))\n                    object.spell = $root.NT.Spell.toObject(message.spell, options);\n                return object;\n            };\n\n            /**\n             * Converts this InventorySpell to JSON.\n             * @function toJSON\n             * @memberof NT.ClientPlayerUpdateInventory.InventorySpell\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            InventorySpell.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for InventorySpell\n             * @function getTypeUrl\n             * @memberof NT.ClientPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            InventorySpell.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ClientPlayerUpdateInventory.InventorySpell\";\n            };\n\n            return InventorySpell;\n        })();\n\n        return ClientPlayerUpdateInventory;\n    })();\n\n    NT.ServerPlayerUpdateInventory = (function() {\n\n        /**\n         * Properties of a ServerPlayerUpdateInventory.\n         * @memberof NT\n         * @interface IServerPlayerUpdateInventory\n         * @property {string|null} [userId] ServerPlayerUpdateInventory userId\n         * @property {Array.<NT.ServerPlayerUpdateInventory.IInventoryWand>|null} [wands] ServerPlayerUpdateInventory wands\n         * @property {Array.<NT.ServerPlayerUpdateInventory.IInventoryItem>|null} [items] ServerPlayerUpdateInventory items\n         * @property {Array.<NT.ServerPlayerUpdateInventory.IInventorySpell>|null} [spells] ServerPlayerUpdateInventory spells\n         */\n\n        /**\n         * Constructs a new ServerPlayerUpdateInventory.\n         * @memberof NT\n         * @classdesc Represents a ServerPlayerUpdateInventory.\n         * @implements IServerPlayerUpdateInventory\n         * @constructor\n         * @param {NT.IServerPlayerUpdateInventory=} [properties] Properties to set\n         */\n        function ServerPlayerUpdateInventory(properties) {\n            this.wands = [];\n            this.items = [];\n            this.spells = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerPlayerUpdateInventory userId.\n         * @member {string} userId\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @instance\n         */\n        ServerPlayerUpdateInventory.prototype.userId = \"\";\n\n        /**\n         * ServerPlayerUpdateInventory wands.\n         * @member {Array.<NT.ServerPlayerUpdateInventory.IInventoryWand>} wands\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @instance\n         */\n        ServerPlayerUpdateInventory.prototype.wands = $util.emptyArray;\n\n        /**\n         * ServerPlayerUpdateInventory items.\n         * @member {Array.<NT.ServerPlayerUpdateInventory.IInventoryItem>} items\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @instance\n         */\n        ServerPlayerUpdateInventory.prototype.items = $util.emptyArray;\n\n        /**\n         * ServerPlayerUpdateInventory spells.\n         * @member {Array.<NT.ServerPlayerUpdateInventory.IInventorySpell>} spells\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @instance\n         */\n        ServerPlayerUpdateInventory.prototype.spells = $util.emptyArray;\n\n        /**\n         * Creates a new ServerPlayerUpdateInventory instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @static\n         * @param {NT.IServerPlayerUpdateInventory=} [properties] Properties to set\n         * @returns {NT.ServerPlayerUpdateInventory} ServerPlayerUpdateInventory instance\n         */\n        ServerPlayerUpdateInventory.create = function create(properties) {\n            return new ServerPlayerUpdateInventory(properties);\n        };\n\n        /**\n         * Encodes the specified ServerPlayerUpdateInventory message. Does not implicitly {@link NT.ServerPlayerUpdateInventory.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @static\n         * @param {NT.IServerPlayerUpdateInventory} message ServerPlayerUpdateInventory message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerUpdateInventory.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.wands != null && message.wands.length)\n                for (let i = 0; i < message.wands.length; ++i)\n                    $root.NT.ServerPlayerUpdateInventory.InventoryWand.encode(message.wands[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.items != null && message.items.length)\n                for (let i = 0; i < message.items.length; ++i)\n                    $root.NT.ServerPlayerUpdateInventory.InventoryItem.encode(message.items[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.spells != null && message.spells.length)\n                for (let i = 0; i < message.spells.length; ++i)\n                    $root.NT.ServerPlayerUpdateInventory.InventorySpell.encode(message.spells[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerPlayerUpdateInventory message, length delimited. Does not implicitly {@link NT.ServerPlayerUpdateInventory.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @static\n         * @param {NT.IServerPlayerUpdateInventory} message ServerPlayerUpdateInventory message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerUpdateInventory.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerPlayerUpdateInventory message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerPlayerUpdateInventory} ServerPlayerUpdateInventory\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerUpdateInventory.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerUpdateInventory();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        if (!(message.wands && message.wands.length))\n                            message.wands = [];\n                        message.wands.push($root.NT.ServerPlayerUpdateInventory.InventoryWand.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 3: {\n                        if (!(message.items && message.items.length))\n                            message.items = [];\n                        message.items.push($root.NT.ServerPlayerUpdateInventory.InventoryItem.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.spells && message.spells.length))\n                            message.spells = [];\n                        message.spells.push($root.NT.ServerPlayerUpdateInventory.InventorySpell.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerPlayerUpdateInventory message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerPlayerUpdateInventory} ServerPlayerUpdateInventory\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerUpdateInventory.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerPlayerUpdateInventory message.\n         * @function verify\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerPlayerUpdateInventory.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.wands != null && message.hasOwnProperty(\"wands\")) {\n                if (!Array.isArray(message.wands))\n                    return \"wands: array expected\";\n                for (let i = 0; i < message.wands.length; ++i) {\n                    let error = $root.NT.ServerPlayerUpdateInventory.InventoryWand.verify(message.wands[i]);\n                    if (error)\n                        return \"wands.\" + error;\n                }\n            }\n            if (message.items != null && message.hasOwnProperty(\"items\")) {\n                if (!Array.isArray(message.items))\n                    return \"items: array expected\";\n                for (let i = 0; i < message.items.length; ++i) {\n                    let error = $root.NT.ServerPlayerUpdateInventory.InventoryItem.verify(message.items[i]);\n                    if (error)\n                        return \"items.\" + error;\n                }\n            }\n            if (message.spells != null && message.hasOwnProperty(\"spells\")) {\n                if (!Array.isArray(message.spells))\n                    return \"spells: array expected\";\n                for (let i = 0; i < message.spells.length; ++i) {\n                    let error = $root.NT.ServerPlayerUpdateInventory.InventorySpell.verify(message.spells[i]);\n                    if (error)\n                        return \"spells.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerPlayerUpdateInventory message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerPlayerUpdateInventory} ServerPlayerUpdateInventory\n         */\n        ServerPlayerUpdateInventory.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerPlayerUpdateInventory)\n                return object;\n            let message = new $root.NT.ServerPlayerUpdateInventory();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.wands) {\n                if (!Array.isArray(object.wands))\n                    throw TypeError(\".NT.ServerPlayerUpdateInventory.wands: array expected\");\n                message.wands = [];\n                for (let i = 0; i < object.wands.length; ++i) {\n                    if (typeof object.wands[i] !== \"object\")\n                        throw TypeError(\".NT.ServerPlayerUpdateInventory.wands: object expected\");\n                    message.wands[i] = $root.NT.ServerPlayerUpdateInventory.InventoryWand.fromObject(object.wands[i]);\n                }\n            }\n            if (object.items) {\n                if (!Array.isArray(object.items))\n                    throw TypeError(\".NT.ServerPlayerUpdateInventory.items: array expected\");\n                message.items = [];\n                for (let i = 0; i < object.items.length; ++i) {\n                    if (typeof object.items[i] !== \"object\")\n                        throw TypeError(\".NT.ServerPlayerUpdateInventory.items: object expected\");\n                    message.items[i] = $root.NT.ServerPlayerUpdateInventory.InventoryItem.fromObject(object.items[i]);\n                }\n            }\n            if (object.spells) {\n                if (!Array.isArray(object.spells))\n                    throw TypeError(\".NT.ServerPlayerUpdateInventory.spells: array expected\");\n                message.spells = [];\n                for (let i = 0; i < object.spells.length; ++i) {\n                    if (typeof object.spells[i] !== \"object\")\n                        throw TypeError(\".NT.ServerPlayerUpdateInventory.spells: object expected\");\n                    message.spells[i] = $root.NT.ServerPlayerUpdateInventory.InventorySpell.fromObject(object.spells[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerPlayerUpdateInventory message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @static\n         * @param {NT.ServerPlayerUpdateInventory} message ServerPlayerUpdateInventory\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerPlayerUpdateInventory.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.wands = [];\n                object.items = [];\n                object.spells = [];\n            }\n            if (options.defaults)\n                object.userId = \"\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.wands && message.wands.length) {\n                object.wands = [];\n                for (let j = 0; j < message.wands.length; ++j)\n                    object.wands[j] = $root.NT.ServerPlayerUpdateInventory.InventoryWand.toObject(message.wands[j], options);\n            }\n            if (message.items && message.items.length) {\n                object.items = [];\n                for (let j = 0; j < message.items.length; ++j)\n                    object.items[j] = $root.NT.ServerPlayerUpdateInventory.InventoryItem.toObject(message.items[j], options);\n            }\n            if (message.spells && message.spells.length) {\n                object.spells = [];\n                for (let j = 0; j < message.spells.length; ++j)\n                    object.spells[j] = $root.NT.ServerPlayerUpdateInventory.InventorySpell.toObject(message.spells[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerPlayerUpdateInventory to JSON.\n         * @function toJSON\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerPlayerUpdateInventory.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerPlayerUpdateInventory\n         * @function getTypeUrl\n         * @memberof NT.ServerPlayerUpdateInventory\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerPlayerUpdateInventory.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerPlayerUpdateInventory\";\n        };\n\n        ServerPlayerUpdateInventory.InventoryWand = (function() {\n\n            /**\n             * Properties of an InventoryWand.\n             * @memberof NT.ServerPlayerUpdateInventory\n             * @interface IInventoryWand\n             * @property {number|null} [index] InventoryWand index\n             * @property {NT.IWand|null} [wand] InventoryWand wand\n             */\n\n            /**\n             * Constructs a new InventoryWand.\n             * @memberof NT.ServerPlayerUpdateInventory\n             * @classdesc Represents an InventoryWand.\n             * @implements IInventoryWand\n             * @constructor\n             * @param {NT.ServerPlayerUpdateInventory.IInventoryWand=} [properties] Properties to set\n             */\n            function InventoryWand(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * InventoryWand index.\n             * @member {number} index\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryWand\n             * @instance\n             */\n            InventoryWand.prototype.index = 0;\n\n            /**\n             * InventoryWand wand.\n             * @member {NT.IWand|null|undefined} wand\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryWand\n             * @instance\n             */\n            InventoryWand.prototype.wand = null;\n\n            /**\n             * Creates a new InventoryWand instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {NT.ServerPlayerUpdateInventory.IInventoryWand=} [properties] Properties to set\n             * @returns {NT.ServerPlayerUpdateInventory.InventoryWand} InventoryWand instance\n             */\n            InventoryWand.create = function create(properties) {\n                return new InventoryWand(properties);\n            };\n\n            /**\n             * Encodes the specified InventoryWand message. Does not implicitly {@link NT.ServerPlayerUpdateInventory.InventoryWand.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {NT.ServerPlayerUpdateInventory.IInventoryWand} message InventoryWand message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            InventoryWand.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);\n                if (message.wand != null && Object.hasOwnProperty.call(message, \"wand\"))\n                    $root.NT.Wand.encode(message.wand, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified InventoryWand message, length delimited. Does not implicitly {@link NT.ServerPlayerUpdateInventory.InventoryWand.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {NT.ServerPlayerUpdateInventory.IInventoryWand} message InventoryWand message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            InventoryWand.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an InventoryWand message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerPlayerUpdateInventory.InventoryWand} InventoryWand\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            InventoryWand.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerUpdateInventory.InventoryWand();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.index = reader.uint32();\n                            break;\n                        }\n                    case 2: {\n                            message.wand = $root.NT.Wand.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an InventoryWand message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerPlayerUpdateInventory.InventoryWand} InventoryWand\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            InventoryWand.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an InventoryWand message.\n             * @function verify\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            InventoryWand.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.index != null && message.hasOwnProperty(\"index\"))\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                if (message.wand != null && message.hasOwnProperty(\"wand\")) {\n                    let error = $root.NT.Wand.verify(message.wand);\n                    if (error)\n                        return \"wand.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an InventoryWand message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerPlayerUpdateInventory.InventoryWand} InventoryWand\n             */\n            InventoryWand.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerPlayerUpdateInventory.InventoryWand)\n                    return object;\n                let message = new $root.NT.ServerPlayerUpdateInventory.InventoryWand();\n                if (object.index != null)\n                    message.index = object.index >>> 0;\n                if (object.wand != null) {\n                    if (typeof object.wand !== \"object\")\n                        throw TypeError(\".NT.ServerPlayerUpdateInventory.InventoryWand.wand: object expected\");\n                    message.wand = $root.NT.Wand.fromObject(object.wand);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an InventoryWand message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {NT.ServerPlayerUpdateInventory.InventoryWand} message InventoryWand\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            InventoryWand.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.index = 0;\n                    object.wand = null;\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\"))\n                    object.index = message.index;\n                if (message.wand != null && message.hasOwnProperty(\"wand\"))\n                    object.wand = $root.NT.Wand.toObject(message.wand, options);\n                return object;\n            };\n\n            /**\n             * Converts this InventoryWand to JSON.\n             * @function toJSON\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryWand\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            InventoryWand.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for InventoryWand\n             * @function getTypeUrl\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryWand\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            InventoryWand.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerPlayerUpdateInventory.InventoryWand\";\n            };\n\n            return InventoryWand;\n        })();\n\n        ServerPlayerUpdateInventory.InventoryItem = (function() {\n\n            /**\n             * Properties of an InventoryItem.\n             * @memberof NT.ServerPlayerUpdateInventory\n             * @interface IInventoryItem\n             * @property {number|null} [index] InventoryItem index\n             * @property {NT.IItem|null} [item] InventoryItem item\n             */\n\n            /**\n             * Constructs a new InventoryItem.\n             * @memberof NT.ServerPlayerUpdateInventory\n             * @classdesc Represents an InventoryItem.\n             * @implements IInventoryItem\n             * @constructor\n             * @param {NT.ServerPlayerUpdateInventory.IInventoryItem=} [properties] Properties to set\n             */\n            function InventoryItem(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * InventoryItem index.\n             * @member {number} index\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryItem\n             * @instance\n             */\n            InventoryItem.prototype.index = 0;\n\n            /**\n             * InventoryItem item.\n             * @member {NT.IItem|null|undefined} item\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryItem\n             * @instance\n             */\n            InventoryItem.prototype.item = null;\n\n            /**\n             * Creates a new InventoryItem instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {NT.ServerPlayerUpdateInventory.IInventoryItem=} [properties] Properties to set\n             * @returns {NT.ServerPlayerUpdateInventory.InventoryItem} InventoryItem instance\n             */\n            InventoryItem.create = function create(properties) {\n                return new InventoryItem(properties);\n            };\n\n            /**\n             * Encodes the specified InventoryItem message. Does not implicitly {@link NT.ServerPlayerUpdateInventory.InventoryItem.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {NT.ServerPlayerUpdateInventory.IInventoryItem} message InventoryItem message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            InventoryItem.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);\n                if (message.item != null && Object.hasOwnProperty.call(message, \"item\"))\n                    $root.NT.Item.encode(message.item, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified InventoryItem message, length delimited. Does not implicitly {@link NT.ServerPlayerUpdateInventory.InventoryItem.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {NT.ServerPlayerUpdateInventory.IInventoryItem} message InventoryItem message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            InventoryItem.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an InventoryItem message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerPlayerUpdateInventory.InventoryItem} InventoryItem\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            InventoryItem.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerUpdateInventory.InventoryItem();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.index = reader.uint32();\n                            break;\n                        }\n                    case 2: {\n                            message.item = $root.NT.Item.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an InventoryItem message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerPlayerUpdateInventory.InventoryItem} InventoryItem\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            InventoryItem.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an InventoryItem message.\n             * @function verify\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            InventoryItem.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.index != null && message.hasOwnProperty(\"index\"))\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                if (message.item != null && message.hasOwnProperty(\"item\")) {\n                    let error = $root.NT.Item.verify(message.item);\n                    if (error)\n                        return \"item.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an InventoryItem message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerPlayerUpdateInventory.InventoryItem} InventoryItem\n             */\n            InventoryItem.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerPlayerUpdateInventory.InventoryItem)\n                    return object;\n                let message = new $root.NT.ServerPlayerUpdateInventory.InventoryItem();\n                if (object.index != null)\n                    message.index = object.index >>> 0;\n                if (object.item != null) {\n                    if (typeof object.item !== \"object\")\n                        throw TypeError(\".NT.ServerPlayerUpdateInventory.InventoryItem.item: object expected\");\n                    message.item = $root.NT.Item.fromObject(object.item);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an InventoryItem message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {NT.ServerPlayerUpdateInventory.InventoryItem} message InventoryItem\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            InventoryItem.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.index = 0;\n                    object.item = null;\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\"))\n                    object.index = message.index;\n                if (message.item != null && message.hasOwnProperty(\"item\"))\n                    object.item = $root.NT.Item.toObject(message.item, options);\n                return object;\n            };\n\n            /**\n             * Converts this InventoryItem to JSON.\n             * @function toJSON\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryItem\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            InventoryItem.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for InventoryItem\n             * @function getTypeUrl\n             * @memberof NT.ServerPlayerUpdateInventory.InventoryItem\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            InventoryItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerPlayerUpdateInventory.InventoryItem\";\n            };\n\n            return InventoryItem;\n        })();\n\n        ServerPlayerUpdateInventory.InventorySpell = (function() {\n\n            /**\n             * Properties of an InventorySpell.\n             * @memberof NT.ServerPlayerUpdateInventory\n             * @interface IInventorySpell\n             * @property {number|null} [index] InventorySpell index\n             * @property {NT.ISpell|null} [spell] InventorySpell spell\n             */\n\n            /**\n             * Constructs a new InventorySpell.\n             * @memberof NT.ServerPlayerUpdateInventory\n             * @classdesc Represents an InventorySpell.\n             * @implements IInventorySpell\n             * @constructor\n             * @param {NT.ServerPlayerUpdateInventory.IInventorySpell=} [properties] Properties to set\n             */\n            function InventorySpell(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * InventorySpell index.\n             * @member {number} index\n             * @memberof NT.ServerPlayerUpdateInventory.InventorySpell\n             * @instance\n             */\n            InventorySpell.prototype.index = 0;\n\n            /**\n             * InventorySpell spell.\n             * @member {NT.ISpell|null|undefined} spell\n             * @memberof NT.ServerPlayerUpdateInventory.InventorySpell\n             * @instance\n             */\n            InventorySpell.prototype.spell = null;\n\n            /**\n             * Creates a new InventorySpell instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {NT.ServerPlayerUpdateInventory.IInventorySpell=} [properties] Properties to set\n             * @returns {NT.ServerPlayerUpdateInventory.InventorySpell} InventorySpell instance\n             */\n            InventorySpell.create = function create(properties) {\n                return new InventorySpell(properties);\n            };\n\n            /**\n             * Encodes the specified InventorySpell message. Does not implicitly {@link NT.ServerPlayerUpdateInventory.InventorySpell.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {NT.ServerPlayerUpdateInventory.IInventorySpell} message InventorySpell message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            InventorySpell.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.index);\n                if (message.spell != null && Object.hasOwnProperty.call(message, \"spell\"))\n                    $root.NT.Spell.encode(message.spell, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified InventorySpell message, length delimited. Does not implicitly {@link NT.ServerPlayerUpdateInventory.InventorySpell.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {NT.ServerPlayerUpdateInventory.IInventorySpell} message InventorySpell message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            InventorySpell.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an InventorySpell message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerPlayerUpdateInventory.InventorySpell} InventorySpell\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            InventorySpell.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerUpdateInventory.InventorySpell();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.index = reader.uint32();\n                            break;\n                        }\n                    case 2: {\n                            message.spell = $root.NT.Spell.decode(reader, reader.uint32());\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an InventorySpell message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerPlayerUpdateInventory.InventorySpell} InventorySpell\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            InventorySpell.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an InventorySpell message.\n             * @function verify\n             * @memberof NT.ServerPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            InventorySpell.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.index != null && message.hasOwnProperty(\"index\"))\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                if (message.spell != null && message.hasOwnProperty(\"spell\")) {\n                    let error = $root.NT.Spell.verify(message.spell);\n                    if (error)\n                        return \"spell.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates an InventorySpell message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerPlayerUpdateInventory.InventorySpell} InventorySpell\n             */\n            InventorySpell.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerPlayerUpdateInventory.InventorySpell)\n                    return object;\n                let message = new $root.NT.ServerPlayerUpdateInventory.InventorySpell();\n                if (object.index != null)\n                    message.index = object.index >>> 0;\n                if (object.spell != null) {\n                    if (typeof object.spell !== \"object\")\n                        throw TypeError(\".NT.ServerPlayerUpdateInventory.InventorySpell.spell: object expected\");\n                    message.spell = $root.NT.Spell.fromObject(object.spell);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an InventorySpell message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {NT.ServerPlayerUpdateInventory.InventorySpell} message InventorySpell\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            InventorySpell.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.index = 0;\n                    object.spell = null;\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\"))\n                    object.index = message.index;\n                if (message.spell != null && message.hasOwnProperty(\"spell\"))\n                    object.spell = $root.NT.Spell.toObject(message.spell, options);\n                return object;\n            };\n\n            /**\n             * Converts this InventorySpell to JSON.\n             * @function toJSON\n             * @memberof NT.ServerPlayerUpdateInventory.InventorySpell\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            InventorySpell.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for InventorySpell\n             * @function getTypeUrl\n             * @memberof NT.ServerPlayerUpdateInventory.InventorySpell\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            InventorySpell.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerPlayerUpdateInventory.InventorySpell\";\n            };\n\n            return InventorySpell;\n        })();\n\n        return ServerPlayerUpdateInventory;\n    })();\n\n    NT.ClientHostItemBank = (function() {\n\n        /**\n         * Properties of a ClientHostItemBank.\n         * @memberof NT\n         * @interface IClientHostItemBank\n         * @property {Array.<NT.IWand>|null} [wands] ClientHostItemBank wands\n         * @property {Array.<NT.ISpell>|null} [spells] ClientHostItemBank spells\n         * @property {Array.<NT.IItem>|null} [items] ClientHostItemBank items\n         * @property {number|null} [gold] ClientHostItemBank gold\n         * @property {Array.<NT.IEntityItem>|null} [objects] ClientHostItemBank objects\n         */\n\n        /**\n         * Constructs a new ClientHostItemBank.\n         * @memberof NT\n         * @classdesc Represents a ClientHostItemBank.\n         * @implements IClientHostItemBank\n         * @constructor\n         * @param {NT.IClientHostItemBank=} [properties] Properties to set\n         */\n        function ClientHostItemBank(properties) {\n            this.wands = [];\n            this.spells = [];\n            this.items = [];\n            this.objects = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientHostItemBank wands.\n         * @member {Array.<NT.IWand>} wands\n         * @memberof NT.ClientHostItemBank\n         * @instance\n         */\n        ClientHostItemBank.prototype.wands = $util.emptyArray;\n\n        /**\n         * ClientHostItemBank spells.\n         * @member {Array.<NT.ISpell>} spells\n         * @memberof NT.ClientHostItemBank\n         * @instance\n         */\n        ClientHostItemBank.prototype.spells = $util.emptyArray;\n\n        /**\n         * ClientHostItemBank items.\n         * @member {Array.<NT.IItem>} items\n         * @memberof NT.ClientHostItemBank\n         * @instance\n         */\n        ClientHostItemBank.prototype.items = $util.emptyArray;\n\n        /**\n         * ClientHostItemBank gold.\n         * @member {number} gold\n         * @memberof NT.ClientHostItemBank\n         * @instance\n         */\n        ClientHostItemBank.prototype.gold = 0;\n\n        /**\n         * ClientHostItemBank objects.\n         * @member {Array.<NT.IEntityItem>} objects\n         * @memberof NT.ClientHostItemBank\n         * @instance\n         */\n        ClientHostItemBank.prototype.objects = $util.emptyArray;\n\n        /**\n         * Creates a new ClientHostItemBank instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientHostItemBank\n         * @static\n         * @param {NT.IClientHostItemBank=} [properties] Properties to set\n         * @returns {NT.ClientHostItemBank} ClientHostItemBank instance\n         */\n        ClientHostItemBank.create = function create(properties) {\n            return new ClientHostItemBank(properties);\n        };\n\n        /**\n         * Encodes the specified ClientHostItemBank message. Does not implicitly {@link NT.ClientHostItemBank.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientHostItemBank\n         * @static\n         * @param {NT.IClientHostItemBank} message ClientHostItemBank message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientHostItemBank.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.wands != null && message.wands.length)\n                for (let i = 0; i < message.wands.length; ++i)\n                    $root.NT.Wand.encode(message.wands[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.spells != null && message.spells.length)\n                for (let i = 0; i < message.spells.length; ++i)\n                    $root.NT.Spell.encode(message.spells[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.items != null && message.items.length)\n                for (let i = 0; i < message.items.length; ++i)\n                    $root.NT.Item.encode(message.items[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.gold != null && Object.hasOwnProperty.call(message, \"gold\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gold);\n            if (message.objects != null && message.objects.length)\n                for (let i = 0; i < message.objects.length; ++i)\n                    $root.NT.EntityItem.encode(message.objects[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientHostItemBank message, length delimited. Does not implicitly {@link NT.ClientHostItemBank.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientHostItemBank\n         * @static\n         * @param {NT.IClientHostItemBank} message ClientHostItemBank message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientHostItemBank.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientHostItemBank message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientHostItemBank\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientHostItemBank} ClientHostItemBank\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientHostItemBank.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientHostItemBank();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.wands && message.wands.length))\n                            message.wands = [];\n                        message.wands.push($root.NT.Wand.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        if (!(message.spells && message.spells.length))\n                            message.spells = [];\n                        message.spells.push($root.NT.Spell.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 3: {\n                        if (!(message.items && message.items.length))\n                            message.items = [];\n                        message.items.push($root.NT.Item.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        message.gold = reader.uint32();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.objects && message.objects.length))\n                            message.objects = [];\n                        message.objects.push($root.NT.EntityItem.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientHostItemBank message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientHostItemBank\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientHostItemBank} ClientHostItemBank\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientHostItemBank.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientHostItemBank message.\n         * @function verify\n         * @memberof NT.ClientHostItemBank\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientHostItemBank.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.wands != null && message.hasOwnProperty(\"wands\")) {\n                if (!Array.isArray(message.wands))\n                    return \"wands: array expected\";\n                for (let i = 0; i < message.wands.length; ++i) {\n                    let error = $root.NT.Wand.verify(message.wands[i]);\n                    if (error)\n                        return \"wands.\" + error;\n                }\n            }\n            if (message.spells != null && message.hasOwnProperty(\"spells\")) {\n                if (!Array.isArray(message.spells))\n                    return \"spells: array expected\";\n                for (let i = 0; i < message.spells.length; ++i) {\n                    let error = $root.NT.Spell.verify(message.spells[i]);\n                    if (error)\n                        return \"spells.\" + error;\n                }\n            }\n            if (message.items != null && message.hasOwnProperty(\"items\")) {\n                if (!Array.isArray(message.items))\n                    return \"items: array expected\";\n                for (let i = 0; i < message.items.length; ++i) {\n                    let error = $root.NT.Item.verify(message.items[i]);\n                    if (error)\n                        return \"items.\" + error;\n                }\n            }\n            if (message.gold != null && message.hasOwnProperty(\"gold\"))\n                if (!$util.isInteger(message.gold))\n                    return \"gold: integer expected\";\n            if (message.objects != null && message.hasOwnProperty(\"objects\")) {\n                if (!Array.isArray(message.objects))\n                    return \"objects: array expected\";\n                for (let i = 0; i < message.objects.length; ++i) {\n                    let error = $root.NT.EntityItem.verify(message.objects[i]);\n                    if (error)\n                        return \"objects.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientHostItemBank message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientHostItemBank\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientHostItemBank} ClientHostItemBank\n         */\n        ClientHostItemBank.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientHostItemBank)\n                return object;\n            let message = new $root.NT.ClientHostItemBank();\n            if (object.wands) {\n                if (!Array.isArray(object.wands))\n                    throw TypeError(\".NT.ClientHostItemBank.wands: array expected\");\n                message.wands = [];\n                for (let i = 0; i < object.wands.length; ++i) {\n                    if (typeof object.wands[i] !== \"object\")\n                        throw TypeError(\".NT.ClientHostItemBank.wands: object expected\");\n                    message.wands[i] = $root.NT.Wand.fromObject(object.wands[i]);\n                }\n            }\n            if (object.spells) {\n                if (!Array.isArray(object.spells))\n                    throw TypeError(\".NT.ClientHostItemBank.spells: array expected\");\n                message.spells = [];\n                for (let i = 0; i < object.spells.length; ++i) {\n                    if (typeof object.spells[i] !== \"object\")\n                        throw TypeError(\".NT.ClientHostItemBank.spells: object expected\");\n                    message.spells[i] = $root.NT.Spell.fromObject(object.spells[i]);\n                }\n            }\n            if (object.items) {\n                if (!Array.isArray(object.items))\n                    throw TypeError(\".NT.ClientHostItemBank.items: array expected\");\n                message.items = [];\n                for (let i = 0; i < object.items.length; ++i) {\n                    if (typeof object.items[i] !== \"object\")\n                        throw TypeError(\".NT.ClientHostItemBank.items: object expected\");\n                    message.items[i] = $root.NT.Item.fromObject(object.items[i]);\n                }\n            }\n            if (object.gold != null)\n                message.gold = object.gold >>> 0;\n            if (object.objects) {\n                if (!Array.isArray(object.objects))\n                    throw TypeError(\".NT.ClientHostItemBank.objects: array expected\");\n                message.objects = [];\n                for (let i = 0; i < object.objects.length; ++i) {\n                    if (typeof object.objects[i] !== \"object\")\n                        throw TypeError(\".NT.ClientHostItemBank.objects: object expected\");\n                    message.objects[i] = $root.NT.EntityItem.fromObject(object.objects[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientHostItemBank message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientHostItemBank\n         * @static\n         * @param {NT.ClientHostItemBank} message ClientHostItemBank\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientHostItemBank.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.wands = [];\n                object.spells = [];\n                object.items = [];\n                object.objects = [];\n            }\n            if (options.defaults)\n                object.gold = 0;\n            if (message.wands && message.wands.length) {\n                object.wands = [];\n                for (let j = 0; j < message.wands.length; ++j)\n                    object.wands[j] = $root.NT.Wand.toObject(message.wands[j], options);\n            }\n            if (message.spells && message.spells.length) {\n                object.spells = [];\n                for (let j = 0; j < message.spells.length; ++j)\n                    object.spells[j] = $root.NT.Spell.toObject(message.spells[j], options);\n            }\n            if (message.items && message.items.length) {\n                object.items = [];\n                for (let j = 0; j < message.items.length; ++j)\n                    object.items[j] = $root.NT.Item.toObject(message.items[j], options);\n            }\n            if (message.gold != null && message.hasOwnProperty(\"gold\"))\n                object.gold = message.gold;\n            if (message.objects && message.objects.length) {\n                object.objects = [];\n                for (let j = 0; j < message.objects.length; ++j)\n                    object.objects[j] = $root.NT.EntityItem.toObject(message.objects[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientHostItemBank to JSON.\n         * @function toJSON\n         * @memberof NT.ClientHostItemBank\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientHostItemBank.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientHostItemBank\n         * @function getTypeUrl\n         * @memberof NT.ClientHostItemBank\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientHostItemBank.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientHostItemBank\";\n        };\n\n        return ClientHostItemBank;\n    })();\n\n    NT.ServerHostItemBank = (function() {\n\n        /**\n         * Properties of a ServerHostItemBank.\n         * @memberof NT\n         * @interface IServerHostItemBank\n         * @property {Array.<NT.IWand>|null} [wands] ServerHostItemBank wands\n         * @property {Array.<NT.ISpell>|null} [spells] ServerHostItemBank spells\n         * @property {Array.<NT.IItem>|null} [items] ServerHostItemBank items\n         * @property {number|null} [gold] ServerHostItemBank gold\n         * @property {Array.<NT.IEntityItem>|null} [objects] ServerHostItemBank objects\n         */\n\n        /**\n         * Constructs a new ServerHostItemBank.\n         * @memberof NT\n         * @classdesc Represents a ServerHostItemBank.\n         * @implements IServerHostItemBank\n         * @constructor\n         * @param {NT.IServerHostItemBank=} [properties] Properties to set\n         */\n        function ServerHostItemBank(properties) {\n            this.wands = [];\n            this.spells = [];\n            this.items = [];\n            this.objects = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerHostItemBank wands.\n         * @member {Array.<NT.IWand>} wands\n         * @memberof NT.ServerHostItemBank\n         * @instance\n         */\n        ServerHostItemBank.prototype.wands = $util.emptyArray;\n\n        /**\n         * ServerHostItemBank spells.\n         * @member {Array.<NT.ISpell>} spells\n         * @memberof NT.ServerHostItemBank\n         * @instance\n         */\n        ServerHostItemBank.prototype.spells = $util.emptyArray;\n\n        /**\n         * ServerHostItemBank items.\n         * @member {Array.<NT.IItem>} items\n         * @memberof NT.ServerHostItemBank\n         * @instance\n         */\n        ServerHostItemBank.prototype.items = $util.emptyArray;\n\n        /**\n         * ServerHostItemBank gold.\n         * @member {number} gold\n         * @memberof NT.ServerHostItemBank\n         * @instance\n         */\n        ServerHostItemBank.prototype.gold = 0;\n\n        /**\n         * ServerHostItemBank objects.\n         * @member {Array.<NT.IEntityItem>} objects\n         * @memberof NT.ServerHostItemBank\n         * @instance\n         */\n        ServerHostItemBank.prototype.objects = $util.emptyArray;\n\n        /**\n         * Creates a new ServerHostItemBank instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerHostItemBank\n         * @static\n         * @param {NT.IServerHostItemBank=} [properties] Properties to set\n         * @returns {NT.ServerHostItemBank} ServerHostItemBank instance\n         */\n        ServerHostItemBank.create = function create(properties) {\n            return new ServerHostItemBank(properties);\n        };\n\n        /**\n         * Encodes the specified ServerHostItemBank message. Does not implicitly {@link NT.ServerHostItemBank.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerHostItemBank\n         * @static\n         * @param {NT.IServerHostItemBank} message ServerHostItemBank message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerHostItemBank.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.wands != null && message.wands.length)\n                for (let i = 0; i < message.wands.length; ++i)\n                    $root.NT.Wand.encode(message.wands[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.spells != null && message.spells.length)\n                for (let i = 0; i < message.spells.length; ++i)\n                    $root.NT.Spell.encode(message.spells[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.items != null && message.items.length)\n                for (let i = 0; i < message.items.length; ++i)\n                    $root.NT.Item.encode(message.items[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.gold != null && Object.hasOwnProperty.call(message, \"gold\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.gold);\n            if (message.objects != null && message.objects.length)\n                for (let i = 0; i < message.objects.length; ++i)\n                    $root.NT.EntityItem.encode(message.objects[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerHostItemBank message, length delimited. Does not implicitly {@link NT.ServerHostItemBank.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerHostItemBank\n         * @static\n         * @param {NT.IServerHostItemBank} message ServerHostItemBank message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerHostItemBank.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerHostItemBank message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerHostItemBank\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerHostItemBank} ServerHostItemBank\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerHostItemBank.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerHostItemBank();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.wands && message.wands.length))\n                            message.wands = [];\n                        message.wands.push($root.NT.Wand.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        if (!(message.spells && message.spells.length))\n                            message.spells = [];\n                        message.spells.push($root.NT.Spell.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 3: {\n                        if (!(message.items && message.items.length))\n                            message.items = [];\n                        message.items.push($root.NT.Item.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        message.gold = reader.uint32();\n                        break;\n                    }\n                case 5: {\n                        if (!(message.objects && message.objects.length))\n                            message.objects = [];\n                        message.objects.push($root.NT.EntityItem.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerHostItemBank message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerHostItemBank\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerHostItemBank} ServerHostItemBank\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerHostItemBank.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerHostItemBank message.\n         * @function verify\n         * @memberof NT.ServerHostItemBank\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerHostItemBank.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.wands != null && message.hasOwnProperty(\"wands\")) {\n                if (!Array.isArray(message.wands))\n                    return \"wands: array expected\";\n                for (let i = 0; i < message.wands.length; ++i) {\n                    let error = $root.NT.Wand.verify(message.wands[i]);\n                    if (error)\n                        return \"wands.\" + error;\n                }\n            }\n            if (message.spells != null && message.hasOwnProperty(\"spells\")) {\n                if (!Array.isArray(message.spells))\n                    return \"spells: array expected\";\n                for (let i = 0; i < message.spells.length; ++i) {\n                    let error = $root.NT.Spell.verify(message.spells[i]);\n                    if (error)\n                        return \"spells.\" + error;\n                }\n            }\n            if (message.items != null && message.hasOwnProperty(\"items\")) {\n                if (!Array.isArray(message.items))\n                    return \"items: array expected\";\n                for (let i = 0; i < message.items.length; ++i) {\n                    let error = $root.NT.Item.verify(message.items[i]);\n                    if (error)\n                        return \"items.\" + error;\n                }\n            }\n            if (message.gold != null && message.hasOwnProperty(\"gold\"))\n                if (!$util.isInteger(message.gold))\n                    return \"gold: integer expected\";\n            if (message.objects != null && message.hasOwnProperty(\"objects\")) {\n                if (!Array.isArray(message.objects))\n                    return \"objects: array expected\";\n                for (let i = 0; i < message.objects.length; ++i) {\n                    let error = $root.NT.EntityItem.verify(message.objects[i]);\n                    if (error)\n                        return \"objects.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerHostItemBank message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerHostItemBank\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerHostItemBank} ServerHostItemBank\n         */\n        ServerHostItemBank.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerHostItemBank)\n                return object;\n            let message = new $root.NT.ServerHostItemBank();\n            if (object.wands) {\n                if (!Array.isArray(object.wands))\n                    throw TypeError(\".NT.ServerHostItemBank.wands: array expected\");\n                message.wands = [];\n                for (let i = 0; i < object.wands.length; ++i) {\n                    if (typeof object.wands[i] !== \"object\")\n                        throw TypeError(\".NT.ServerHostItemBank.wands: object expected\");\n                    message.wands[i] = $root.NT.Wand.fromObject(object.wands[i]);\n                }\n            }\n            if (object.spells) {\n                if (!Array.isArray(object.spells))\n                    throw TypeError(\".NT.ServerHostItemBank.spells: array expected\");\n                message.spells = [];\n                for (let i = 0; i < object.spells.length; ++i) {\n                    if (typeof object.spells[i] !== \"object\")\n                        throw TypeError(\".NT.ServerHostItemBank.spells: object expected\");\n                    message.spells[i] = $root.NT.Spell.fromObject(object.spells[i]);\n                }\n            }\n            if (object.items) {\n                if (!Array.isArray(object.items))\n                    throw TypeError(\".NT.ServerHostItemBank.items: array expected\");\n                message.items = [];\n                for (let i = 0; i < object.items.length; ++i) {\n                    if (typeof object.items[i] !== \"object\")\n                        throw TypeError(\".NT.ServerHostItemBank.items: object expected\");\n                    message.items[i] = $root.NT.Item.fromObject(object.items[i]);\n                }\n            }\n            if (object.gold != null)\n                message.gold = object.gold >>> 0;\n            if (object.objects) {\n                if (!Array.isArray(object.objects))\n                    throw TypeError(\".NT.ServerHostItemBank.objects: array expected\");\n                message.objects = [];\n                for (let i = 0; i < object.objects.length; ++i) {\n                    if (typeof object.objects[i] !== \"object\")\n                        throw TypeError(\".NT.ServerHostItemBank.objects: object expected\");\n                    message.objects[i] = $root.NT.EntityItem.fromObject(object.objects[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerHostItemBank message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerHostItemBank\n         * @static\n         * @param {NT.ServerHostItemBank} message ServerHostItemBank\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerHostItemBank.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.wands = [];\n                object.spells = [];\n                object.items = [];\n                object.objects = [];\n            }\n            if (options.defaults)\n                object.gold = 0;\n            if (message.wands && message.wands.length) {\n                object.wands = [];\n                for (let j = 0; j < message.wands.length; ++j)\n                    object.wands[j] = $root.NT.Wand.toObject(message.wands[j], options);\n            }\n            if (message.spells && message.spells.length) {\n                object.spells = [];\n                for (let j = 0; j < message.spells.length; ++j)\n                    object.spells[j] = $root.NT.Spell.toObject(message.spells[j], options);\n            }\n            if (message.items && message.items.length) {\n                object.items = [];\n                for (let j = 0; j < message.items.length; ++j)\n                    object.items[j] = $root.NT.Item.toObject(message.items[j], options);\n            }\n            if (message.gold != null && message.hasOwnProperty(\"gold\"))\n                object.gold = message.gold;\n            if (message.objects && message.objects.length) {\n                object.objects = [];\n                for (let j = 0; j < message.objects.length; ++j)\n                    object.objects[j] = $root.NT.EntityItem.toObject(message.objects[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerHostItemBank to JSON.\n         * @function toJSON\n         * @memberof NT.ServerHostItemBank\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerHostItemBank.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerHostItemBank\n         * @function getTypeUrl\n         * @memberof NT.ServerHostItemBank\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerHostItemBank.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerHostItemBank\";\n        };\n\n        return ServerHostItemBank;\n    })();\n\n    NT.ClientHostUserTake = (function() {\n\n        /**\n         * Properties of a ClientHostUserTake.\n         * @memberof NT\n         * @interface IClientHostUserTake\n         * @property {string|null} [userId] ClientHostUserTake userId\n         * @property {string|null} [id] ClientHostUserTake id\n         * @property {boolean|null} [success] ClientHostUserTake success\n         */\n\n        /**\n         * Constructs a new ClientHostUserTake.\n         * @memberof NT\n         * @classdesc Represents a ClientHostUserTake.\n         * @implements IClientHostUserTake\n         * @constructor\n         * @param {NT.IClientHostUserTake=} [properties] Properties to set\n         */\n        function ClientHostUserTake(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientHostUserTake userId.\n         * @member {string} userId\n         * @memberof NT.ClientHostUserTake\n         * @instance\n         */\n        ClientHostUserTake.prototype.userId = \"\";\n\n        /**\n         * ClientHostUserTake id.\n         * @member {string} id\n         * @memberof NT.ClientHostUserTake\n         * @instance\n         */\n        ClientHostUserTake.prototype.id = \"\";\n\n        /**\n         * ClientHostUserTake success.\n         * @member {boolean} success\n         * @memberof NT.ClientHostUserTake\n         * @instance\n         */\n        ClientHostUserTake.prototype.success = false;\n\n        /**\n         * Creates a new ClientHostUserTake instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientHostUserTake\n         * @static\n         * @param {NT.IClientHostUserTake=} [properties] Properties to set\n         * @returns {NT.ClientHostUserTake} ClientHostUserTake instance\n         */\n        ClientHostUserTake.create = function create(properties) {\n            return new ClientHostUserTake(properties);\n        };\n\n        /**\n         * Encodes the specified ClientHostUserTake message. Does not implicitly {@link NT.ClientHostUserTake.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientHostUserTake\n         * @static\n         * @param {NT.IClientHostUserTake} message ClientHostUserTake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientHostUserTake.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.id);\n            if (message.success != null && Object.hasOwnProperty.call(message, \"success\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.success);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientHostUserTake message, length delimited. Does not implicitly {@link NT.ClientHostUserTake.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientHostUserTake\n         * @static\n         * @param {NT.IClientHostUserTake} message ClientHostUserTake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientHostUserTake.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientHostUserTake message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientHostUserTake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientHostUserTake} ClientHostUserTake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientHostUserTake.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientHostUserTake();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.success = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientHostUserTake message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientHostUserTake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientHostUserTake} ClientHostUserTake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientHostUserTake.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientHostUserTake message.\n         * @function verify\n         * @memberof NT.ClientHostUserTake\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientHostUserTake.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                if (typeof message.success !== \"boolean\")\n                    return \"success: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientHostUserTake message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientHostUserTake\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientHostUserTake} ClientHostUserTake\n         */\n        ClientHostUserTake.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientHostUserTake)\n                return object;\n            let message = new $root.NT.ClientHostUserTake();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.success != null)\n                message.success = Boolean(object.success);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientHostUserTake message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientHostUserTake\n         * @static\n         * @param {NT.ClientHostUserTake} message ClientHostUserTake\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientHostUserTake.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.id = \"\";\n                object.success = false;\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                object.success = message.success;\n            return object;\n        };\n\n        /**\n         * Converts this ClientHostUserTake to JSON.\n         * @function toJSON\n         * @memberof NT.ClientHostUserTake\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientHostUserTake.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientHostUserTake\n         * @function getTypeUrl\n         * @memberof NT.ClientHostUserTake\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientHostUserTake.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientHostUserTake\";\n        };\n\n        return ClientHostUserTake;\n    })();\n\n    NT.ServerHostUserTake = (function() {\n\n        /**\n         * Properties of a ServerHostUserTake.\n         * @memberof NT\n         * @interface IServerHostUserTake\n         * @property {string|null} [userId] ServerHostUserTake userId\n         * @property {string|null} [id] ServerHostUserTake id\n         * @property {boolean|null} [success] ServerHostUserTake success\n         */\n\n        /**\n         * Constructs a new ServerHostUserTake.\n         * @memberof NT\n         * @classdesc Represents a ServerHostUserTake.\n         * @implements IServerHostUserTake\n         * @constructor\n         * @param {NT.IServerHostUserTake=} [properties] Properties to set\n         */\n        function ServerHostUserTake(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerHostUserTake userId.\n         * @member {string} userId\n         * @memberof NT.ServerHostUserTake\n         * @instance\n         */\n        ServerHostUserTake.prototype.userId = \"\";\n\n        /**\n         * ServerHostUserTake id.\n         * @member {string} id\n         * @memberof NT.ServerHostUserTake\n         * @instance\n         */\n        ServerHostUserTake.prototype.id = \"\";\n\n        /**\n         * ServerHostUserTake success.\n         * @member {boolean} success\n         * @memberof NT.ServerHostUserTake\n         * @instance\n         */\n        ServerHostUserTake.prototype.success = false;\n\n        /**\n         * Creates a new ServerHostUserTake instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerHostUserTake\n         * @static\n         * @param {NT.IServerHostUserTake=} [properties] Properties to set\n         * @returns {NT.ServerHostUserTake} ServerHostUserTake instance\n         */\n        ServerHostUserTake.create = function create(properties) {\n            return new ServerHostUserTake(properties);\n        };\n\n        /**\n         * Encodes the specified ServerHostUserTake message. Does not implicitly {@link NT.ServerHostUserTake.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerHostUserTake\n         * @static\n         * @param {NT.IServerHostUserTake} message ServerHostUserTake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerHostUserTake.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.id);\n            if (message.success != null && Object.hasOwnProperty.call(message, \"success\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.success);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerHostUserTake message, length delimited. Does not implicitly {@link NT.ServerHostUserTake.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerHostUserTake\n         * @static\n         * @param {NT.IServerHostUserTake} message ServerHostUserTake message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerHostUserTake.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerHostUserTake message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerHostUserTake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerHostUserTake} ServerHostUserTake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerHostUserTake.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerHostUserTake();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.success = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerHostUserTake message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerHostUserTake\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerHostUserTake} ServerHostUserTake\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerHostUserTake.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerHostUserTake message.\n         * @function verify\n         * @memberof NT.ServerHostUserTake\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerHostUserTake.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                if (typeof message.success !== \"boolean\")\n                    return \"success: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerHostUserTake message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerHostUserTake\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerHostUserTake} ServerHostUserTake\n         */\n        ServerHostUserTake.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerHostUserTake)\n                return object;\n            let message = new $root.NT.ServerHostUserTake();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.success != null)\n                message.success = Boolean(object.success);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerHostUserTake message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerHostUserTake\n         * @static\n         * @param {NT.ServerHostUserTake} message ServerHostUserTake\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerHostUserTake.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.id = \"\";\n                object.success = false;\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                object.success = message.success;\n            return object;\n        };\n\n        /**\n         * Converts this ServerHostUserTake to JSON.\n         * @function toJSON\n         * @memberof NT.ServerHostUserTake\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerHostUserTake.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerHostUserTake\n         * @function getTypeUrl\n         * @memberof NT.ServerHostUserTake\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerHostUserTake.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerHostUserTake\";\n        };\n\n        return ServerHostUserTake;\n    })();\n\n    NT.ClientHostUserTakeGold = (function() {\n\n        /**\n         * Properties of a ClientHostUserTakeGold.\n         * @memberof NT\n         * @interface IClientHostUserTakeGold\n         * @property {string|null} [userId] ClientHostUserTakeGold userId\n         * @property {number|null} [amount] ClientHostUserTakeGold amount\n         * @property {boolean|null} [success] ClientHostUserTakeGold success\n         */\n\n        /**\n         * Constructs a new ClientHostUserTakeGold.\n         * @memberof NT\n         * @classdesc Represents a ClientHostUserTakeGold.\n         * @implements IClientHostUserTakeGold\n         * @constructor\n         * @param {NT.IClientHostUserTakeGold=} [properties] Properties to set\n         */\n        function ClientHostUserTakeGold(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientHostUserTakeGold userId.\n         * @member {string} userId\n         * @memberof NT.ClientHostUserTakeGold\n         * @instance\n         */\n        ClientHostUserTakeGold.prototype.userId = \"\";\n\n        /**\n         * ClientHostUserTakeGold amount.\n         * @member {number} amount\n         * @memberof NT.ClientHostUserTakeGold\n         * @instance\n         */\n        ClientHostUserTakeGold.prototype.amount = 0;\n\n        /**\n         * ClientHostUserTakeGold success.\n         * @member {boolean} success\n         * @memberof NT.ClientHostUserTakeGold\n         * @instance\n         */\n        ClientHostUserTakeGold.prototype.success = false;\n\n        /**\n         * Creates a new ClientHostUserTakeGold instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientHostUserTakeGold\n         * @static\n         * @param {NT.IClientHostUserTakeGold=} [properties] Properties to set\n         * @returns {NT.ClientHostUserTakeGold} ClientHostUserTakeGold instance\n         */\n        ClientHostUserTakeGold.create = function create(properties) {\n            return new ClientHostUserTakeGold(properties);\n        };\n\n        /**\n         * Encodes the specified ClientHostUserTakeGold message. Does not implicitly {@link NT.ClientHostUserTakeGold.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientHostUserTakeGold\n         * @static\n         * @param {NT.IClientHostUserTakeGold} message ClientHostUserTakeGold message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientHostUserTakeGold.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.amount);\n            if (message.success != null && Object.hasOwnProperty.call(message, \"success\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.success);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientHostUserTakeGold message, length delimited. Does not implicitly {@link NT.ClientHostUserTakeGold.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientHostUserTakeGold\n         * @static\n         * @param {NT.IClientHostUserTakeGold} message ClientHostUserTakeGold message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientHostUserTakeGold.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientHostUserTakeGold message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientHostUserTakeGold\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientHostUserTakeGold} ClientHostUserTakeGold\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientHostUserTakeGold.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientHostUserTakeGold();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.amount = reader.uint32();\n                        break;\n                    }\n                case 3: {\n                        message.success = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientHostUserTakeGold message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientHostUserTakeGold\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientHostUserTakeGold} ClientHostUserTakeGold\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientHostUserTakeGold.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientHostUserTakeGold message.\n         * @function verify\n         * @memberof NT.ClientHostUserTakeGold\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientHostUserTakeGold.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                if (!$util.isInteger(message.amount))\n                    return \"amount: integer expected\";\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                if (typeof message.success !== \"boolean\")\n                    return \"success: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientHostUserTakeGold message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientHostUserTakeGold\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientHostUserTakeGold} ClientHostUserTakeGold\n         */\n        ClientHostUserTakeGold.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientHostUserTakeGold)\n                return object;\n            let message = new $root.NT.ClientHostUserTakeGold();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.amount != null)\n                message.amount = object.amount >>> 0;\n            if (object.success != null)\n                message.success = Boolean(object.success);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientHostUserTakeGold message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientHostUserTakeGold\n         * @static\n         * @param {NT.ClientHostUserTakeGold} message ClientHostUserTakeGold\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientHostUserTakeGold.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.amount = 0;\n                object.success = false;\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                object.amount = message.amount;\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                object.success = message.success;\n            return object;\n        };\n\n        /**\n         * Converts this ClientHostUserTakeGold to JSON.\n         * @function toJSON\n         * @memberof NT.ClientHostUserTakeGold\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientHostUserTakeGold.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientHostUserTakeGold\n         * @function getTypeUrl\n         * @memberof NT.ClientHostUserTakeGold\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientHostUserTakeGold.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientHostUserTakeGold\";\n        };\n\n        return ClientHostUserTakeGold;\n    })();\n\n    NT.ServerHostUserTakeGold = (function() {\n\n        /**\n         * Properties of a ServerHostUserTakeGold.\n         * @memberof NT\n         * @interface IServerHostUserTakeGold\n         * @property {string|null} [userId] ServerHostUserTakeGold userId\n         * @property {number|null} [amount] ServerHostUserTakeGold amount\n         * @property {boolean|null} [success] ServerHostUserTakeGold success\n         */\n\n        /**\n         * Constructs a new ServerHostUserTakeGold.\n         * @memberof NT\n         * @classdesc Represents a ServerHostUserTakeGold.\n         * @implements IServerHostUserTakeGold\n         * @constructor\n         * @param {NT.IServerHostUserTakeGold=} [properties] Properties to set\n         */\n        function ServerHostUserTakeGold(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerHostUserTakeGold userId.\n         * @member {string} userId\n         * @memberof NT.ServerHostUserTakeGold\n         * @instance\n         */\n        ServerHostUserTakeGold.prototype.userId = \"\";\n\n        /**\n         * ServerHostUserTakeGold amount.\n         * @member {number} amount\n         * @memberof NT.ServerHostUserTakeGold\n         * @instance\n         */\n        ServerHostUserTakeGold.prototype.amount = 0;\n\n        /**\n         * ServerHostUserTakeGold success.\n         * @member {boolean} success\n         * @memberof NT.ServerHostUserTakeGold\n         * @instance\n         */\n        ServerHostUserTakeGold.prototype.success = false;\n\n        /**\n         * Creates a new ServerHostUserTakeGold instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerHostUserTakeGold\n         * @static\n         * @param {NT.IServerHostUserTakeGold=} [properties] Properties to set\n         * @returns {NT.ServerHostUserTakeGold} ServerHostUserTakeGold instance\n         */\n        ServerHostUserTakeGold.create = function create(properties) {\n            return new ServerHostUserTakeGold(properties);\n        };\n\n        /**\n         * Encodes the specified ServerHostUserTakeGold message. Does not implicitly {@link NT.ServerHostUserTakeGold.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerHostUserTakeGold\n         * @static\n         * @param {NT.IServerHostUserTakeGold} message ServerHostUserTakeGold message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerHostUserTakeGold.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.amount);\n            if (message.success != null && Object.hasOwnProperty.call(message, \"success\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).bool(message.success);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerHostUserTakeGold message, length delimited. Does not implicitly {@link NT.ServerHostUserTakeGold.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerHostUserTakeGold\n         * @static\n         * @param {NT.IServerHostUserTakeGold} message ServerHostUserTakeGold message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerHostUserTakeGold.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerHostUserTakeGold message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerHostUserTakeGold\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerHostUserTakeGold} ServerHostUserTakeGold\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerHostUserTakeGold.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerHostUserTakeGold();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.amount = reader.uint32();\n                        break;\n                    }\n                case 3: {\n                        message.success = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerHostUserTakeGold message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerHostUserTakeGold\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerHostUserTakeGold} ServerHostUserTakeGold\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerHostUserTakeGold.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerHostUserTakeGold message.\n         * @function verify\n         * @memberof NT.ServerHostUserTakeGold\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerHostUserTakeGold.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                if (!$util.isInteger(message.amount))\n                    return \"amount: integer expected\";\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                if (typeof message.success !== \"boolean\")\n                    return \"success: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerHostUserTakeGold message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerHostUserTakeGold\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerHostUserTakeGold} ServerHostUserTakeGold\n         */\n        ServerHostUserTakeGold.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerHostUserTakeGold)\n                return object;\n            let message = new $root.NT.ServerHostUserTakeGold();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.amount != null)\n                message.amount = object.amount >>> 0;\n            if (object.success != null)\n                message.success = Boolean(object.success);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerHostUserTakeGold message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerHostUserTakeGold\n         * @static\n         * @param {NT.ServerHostUserTakeGold} message ServerHostUserTakeGold\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerHostUserTakeGold.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.amount = 0;\n                object.success = false;\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                object.amount = message.amount;\n            if (message.success != null && message.hasOwnProperty(\"success\"))\n                object.success = message.success;\n            return object;\n        };\n\n        /**\n         * Converts this ServerHostUserTakeGold to JSON.\n         * @function toJSON\n         * @memberof NT.ServerHostUserTakeGold\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerHostUserTakeGold.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerHostUserTakeGold\n         * @function getTypeUrl\n         * @memberof NT.ServerHostUserTakeGold\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerHostUserTakeGold.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerHostUserTakeGold\";\n        };\n\n        return ServerHostUserTakeGold;\n    })();\n\n    NT.ClientPlayerAddGold = (function() {\n\n        /**\n         * Properties of a ClientPlayerAddGold.\n         * @memberof NT\n         * @interface IClientPlayerAddGold\n         * @property {number|null} [amount] ClientPlayerAddGold amount\n         */\n\n        /**\n         * Constructs a new ClientPlayerAddGold.\n         * @memberof NT\n         * @classdesc Represents a ClientPlayerAddGold.\n         * @implements IClientPlayerAddGold\n         * @constructor\n         * @param {NT.IClientPlayerAddGold=} [properties] Properties to set\n         */\n        function ClientPlayerAddGold(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientPlayerAddGold amount.\n         * @member {number} amount\n         * @memberof NT.ClientPlayerAddGold\n         * @instance\n         */\n        ClientPlayerAddGold.prototype.amount = 0;\n\n        /**\n         * Creates a new ClientPlayerAddGold instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientPlayerAddGold\n         * @static\n         * @param {NT.IClientPlayerAddGold=} [properties] Properties to set\n         * @returns {NT.ClientPlayerAddGold} ClientPlayerAddGold instance\n         */\n        ClientPlayerAddGold.create = function create(properties) {\n            return new ClientPlayerAddGold(properties);\n        };\n\n        /**\n         * Encodes the specified ClientPlayerAddGold message. Does not implicitly {@link NT.ClientPlayerAddGold.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientPlayerAddGold\n         * @static\n         * @param {NT.IClientPlayerAddGold} message ClientPlayerAddGold message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerAddGold.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.amount);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientPlayerAddGold message, length delimited. Does not implicitly {@link NT.ClientPlayerAddGold.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientPlayerAddGold\n         * @static\n         * @param {NT.IClientPlayerAddGold} message ClientPlayerAddGold message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerAddGold.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientPlayerAddGold message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientPlayerAddGold\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientPlayerAddGold} ClientPlayerAddGold\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerAddGold.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerAddGold();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.amount = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientPlayerAddGold message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientPlayerAddGold\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientPlayerAddGold} ClientPlayerAddGold\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerAddGold.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientPlayerAddGold message.\n         * @function verify\n         * @memberof NT.ClientPlayerAddGold\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientPlayerAddGold.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                if (!$util.isInteger(message.amount))\n                    return \"amount: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientPlayerAddGold message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientPlayerAddGold\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientPlayerAddGold} ClientPlayerAddGold\n         */\n        ClientPlayerAddGold.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientPlayerAddGold)\n                return object;\n            let message = new $root.NT.ClientPlayerAddGold();\n            if (object.amount != null)\n                message.amount = object.amount >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientPlayerAddGold message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientPlayerAddGold\n         * @static\n         * @param {NT.ClientPlayerAddGold} message ClientPlayerAddGold\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientPlayerAddGold.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.amount = 0;\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                object.amount = message.amount;\n            return object;\n        };\n\n        /**\n         * Converts this ClientPlayerAddGold to JSON.\n         * @function toJSON\n         * @memberof NT.ClientPlayerAddGold\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientPlayerAddGold.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientPlayerAddGold\n         * @function getTypeUrl\n         * @memberof NT.ClientPlayerAddGold\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientPlayerAddGold.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientPlayerAddGold\";\n        };\n\n        return ClientPlayerAddGold;\n    })();\n\n    NT.ServerPlayerAddGold = (function() {\n\n        /**\n         * Properties of a ServerPlayerAddGold.\n         * @memberof NT\n         * @interface IServerPlayerAddGold\n         * @property {string|null} [userId] ServerPlayerAddGold userId\n         * @property {number|null} [amount] ServerPlayerAddGold amount\n         */\n\n        /**\n         * Constructs a new ServerPlayerAddGold.\n         * @memberof NT\n         * @classdesc Represents a ServerPlayerAddGold.\n         * @implements IServerPlayerAddGold\n         * @constructor\n         * @param {NT.IServerPlayerAddGold=} [properties] Properties to set\n         */\n        function ServerPlayerAddGold(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerPlayerAddGold userId.\n         * @member {string} userId\n         * @memberof NT.ServerPlayerAddGold\n         * @instance\n         */\n        ServerPlayerAddGold.prototype.userId = \"\";\n\n        /**\n         * ServerPlayerAddGold amount.\n         * @member {number} amount\n         * @memberof NT.ServerPlayerAddGold\n         * @instance\n         */\n        ServerPlayerAddGold.prototype.amount = 0;\n\n        /**\n         * Creates a new ServerPlayerAddGold instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerPlayerAddGold\n         * @static\n         * @param {NT.IServerPlayerAddGold=} [properties] Properties to set\n         * @returns {NT.ServerPlayerAddGold} ServerPlayerAddGold instance\n         */\n        ServerPlayerAddGold.create = function create(properties) {\n            return new ServerPlayerAddGold(properties);\n        };\n\n        /**\n         * Encodes the specified ServerPlayerAddGold message. Does not implicitly {@link NT.ServerPlayerAddGold.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerPlayerAddGold\n         * @static\n         * @param {NT.IServerPlayerAddGold} message ServerPlayerAddGold message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerAddGold.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.amount);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerPlayerAddGold message, length delimited. Does not implicitly {@link NT.ServerPlayerAddGold.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerPlayerAddGold\n         * @static\n         * @param {NT.IServerPlayerAddGold} message ServerPlayerAddGold message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerAddGold.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerPlayerAddGold message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerPlayerAddGold\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerPlayerAddGold} ServerPlayerAddGold\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerAddGold.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerAddGold();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.amount = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerPlayerAddGold message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerPlayerAddGold\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerPlayerAddGold} ServerPlayerAddGold\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerAddGold.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerPlayerAddGold message.\n         * @function verify\n         * @memberof NT.ServerPlayerAddGold\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerPlayerAddGold.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                if (!$util.isInteger(message.amount))\n                    return \"amount: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerPlayerAddGold message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerPlayerAddGold\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerPlayerAddGold} ServerPlayerAddGold\n         */\n        ServerPlayerAddGold.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerPlayerAddGold)\n                return object;\n            let message = new $root.NT.ServerPlayerAddGold();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.amount != null)\n                message.amount = object.amount >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerPlayerAddGold message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerPlayerAddGold\n         * @static\n         * @param {NT.ServerPlayerAddGold} message ServerPlayerAddGold\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerPlayerAddGold.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.amount = 0;\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                object.amount = message.amount;\n            return object;\n        };\n\n        /**\n         * Converts this ServerPlayerAddGold to JSON.\n         * @function toJSON\n         * @memberof NT.ServerPlayerAddGold\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerPlayerAddGold.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerPlayerAddGold\n         * @function getTypeUrl\n         * @memberof NT.ServerPlayerAddGold\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerPlayerAddGold.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerPlayerAddGold\";\n        };\n\n        return ServerPlayerAddGold;\n    })();\n\n    NT.ClientPlayerTakeGold = (function() {\n\n        /**\n         * Properties of a ClientPlayerTakeGold.\n         * @memberof NT\n         * @interface IClientPlayerTakeGold\n         * @property {number|null} [amount] ClientPlayerTakeGold amount\n         */\n\n        /**\n         * Constructs a new ClientPlayerTakeGold.\n         * @memberof NT\n         * @classdesc Represents a ClientPlayerTakeGold.\n         * @implements IClientPlayerTakeGold\n         * @constructor\n         * @param {NT.IClientPlayerTakeGold=} [properties] Properties to set\n         */\n        function ClientPlayerTakeGold(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientPlayerTakeGold amount.\n         * @member {number} amount\n         * @memberof NT.ClientPlayerTakeGold\n         * @instance\n         */\n        ClientPlayerTakeGold.prototype.amount = 0;\n\n        /**\n         * Creates a new ClientPlayerTakeGold instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientPlayerTakeGold\n         * @static\n         * @param {NT.IClientPlayerTakeGold=} [properties] Properties to set\n         * @returns {NT.ClientPlayerTakeGold} ClientPlayerTakeGold instance\n         */\n        ClientPlayerTakeGold.create = function create(properties) {\n            return new ClientPlayerTakeGold(properties);\n        };\n\n        /**\n         * Encodes the specified ClientPlayerTakeGold message. Does not implicitly {@link NT.ClientPlayerTakeGold.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientPlayerTakeGold\n         * @static\n         * @param {NT.IClientPlayerTakeGold} message ClientPlayerTakeGold message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerTakeGold.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.amount);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientPlayerTakeGold message, length delimited. Does not implicitly {@link NT.ClientPlayerTakeGold.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientPlayerTakeGold\n         * @static\n         * @param {NT.IClientPlayerTakeGold} message ClientPlayerTakeGold message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerTakeGold.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientPlayerTakeGold message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientPlayerTakeGold\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientPlayerTakeGold} ClientPlayerTakeGold\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerTakeGold.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerTakeGold();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.amount = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientPlayerTakeGold message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientPlayerTakeGold\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientPlayerTakeGold} ClientPlayerTakeGold\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerTakeGold.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientPlayerTakeGold message.\n         * @function verify\n         * @memberof NT.ClientPlayerTakeGold\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientPlayerTakeGold.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                if (!$util.isInteger(message.amount))\n                    return \"amount: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientPlayerTakeGold message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientPlayerTakeGold\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientPlayerTakeGold} ClientPlayerTakeGold\n         */\n        ClientPlayerTakeGold.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientPlayerTakeGold)\n                return object;\n            let message = new $root.NT.ClientPlayerTakeGold();\n            if (object.amount != null)\n                message.amount = object.amount >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientPlayerTakeGold message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientPlayerTakeGold\n         * @static\n         * @param {NT.ClientPlayerTakeGold} message ClientPlayerTakeGold\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientPlayerTakeGold.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.amount = 0;\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                object.amount = message.amount;\n            return object;\n        };\n\n        /**\n         * Converts this ClientPlayerTakeGold to JSON.\n         * @function toJSON\n         * @memberof NT.ClientPlayerTakeGold\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientPlayerTakeGold.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientPlayerTakeGold\n         * @function getTypeUrl\n         * @memberof NT.ClientPlayerTakeGold\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientPlayerTakeGold.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientPlayerTakeGold\";\n        };\n\n        return ClientPlayerTakeGold;\n    })();\n\n    NT.ServerPlayerTakeGold = (function() {\n\n        /**\n         * Properties of a ServerPlayerTakeGold.\n         * @memberof NT\n         * @interface IServerPlayerTakeGold\n         * @property {string|null} [userId] ServerPlayerTakeGold userId\n         * @property {number|null} [amount] ServerPlayerTakeGold amount\n         */\n\n        /**\n         * Constructs a new ServerPlayerTakeGold.\n         * @memberof NT\n         * @classdesc Represents a ServerPlayerTakeGold.\n         * @implements IServerPlayerTakeGold\n         * @constructor\n         * @param {NT.IServerPlayerTakeGold=} [properties] Properties to set\n         */\n        function ServerPlayerTakeGold(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerPlayerTakeGold userId.\n         * @member {string} userId\n         * @memberof NT.ServerPlayerTakeGold\n         * @instance\n         */\n        ServerPlayerTakeGold.prototype.userId = \"\";\n\n        /**\n         * ServerPlayerTakeGold amount.\n         * @member {number} amount\n         * @memberof NT.ServerPlayerTakeGold\n         * @instance\n         */\n        ServerPlayerTakeGold.prototype.amount = 0;\n\n        /**\n         * Creates a new ServerPlayerTakeGold instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerPlayerTakeGold\n         * @static\n         * @param {NT.IServerPlayerTakeGold=} [properties] Properties to set\n         * @returns {NT.ServerPlayerTakeGold} ServerPlayerTakeGold instance\n         */\n        ServerPlayerTakeGold.create = function create(properties) {\n            return new ServerPlayerTakeGold(properties);\n        };\n\n        /**\n         * Encodes the specified ServerPlayerTakeGold message. Does not implicitly {@link NT.ServerPlayerTakeGold.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerPlayerTakeGold\n         * @static\n         * @param {NT.IServerPlayerTakeGold} message ServerPlayerTakeGold message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerTakeGold.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.amount);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerPlayerTakeGold message, length delimited. Does not implicitly {@link NT.ServerPlayerTakeGold.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerPlayerTakeGold\n         * @static\n         * @param {NT.IServerPlayerTakeGold} message ServerPlayerTakeGold message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerTakeGold.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerPlayerTakeGold message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerPlayerTakeGold\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerPlayerTakeGold} ServerPlayerTakeGold\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerTakeGold.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerTakeGold();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.amount = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerPlayerTakeGold message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerPlayerTakeGold\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerPlayerTakeGold} ServerPlayerTakeGold\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerTakeGold.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerPlayerTakeGold message.\n         * @function verify\n         * @memberof NT.ServerPlayerTakeGold\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerPlayerTakeGold.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                if (!$util.isInteger(message.amount))\n                    return \"amount: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerPlayerTakeGold message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerPlayerTakeGold\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerPlayerTakeGold} ServerPlayerTakeGold\n         */\n        ServerPlayerTakeGold.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerPlayerTakeGold)\n                return object;\n            let message = new $root.NT.ServerPlayerTakeGold();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.amount != null)\n                message.amount = object.amount >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerPlayerTakeGold message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerPlayerTakeGold\n         * @static\n         * @param {NT.ServerPlayerTakeGold} message ServerPlayerTakeGold\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerPlayerTakeGold.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.amount = 0;\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                object.amount = message.amount;\n            return object;\n        };\n\n        /**\n         * Converts this ServerPlayerTakeGold to JSON.\n         * @function toJSON\n         * @memberof NT.ServerPlayerTakeGold\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerPlayerTakeGold.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerPlayerTakeGold\n         * @function getTypeUrl\n         * @memberof NT.ServerPlayerTakeGold\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerPlayerTakeGold.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerPlayerTakeGold\";\n        };\n\n        return ServerPlayerTakeGold;\n    })();\n\n    NT.ClientPlayerAddItem = (function() {\n\n        /**\n         * Properties of a ClientPlayerAddItem.\n         * @memberof NT\n         * @interface IClientPlayerAddItem\n         * @property {NT.ClientPlayerAddItem.ISpells|null} [spells] ClientPlayerAddItem spells\n         * @property {NT.ClientPlayerAddItem.IWands|null} [wands] ClientPlayerAddItem wands\n         * @property {NT.ClientPlayerAddItem.IItems|null} [flasks] ClientPlayerAddItem flasks\n         * @property {NT.ClientPlayerAddItem.IEntities|null} [objects] ClientPlayerAddItem objects\n         */\n\n        /**\n         * Constructs a new ClientPlayerAddItem.\n         * @memberof NT\n         * @classdesc Represents a ClientPlayerAddItem.\n         * @implements IClientPlayerAddItem\n         * @constructor\n         * @param {NT.IClientPlayerAddItem=} [properties] Properties to set\n         */\n        function ClientPlayerAddItem(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientPlayerAddItem spells.\n         * @member {NT.ClientPlayerAddItem.ISpells|null|undefined} spells\n         * @memberof NT.ClientPlayerAddItem\n         * @instance\n         */\n        ClientPlayerAddItem.prototype.spells = null;\n\n        /**\n         * ClientPlayerAddItem wands.\n         * @member {NT.ClientPlayerAddItem.IWands|null|undefined} wands\n         * @memberof NT.ClientPlayerAddItem\n         * @instance\n         */\n        ClientPlayerAddItem.prototype.wands = null;\n\n        /**\n         * ClientPlayerAddItem flasks.\n         * @member {NT.ClientPlayerAddItem.IItems|null|undefined} flasks\n         * @memberof NT.ClientPlayerAddItem\n         * @instance\n         */\n        ClientPlayerAddItem.prototype.flasks = null;\n\n        /**\n         * ClientPlayerAddItem objects.\n         * @member {NT.ClientPlayerAddItem.IEntities|null|undefined} objects\n         * @memberof NT.ClientPlayerAddItem\n         * @instance\n         */\n        ClientPlayerAddItem.prototype.objects = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ClientPlayerAddItem item.\n         * @member {\"spells\"|\"wands\"|\"flasks\"|\"objects\"|undefined} item\n         * @memberof NT.ClientPlayerAddItem\n         * @instance\n         */\n        Object.defineProperty(ClientPlayerAddItem.prototype, \"item\", {\n            get: $util.oneOfGetter($oneOfFields = [\"spells\", \"wands\", \"flasks\", \"objects\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ClientPlayerAddItem instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientPlayerAddItem\n         * @static\n         * @param {NT.IClientPlayerAddItem=} [properties] Properties to set\n         * @returns {NT.ClientPlayerAddItem} ClientPlayerAddItem instance\n         */\n        ClientPlayerAddItem.create = function create(properties) {\n            return new ClientPlayerAddItem(properties);\n        };\n\n        /**\n         * Encodes the specified ClientPlayerAddItem message. Does not implicitly {@link NT.ClientPlayerAddItem.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientPlayerAddItem\n         * @static\n         * @param {NT.IClientPlayerAddItem} message ClientPlayerAddItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerAddItem.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.spells != null && Object.hasOwnProperty.call(message, \"spells\"))\n                $root.NT.ClientPlayerAddItem.Spells.encode(message.spells, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.wands != null && Object.hasOwnProperty.call(message, \"wands\"))\n                $root.NT.ClientPlayerAddItem.Wands.encode(message.wands, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.flasks != null && Object.hasOwnProperty.call(message, \"flasks\"))\n                $root.NT.ClientPlayerAddItem.Items.encode(message.flasks, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.objects != null && Object.hasOwnProperty.call(message, \"objects\"))\n                $root.NT.ClientPlayerAddItem.Entities.encode(message.objects, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientPlayerAddItem message, length delimited. Does not implicitly {@link NT.ClientPlayerAddItem.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientPlayerAddItem\n         * @static\n         * @param {NT.IClientPlayerAddItem} message ClientPlayerAddItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerAddItem.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientPlayerAddItem message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientPlayerAddItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientPlayerAddItem} ClientPlayerAddItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerAddItem.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerAddItem();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.spells = $root.NT.ClientPlayerAddItem.Spells.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.wands = $root.NT.ClientPlayerAddItem.Wands.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.flasks = $root.NT.ClientPlayerAddItem.Items.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.objects = $root.NT.ClientPlayerAddItem.Entities.decode(reader, reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientPlayerAddItem message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientPlayerAddItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientPlayerAddItem} ClientPlayerAddItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerAddItem.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientPlayerAddItem message.\n         * @function verify\n         * @memberof NT.ClientPlayerAddItem\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientPlayerAddItem.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.spells != null && message.hasOwnProperty(\"spells\")) {\n                properties.item = 1;\n                {\n                    let error = $root.NT.ClientPlayerAddItem.Spells.verify(message.spells);\n                    if (error)\n                        return \"spells.\" + error;\n                }\n            }\n            if (message.wands != null && message.hasOwnProperty(\"wands\")) {\n                if (properties.item === 1)\n                    return \"item: multiple values\";\n                properties.item = 1;\n                {\n                    let error = $root.NT.ClientPlayerAddItem.Wands.verify(message.wands);\n                    if (error)\n                        return \"wands.\" + error;\n                }\n            }\n            if (message.flasks != null && message.hasOwnProperty(\"flasks\")) {\n                if (properties.item === 1)\n                    return \"item: multiple values\";\n                properties.item = 1;\n                {\n                    let error = $root.NT.ClientPlayerAddItem.Items.verify(message.flasks);\n                    if (error)\n                        return \"flasks.\" + error;\n                }\n            }\n            if (message.objects != null && message.hasOwnProperty(\"objects\")) {\n                if (properties.item === 1)\n                    return \"item: multiple values\";\n                properties.item = 1;\n                {\n                    let error = $root.NT.ClientPlayerAddItem.Entities.verify(message.objects);\n                    if (error)\n                        return \"objects.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientPlayerAddItem message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientPlayerAddItem\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientPlayerAddItem} ClientPlayerAddItem\n         */\n        ClientPlayerAddItem.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientPlayerAddItem)\n                return object;\n            let message = new $root.NT.ClientPlayerAddItem();\n            if (object.spells != null) {\n                if (typeof object.spells !== \"object\")\n                    throw TypeError(\".NT.ClientPlayerAddItem.spells: object expected\");\n                message.spells = $root.NT.ClientPlayerAddItem.Spells.fromObject(object.spells);\n            }\n            if (object.wands != null) {\n                if (typeof object.wands !== \"object\")\n                    throw TypeError(\".NT.ClientPlayerAddItem.wands: object expected\");\n                message.wands = $root.NT.ClientPlayerAddItem.Wands.fromObject(object.wands);\n            }\n            if (object.flasks != null) {\n                if (typeof object.flasks !== \"object\")\n                    throw TypeError(\".NT.ClientPlayerAddItem.flasks: object expected\");\n                message.flasks = $root.NT.ClientPlayerAddItem.Items.fromObject(object.flasks);\n            }\n            if (object.objects != null) {\n                if (typeof object.objects !== \"object\")\n                    throw TypeError(\".NT.ClientPlayerAddItem.objects: object expected\");\n                message.objects = $root.NT.ClientPlayerAddItem.Entities.fromObject(object.objects);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientPlayerAddItem message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientPlayerAddItem\n         * @static\n         * @param {NT.ClientPlayerAddItem} message ClientPlayerAddItem\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientPlayerAddItem.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.spells != null && message.hasOwnProperty(\"spells\")) {\n                object.spells = $root.NT.ClientPlayerAddItem.Spells.toObject(message.spells, options);\n                if (options.oneofs)\n                    object.item = \"spells\";\n            }\n            if (message.wands != null && message.hasOwnProperty(\"wands\")) {\n                object.wands = $root.NT.ClientPlayerAddItem.Wands.toObject(message.wands, options);\n                if (options.oneofs)\n                    object.item = \"wands\";\n            }\n            if (message.flasks != null && message.hasOwnProperty(\"flasks\")) {\n                object.flasks = $root.NT.ClientPlayerAddItem.Items.toObject(message.flasks, options);\n                if (options.oneofs)\n                    object.item = \"flasks\";\n            }\n            if (message.objects != null && message.hasOwnProperty(\"objects\")) {\n                object.objects = $root.NT.ClientPlayerAddItem.Entities.toObject(message.objects, options);\n                if (options.oneofs)\n                    object.item = \"objects\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientPlayerAddItem to JSON.\n         * @function toJSON\n         * @memberof NT.ClientPlayerAddItem\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientPlayerAddItem.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientPlayerAddItem\n         * @function getTypeUrl\n         * @memberof NT.ClientPlayerAddItem\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientPlayerAddItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientPlayerAddItem\";\n        };\n\n        ClientPlayerAddItem.Spells = (function() {\n\n            /**\n             * Properties of a Spells.\n             * @memberof NT.ClientPlayerAddItem\n             * @interface ISpells\n             * @property {Array.<NT.ISpell>|null} [list] Spells list\n             */\n\n            /**\n             * Constructs a new Spells.\n             * @memberof NT.ClientPlayerAddItem\n             * @classdesc Represents a Spells.\n             * @implements ISpells\n             * @constructor\n             * @param {NT.ClientPlayerAddItem.ISpells=} [properties] Properties to set\n             */\n            function Spells(properties) {\n                this.list = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Spells list.\n             * @member {Array.<NT.ISpell>} list\n             * @memberof NT.ClientPlayerAddItem.Spells\n             * @instance\n             */\n            Spells.prototype.list = $util.emptyArray;\n\n            /**\n             * Creates a new Spells instance using the specified properties.\n             * @function create\n             * @memberof NT.ClientPlayerAddItem.Spells\n             * @static\n             * @param {NT.ClientPlayerAddItem.ISpells=} [properties] Properties to set\n             * @returns {NT.ClientPlayerAddItem.Spells} Spells instance\n             */\n            Spells.create = function create(properties) {\n                return new Spells(properties);\n            };\n\n            /**\n             * Encodes the specified Spells message. Does not implicitly {@link NT.ClientPlayerAddItem.Spells.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ClientPlayerAddItem.Spells\n             * @static\n             * @param {NT.ClientPlayerAddItem.ISpells} message Spells message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Spells.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.list != null && message.list.length)\n                    for (let i = 0; i < message.list.length; ++i)\n                        $root.NT.Spell.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Spells message, length delimited. Does not implicitly {@link NT.ClientPlayerAddItem.Spells.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ClientPlayerAddItem.Spells\n             * @static\n             * @param {NT.ClientPlayerAddItem.ISpells} message Spells message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Spells.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Spells message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ClientPlayerAddItem.Spells\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ClientPlayerAddItem.Spells} Spells\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Spells.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerAddItem.Spells();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            if (!(message.list && message.list.length))\n                                message.list = [];\n                            message.list.push($root.NT.Spell.decode(reader, reader.uint32()));\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Spells message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ClientPlayerAddItem.Spells\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ClientPlayerAddItem.Spells} Spells\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Spells.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Spells message.\n             * @function verify\n             * @memberof NT.ClientPlayerAddItem.Spells\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Spells.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.list != null && message.hasOwnProperty(\"list\")) {\n                    if (!Array.isArray(message.list))\n                        return \"list: array expected\";\n                    for (let i = 0; i < message.list.length; ++i) {\n                        let error = $root.NT.Spell.verify(message.list[i]);\n                        if (error)\n                            return \"list.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Spells message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ClientPlayerAddItem.Spells\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ClientPlayerAddItem.Spells} Spells\n             */\n            Spells.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ClientPlayerAddItem.Spells)\n                    return object;\n                let message = new $root.NT.ClientPlayerAddItem.Spells();\n                if (object.list) {\n                    if (!Array.isArray(object.list))\n                        throw TypeError(\".NT.ClientPlayerAddItem.Spells.list: array expected\");\n                    message.list = [];\n                    for (let i = 0; i < object.list.length; ++i) {\n                        if (typeof object.list[i] !== \"object\")\n                            throw TypeError(\".NT.ClientPlayerAddItem.Spells.list: object expected\");\n                        message.list[i] = $root.NT.Spell.fromObject(object.list[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Spells message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ClientPlayerAddItem.Spells\n             * @static\n             * @param {NT.ClientPlayerAddItem.Spells} message Spells\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Spells.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.list = [];\n                if (message.list && message.list.length) {\n                    object.list = [];\n                    for (let j = 0; j < message.list.length; ++j)\n                        object.list[j] = $root.NT.Spell.toObject(message.list[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Spells to JSON.\n             * @function toJSON\n             * @memberof NT.ClientPlayerAddItem.Spells\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Spells.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Spells\n             * @function getTypeUrl\n             * @memberof NT.ClientPlayerAddItem.Spells\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Spells.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ClientPlayerAddItem.Spells\";\n            };\n\n            return Spells;\n        })();\n\n        ClientPlayerAddItem.Wands = (function() {\n\n            /**\n             * Properties of a Wands.\n             * @memberof NT.ClientPlayerAddItem\n             * @interface IWands\n             * @property {Array.<NT.IWand>|null} [list] Wands list\n             */\n\n            /**\n             * Constructs a new Wands.\n             * @memberof NT.ClientPlayerAddItem\n             * @classdesc Represents a Wands.\n             * @implements IWands\n             * @constructor\n             * @param {NT.ClientPlayerAddItem.IWands=} [properties] Properties to set\n             */\n            function Wands(properties) {\n                this.list = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Wands list.\n             * @member {Array.<NT.IWand>} list\n             * @memberof NT.ClientPlayerAddItem.Wands\n             * @instance\n             */\n            Wands.prototype.list = $util.emptyArray;\n\n            /**\n             * Creates a new Wands instance using the specified properties.\n             * @function create\n             * @memberof NT.ClientPlayerAddItem.Wands\n             * @static\n             * @param {NT.ClientPlayerAddItem.IWands=} [properties] Properties to set\n             * @returns {NT.ClientPlayerAddItem.Wands} Wands instance\n             */\n            Wands.create = function create(properties) {\n                return new Wands(properties);\n            };\n\n            /**\n             * Encodes the specified Wands message. Does not implicitly {@link NT.ClientPlayerAddItem.Wands.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ClientPlayerAddItem.Wands\n             * @static\n             * @param {NT.ClientPlayerAddItem.IWands} message Wands message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Wands.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.list != null && message.list.length)\n                    for (let i = 0; i < message.list.length; ++i)\n                        $root.NT.Wand.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Wands message, length delimited. Does not implicitly {@link NT.ClientPlayerAddItem.Wands.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ClientPlayerAddItem.Wands\n             * @static\n             * @param {NT.ClientPlayerAddItem.IWands} message Wands message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Wands.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Wands message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ClientPlayerAddItem.Wands\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ClientPlayerAddItem.Wands} Wands\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Wands.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerAddItem.Wands();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            if (!(message.list && message.list.length))\n                                message.list = [];\n                            message.list.push($root.NT.Wand.decode(reader, reader.uint32()));\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Wands message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ClientPlayerAddItem.Wands\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ClientPlayerAddItem.Wands} Wands\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Wands.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Wands message.\n             * @function verify\n             * @memberof NT.ClientPlayerAddItem.Wands\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Wands.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.list != null && message.hasOwnProperty(\"list\")) {\n                    if (!Array.isArray(message.list))\n                        return \"list: array expected\";\n                    for (let i = 0; i < message.list.length; ++i) {\n                        let error = $root.NT.Wand.verify(message.list[i]);\n                        if (error)\n                            return \"list.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Wands message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ClientPlayerAddItem.Wands\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ClientPlayerAddItem.Wands} Wands\n             */\n            Wands.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ClientPlayerAddItem.Wands)\n                    return object;\n                let message = new $root.NT.ClientPlayerAddItem.Wands();\n                if (object.list) {\n                    if (!Array.isArray(object.list))\n                        throw TypeError(\".NT.ClientPlayerAddItem.Wands.list: array expected\");\n                    message.list = [];\n                    for (let i = 0; i < object.list.length; ++i) {\n                        if (typeof object.list[i] !== \"object\")\n                            throw TypeError(\".NT.ClientPlayerAddItem.Wands.list: object expected\");\n                        message.list[i] = $root.NT.Wand.fromObject(object.list[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Wands message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ClientPlayerAddItem.Wands\n             * @static\n             * @param {NT.ClientPlayerAddItem.Wands} message Wands\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Wands.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.list = [];\n                if (message.list && message.list.length) {\n                    object.list = [];\n                    for (let j = 0; j < message.list.length; ++j)\n                        object.list[j] = $root.NT.Wand.toObject(message.list[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Wands to JSON.\n             * @function toJSON\n             * @memberof NT.ClientPlayerAddItem.Wands\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Wands.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Wands\n             * @function getTypeUrl\n             * @memberof NT.ClientPlayerAddItem.Wands\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Wands.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ClientPlayerAddItem.Wands\";\n            };\n\n            return Wands;\n        })();\n\n        ClientPlayerAddItem.Items = (function() {\n\n            /**\n             * Properties of an Items.\n             * @memberof NT.ClientPlayerAddItem\n             * @interface IItems\n             * @property {Array.<NT.IItem>|null} [list] Items list\n             */\n\n            /**\n             * Constructs a new Items.\n             * @memberof NT.ClientPlayerAddItem\n             * @classdesc Represents an Items.\n             * @implements IItems\n             * @constructor\n             * @param {NT.ClientPlayerAddItem.IItems=} [properties] Properties to set\n             */\n            function Items(properties) {\n                this.list = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Items list.\n             * @member {Array.<NT.IItem>} list\n             * @memberof NT.ClientPlayerAddItem.Items\n             * @instance\n             */\n            Items.prototype.list = $util.emptyArray;\n\n            /**\n             * Creates a new Items instance using the specified properties.\n             * @function create\n             * @memberof NT.ClientPlayerAddItem.Items\n             * @static\n             * @param {NT.ClientPlayerAddItem.IItems=} [properties] Properties to set\n             * @returns {NT.ClientPlayerAddItem.Items} Items instance\n             */\n            Items.create = function create(properties) {\n                return new Items(properties);\n            };\n\n            /**\n             * Encodes the specified Items message. Does not implicitly {@link NT.ClientPlayerAddItem.Items.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ClientPlayerAddItem.Items\n             * @static\n             * @param {NT.ClientPlayerAddItem.IItems} message Items message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Items.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.list != null && message.list.length)\n                    for (let i = 0; i < message.list.length; ++i)\n                        $root.NT.Item.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Items message, length delimited. Does not implicitly {@link NT.ClientPlayerAddItem.Items.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ClientPlayerAddItem.Items\n             * @static\n             * @param {NT.ClientPlayerAddItem.IItems} message Items message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Items.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Items message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ClientPlayerAddItem.Items\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ClientPlayerAddItem.Items} Items\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Items.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerAddItem.Items();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            if (!(message.list && message.list.length))\n                                message.list = [];\n                            message.list.push($root.NT.Item.decode(reader, reader.uint32()));\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Items message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ClientPlayerAddItem.Items\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ClientPlayerAddItem.Items} Items\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Items.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Items message.\n             * @function verify\n             * @memberof NT.ClientPlayerAddItem.Items\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Items.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.list != null && message.hasOwnProperty(\"list\")) {\n                    if (!Array.isArray(message.list))\n                        return \"list: array expected\";\n                    for (let i = 0; i < message.list.length; ++i) {\n                        let error = $root.NT.Item.verify(message.list[i]);\n                        if (error)\n                            return \"list.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Items message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ClientPlayerAddItem.Items\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ClientPlayerAddItem.Items} Items\n             */\n            Items.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ClientPlayerAddItem.Items)\n                    return object;\n                let message = new $root.NT.ClientPlayerAddItem.Items();\n                if (object.list) {\n                    if (!Array.isArray(object.list))\n                        throw TypeError(\".NT.ClientPlayerAddItem.Items.list: array expected\");\n                    message.list = [];\n                    for (let i = 0; i < object.list.length; ++i) {\n                        if (typeof object.list[i] !== \"object\")\n                            throw TypeError(\".NT.ClientPlayerAddItem.Items.list: object expected\");\n                        message.list[i] = $root.NT.Item.fromObject(object.list[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Items message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ClientPlayerAddItem.Items\n             * @static\n             * @param {NT.ClientPlayerAddItem.Items} message Items\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Items.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.list = [];\n                if (message.list && message.list.length) {\n                    object.list = [];\n                    for (let j = 0; j < message.list.length; ++j)\n                        object.list[j] = $root.NT.Item.toObject(message.list[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Items to JSON.\n             * @function toJSON\n             * @memberof NT.ClientPlayerAddItem.Items\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Items.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Items\n             * @function getTypeUrl\n             * @memberof NT.ClientPlayerAddItem.Items\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Items.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ClientPlayerAddItem.Items\";\n            };\n\n            return Items;\n        })();\n\n        ClientPlayerAddItem.Entities = (function() {\n\n            /**\n             * Properties of an Entities.\n             * @memberof NT.ClientPlayerAddItem\n             * @interface IEntities\n             * @property {Array.<NT.IEntityItem>|null} [list] Entities list\n             */\n\n            /**\n             * Constructs a new Entities.\n             * @memberof NT.ClientPlayerAddItem\n             * @classdesc Represents an Entities.\n             * @implements IEntities\n             * @constructor\n             * @param {NT.ClientPlayerAddItem.IEntities=} [properties] Properties to set\n             */\n            function Entities(properties) {\n                this.list = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Entities list.\n             * @member {Array.<NT.IEntityItem>} list\n             * @memberof NT.ClientPlayerAddItem.Entities\n             * @instance\n             */\n            Entities.prototype.list = $util.emptyArray;\n\n            /**\n             * Creates a new Entities instance using the specified properties.\n             * @function create\n             * @memberof NT.ClientPlayerAddItem.Entities\n             * @static\n             * @param {NT.ClientPlayerAddItem.IEntities=} [properties] Properties to set\n             * @returns {NT.ClientPlayerAddItem.Entities} Entities instance\n             */\n            Entities.create = function create(properties) {\n                return new Entities(properties);\n            };\n\n            /**\n             * Encodes the specified Entities message. Does not implicitly {@link NT.ClientPlayerAddItem.Entities.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ClientPlayerAddItem.Entities\n             * @static\n             * @param {NT.ClientPlayerAddItem.IEntities} message Entities message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Entities.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.list != null && message.list.length)\n                    for (let i = 0; i < message.list.length; ++i)\n                        $root.NT.EntityItem.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Entities message, length delimited. Does not implicitly {@link NT.ClientPlayerAddItem.Entities.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ClientPlayerAddItem.Entities\n             * @static\n             * @param {NT.ClientPlayerAddItem.IEntities} message Entities message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Entities.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Entities message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ClientPlayerAddItem.Entities\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ClientPlayerAddItem.Entities} Entities\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Entities.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerAddItem.Entities();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            if (!(message.list && message.list.length))\n                                message.list = [];\n                            message.list.push($root.NT.EntityItem.decode(reader, reader.uint32()));\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Entities message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ClientPlayerAddItem.Entities\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ClientPlayerAddItem.Entities} Entities\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Entities.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Entities message.\n             * @function verify\n             * @memberof NT.ClientPlayerAddItem.Entities\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Entities.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.list != null && message.hasOwnProperty(\"list\")) {\n                    if (!Array.isArray(message.list))\n                        return \"list: array expected\";\n                    for (let i = 0; i < message.list.length; ++i) {\n                        let error = $root.NT.EntityItem.verify(message.list[i]);\n                        if (error)\n                            return \"list.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Entities message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ClientPlayerAddItem.Entities\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ClientPlayerAddItem.Entities} Entities\n             */\n            Entities.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ClientPlayerAddItem.Entities)\n                    return object;\n                let message = new $root.NT.ClientPlayerAddItem.Entities();\n                if (object.list) {\n                    if (!Array.isArray(object.list))\n                        throw TypeError(\".NT.ClientPlayerAddItem.Entities.list: array expected\");\n                    message.list = [];\n                    for (let i = 0; i < object.list.length; ++i) {\n                        if (typeof object.list[i] !== \"object\")\n                            throw TypeError(\".NT.ClientPlayerAddItem.Entities.list: object expected\");\n                        message.list[i] = $root.NT.EntityItem.fromObject(object.list[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Entities message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ClientPlayerAddItem.Entities\n             * @static\n             * @param {NT.ClientPlayerAddItem.Entities} message Entities\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Entities.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.list = [];\n                if (message.list && message.list.length) {\n                    object.list = [];\n                    for (let j = 0; j < message.list.length; ++j)\n                        object.list[j] = $root.NT.EntityItem.toObject(message.list[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Entities to JSON.\n             * @function toJSON\n             * @memberof NT.ClientPlayerAddItem.Entities\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Entities.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Entities\n             * @function getTypeUrl\n             * @memberof NT.ClientPlayerAddItem.Entities\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Entities.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ClientPlayerAddItem.Entities\";\n            };\n\n            return Entities;\n        })();\n\n        return ClientPlayerAddItem;\n    })();\n\n    NT.ServerPlayerAddItem = (function() {\n\n        /**\n         * Properties of a ServerPlayerAddItem.\n         * @memberof NT\n         * @interface IServerPlayerAddItem\n         * @property {string|null} [userId] ServerPlayerAddItem userId\n         * @property {NT.ServerPlayerAddItem.ISpells|null} [spells] ServerPlayerAddItem spells\n         * @property {NT.ServerPlayerAddItem.IWands|null} [wands] ServerPlayerAddItem wands\n         * @property {NT.ServerPlayerAddItem.IItems|null} [flasks] ServerPlayerAddItem flasks\n         * @property {NT.ServerPlayerAddItem.IEntities|null} [objects] ServerPlayerAddItem objects\n         */\n\n        /**\n         * Constructs a new ServerPlayerAddItem.\n         * @memberof NT\n         * @classdesc Represents a ServerPlayerAddItem.\n         * @implements IServerPlayerAddItem\n         * @constructor\n         * @param {NT.IServerPlayerAddItem=} [properties] Properties to set\n         */\n        function ServerPlayerAddItem(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerPlayerAddItem userId.\n         * @member {string} userId\n         * @memberof NT.ServerPlayerAddItem\n         * @instance\n         */\n        ServerPlayerAddItem.prototype.userId = \"\";\n\n        /**\n         * ServerPlayerAddItem spells.\n         * @member {NT.ServerPlayerAddItem.ISpells|null|undefined} spells\n         * @memberof NT.ServerPlayerAddItem\n         * @instance\n         */\n        ServerPlayerAddItem.prototype.spells = null;\n\n        /**\n         * ServerPlayerAddItem wands.\n         * @member {NT.ServerPlayerAddItem.IWands|null|undefined} wands\n         * @memberof NT.ServerPlayerAddItem\n         * @instance\n         */\n        ServerPlayerAddItem.prototype.wands = null;\n\n        /**\n         * ServerPlayerAddItem flasks.\n         * @member {NT.ServerPlayerAddItem.IItems|null|undefined} flasks\n         * @memberof NT.ServerPlayerAddItem\n         * @instance\n         */\n        ServerPlayerAddItem.prototype.flasks = null;\n\n        /**\n         * ServerPlayerAddItem objects.\n         * @member {NT.ServerPlayerAddItem.IEntities|null|undefined} objects\n         * @memberof NT.ServerPlayerAddItem\n         * @instance\n         */\n        ServerPlayerAddItem.prototype.objects = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ServerPlayerAddItem item.\n         * @member {\"spells\"|\"wands\"|\"flasks\"|\"objects\"|undefined} item\n         * @memberof NT.ServerPlayerAddItem\n         * @instance\n         */\n        Object.defineProperty(ServerPlayerAddItem.prototype, \"item\", {\n            get: $util.oneOfGetter($oneOfFields = [\"spells\", \"wands\", \"flasks\", \"objects\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ServerPlayerAddItem instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerPlayerAddItem\n         * @static\n         * @param {NT.IServerPlayerAddItem=} [properties] Properties to set\n         * @returns {NT.ServerPlayerAddItem} ServerPlayerAddItem instance\n         */\n        ServerPlayerAddItem.create = function create(properties) {\n            return new ServerPlayerAddItem(properties);\n        };\n\n        /**\n         * Encodes the specified ServerPlayerAddItem message. Does not implicitly {@link NT.ServerPlayerAddItem.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerPlayerAddItem\n         * @static\n         * @param {NT.IServerPlayerAddItem} message ServerPlayerAddItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerAddItem.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.spells != null && Object.hasOwnProperty.call(message, \"spells\"))\n                $root.NT.ServerPlayerAddItem.Spells.encode(message.spells, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.wands != null && Object.hasOwnProperty.call(message, \"wands\"))\n                $root.NT.ServerPlayerAddItem.Wands.encode(message.wands, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.flasks != null && Object.hasOwnProperty.call(message, \"flasks\"))\n                $root.NT.ServerPlayerAddItem.Items.encode(message.flasks, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.objects != null && Object.hasOwnProperty.call(message, \"objects\"))\n                $root.NT.ServerPlayerAddItem.Entities.encode(message.objects, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerPlayerAddItem message, length delimited. Does not implicitly {@link NT.ServerPlayerAddItem.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerPlayerAddItem\n         * @static\n         * @param {NT.IServerPlayerAddItem} message ServerPlayerAddItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerAddItem.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerPlayerAddItem message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerPlayerAddItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerPlayerAddItem} ServerPlayerAddItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerAddItem.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerAddItem();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.spells = $root.NT.ServerPlayerAddItem.Spells.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.wands = $root.NT.ServerPlayerAddItem.Wands.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.flasks = $root.NT.ServerPlayerAddItem.Items.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.objects = $root.NT.ServerPlayerAddItem.Entities.decode(reader, reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerPlayerAddItem message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerPlayerAddItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerPlayerAddItem} ServerPlayerAddItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerAddItem.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerPlayerAddItem message.\n         * @function verify\n         * @memberof NT.ServerPlayerAddItem\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerPlayerAddItem.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.spells != null && message.hasOwnProperty(\"spells\")) {\n                properties.item = 1;\n                {\n                    let error = $root.NT.ServerPlayerAddItem.Spells.verify(message.spells);\n                    if (error)\n                        return \"spells.\" + error;\n                }\n            }\n            if (message.wands != null && message.hasOwnProperty(\"wands\")) {\n                if (properties.item === 1)\n                    return \"item: multiple values\";\n                properties.item = 1;\n                {\n                    let error = $root.NT.ServerPlayerAddItem.Wands.verify(message.wands);\n                    if (error)\n                        return \"wands.\" + error;\n                }\n            }\n            if (message.flasks != null && message.hasOwnProperty(\"flasks\")) {\n                if (properties.item === 1)\n                    return \"item: multiple values\";\n                properties.item = 1;\n                {\n                    let error = $root.NT.ServerPlayerAddItem.Items.verify(message.flasks);\n                    if (error)\n                        return \"flasks.\" + error;\n                }\n            }\n            if (message.objects != null && message.hasOwnProperty(\"objects\")) {\n                if (properties.item === 1)\n                    return \"item: multiple values\";\n                properties.item = 1;\n                {\n                    let error = $root.NT.ServerPlayerAddItem.Entities.verify(message.objects);\n                    if (error)\n                        return \"objects.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerPlayerAddItem message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerPlayerAddItem\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerPlayerAddItem} ServerPlayerAddItem\n         */\n        ServerPlayerAddItem.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerPlayerAddItem)\n                return object;\n            let message = new $root.NT.ServerPlayerAddItem();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.spells != null) {\n                if (typeof object.spells !== \"object\")\n                    throw TypeError(\".NT.ServerPlayerAddItem.spells: object expected\");\n                message.spells = $root.NT.ServerPlayerAddItem.Spells.fromObject(object.spells);\n            }\n            if (object.wands != null) {\n                if (typeof object.wands !== \"object\")\n                    throw TypeError(\".NT.ServerPlayerAddItem.wands: object expected\");\n                message.wands = $root.NT.ServerPlayerAddItem.Wands.fromObject(object.wands);\n            }\n            if (object.flasks != null) {\n                if (typeof object.flasks !== \"object\")\n                    throw TypeError(\".NT.ServerPlayerAddItem.flasks: object expected\");\n                message.flasks = $root.NT.ServerPlayerAddItem.Items.fromObject(object.flasks);\n            }\n            if (object.objects != null) {\n                if (typeof object.objects !== \"object\")\n                    throw TypeError(\".NT.ServerPlayerAddItem.objects: object expected\");\n                message.objects = $root.NT.ServerPlayerAddItem.Entities.fromObject(object.objects);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerPlayerAddItem message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerPlayerAddItem\n         * @static\n         * @param {NT.ServerPlayerAddItem} message ServerPlayerAddItem\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerPlayerAddItem.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.userId = \"\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.spells != null && message.hasOwnProperty(\"spells\")) {\n                object.spells = $root.NT.ServerPlayerAddItem.Spells.toObject(message.spells, options);\n                if (options.oneofs)\n                    object.item = \"spells\";\n            }\n            if (message.wands != null && message.hasOwnProperty(\"wands\")) {\n                object.wands = $root.NT.ServerPlayerAddItem.Wands.toObject(message.wands, options);\n                if (options.oneofs)\n                    object.item = \"wands\";\n            }\n            if (message.flasks != null && message.hasOwnProperty(\"flasks\")) {\n                object.flasks = $root.NT.ServerPlayerAddItem.Items.toObject(message.flasks, options);\n                if (options.oneofs)\n                    object.item = \"flasks\";\n            }\n            if (message.objects != null && message.hasOwnProperty(\"objects\")) {\n                object.objects = $root.NT.ServerPlayerAddItem.Entities.toObject(message.objects, options);\n                if (options.oneofs)\n                    object.item = \"objects\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerPlayerAddItem to JSON.\n         * @function toJSON\n         * @memberof NT.ServerPlayerAddItem\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerPlayerAddItem.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerPlayerAddItem\n         * @function getTypeUrl\n         * @memberof NT.ServerPlayerAddItem\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerPlayerAddItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerPlayerAddItem\";\n        };\n\n        ServerPlayerAddItem.Spells = (function() {\n\n            /**\n             * Properties of a Spells.\n             * @memberof NT.ServerPlayerAddItem\n             * @interface ISpells\n             * @property {Array.<NT.ISpell>|null} [list] Spells list\n             */\n\n            /**\n             * Constructs a new Spells.\n             * @memberof NT.ServerPlayerAddItem\n             * @classdesc Represents a Spells.\n             * @implements ISpells\n             * @constructor\n             * @param {NT.ServerPlayerAddItem.ISpells=} [properties] Properties to set\n             */\n            function Spells(properties) {\n                this.list = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Spells list.\n             * @member {Array.<NT.ISpell>} list\n             * @memberof NT.ServerPlayerAddItem.Spells\n             * @instance\n             */\n            Spells.prototype.list = $util.emptyArray;\n\n            /**\n             * Creates a new Spells instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerPlayerAddItem.Spells\n             * @static\n             * @param {NT.ServerPlayerAddItem.ISpells=} [properties] Properties to set\n             * @returns {NT.ServerPlayerAddItem.Spells} Spells instance\n             */\n            Spells.create = function create(properties) {\n                return new Spells(properties);\n            };\n\n            /**\n             * Encodes the specified Spells message. Does not implicitly {@link NT.ServerPlayerAddItem.Spells.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerPlayerAddItem.Spells\n             * @static\n             * @param {NT.ServerPlayerAddItem.ISpells} message Spells message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Spells.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.list != null && message.list.length)\n                    for (let i = 0; i < message.list.length; ++i)\n                        $root.NT.Spell.encode(message.list[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Spells message, length delimited. Does not implicitly {@link NT.ServerPlayerAddItem.Spells.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerPlayerAddItem.Spells\n             * @static\n             * @param {NT.ServerPlayerAddItem.ISpells} message Spells message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Spells.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Spells message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerPlayerAddItem.Spells\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerPlayerAddItem.Spells} Spells\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Spells.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerAddItem.Spells();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            if (!(message.list && message.list.length))\n                                message.list = [];\n                            message.list.push($root.NT.Spell.decode(reader, reader.uint32()));\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Spells message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerPlayerAddItem.Spells\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerPlayerAddItem.Spells} Spells\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Spells.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Spells message.\n             * @function verify\n             * @memberof NT.ServerPlayerAddItem.Spells\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Spells.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.list != null && message.hasOwnProperty(\"list\")) {\n                    if (!Array.isArray(message.list))\n                        return \"list: array expected\";\n                    for (let i = 0; i < message.list.length; ++i) {\n                        let error = $root.NT.Spell.verify(message.list[i]);\n                        if (error)\n                            return \"list.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Spells message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerPlayerAddItem.Spells\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerPlayerAddItem.Spells} Spells\n             */\n            Spells.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerPlayerAddItem.Spells)\n                    return object;\n                let message = new $root.NT.ServerPlayerAddItem.Spells();\n                if (object.list) {\n                    if (!Array.isArray(object.list))\n                        throw TypeError(\".NT.ServerPlayerAddItem.Spells.list: array expected\");\n                    message.list = [];\n                    for (let i = 0; i < object.list.length; ++i) {\n                        if (typeof object.list[i] !== \"object\")\n                            throw TypeError(\".NT.ServerPlayerAddItem.Spells.list: object expected\");\n                        message.list[i] = $root.NT.Spell.fromObject(object.list[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Spells message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerPlayerAddItem.Spells\n             * @static\n             * @param {NT.ServerPlayerAddItem.Spells} message Spells\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Spells.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.list = [];\n                if (message.list && message.list.length) {\n                    object.list = [];\n                    for (let j = 0; j < message.list.length; ++j)\n                        object.list[j] = $root.NT.Spell.toObject(message.list[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Spells to JSON.\n             * @function toJSON\n             * @memberof NT.ServerPlayerAddItem.Spells\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Spells.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Spells\n             * @function getTypeUrl\n             * @memberof NT.ServerPlayerAddItem.Spells\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Spells.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerPlayerAddItem.Spells\";\n            };\n\n            return Spells;\n        })();\n\n        ServerPlayerAddItem.Wands = (function() {\n\n            /**\n             * Properties of a Wands.\n             * @memberof NT.ServerPlayerAddItem\n             * @interface IWands\n             * @property {Array.<NT.IWand>|null} [list] Wands list\n             */\n\n            /**\n             * Constructs a new Wands.\n             * @memberof NT.ServerPlayerAddItem\n             * @classdesc Represents a Wands.\n             * @implements IWands\n             * @constructor\n             * @param {NT.ServerPlayerAddItem.IWands=} [properties] Properties to set\n             */\n            function Wands(properties) {\n                this.list = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Wands list.\n             * @member {Array.<NT.IWand>} list\n             * @memberof NT.ServerPlayerAddItem.Wands\n             * @instance\n             */\n            Wands.prototype.list = $util.emptyArray;\n\n            /**\n             * Creates a new Wands instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerPlayerAddItem.Wands\n             * @static\n             * @param {NT.ServerPlayerAddItem.IWands=} [properties] Properties to set\n             * @returns {NT.ServerPlayerAddItem.Wands} Wands instance\n             */\n            Wands.create = function create(properties) {\n                return new Wands(properties);\n            };\n\n            /**\n             * Encodes the specified Wands message. Does not implicitly {@link NT.ServerPlayerAddItem.Wands.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerPlayerAddItem.Wands\n             * @static\n             * @param {NT.ServerPlayerAddItem.IWands} message Wands message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Wands.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.list != null && message.list.length)\n                    for (let i = 0; i < message.list.length; ++i)\n                        $root.NT.Wand.encode(message.list[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Wands message, length delimited. Does not implicitly {@link NT.ServerPlayerAddItem.Wands.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerPlayerAddItem.Wands\n             * @static\n             * @param {NT.ServerPlayerAddItem.IWands} message Wands message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Wands.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Wands message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerPlayerAddItem.Wands\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerPlayerAddItem.Wands} Wands\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Wands.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerAddItem.Wands();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 2: {\n                            if (!(message.list && message.list.length))\n                                message.list = [];\n                            message.list.push($root.NT.Wand.decode(reader, reader.uint32()));\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Wands message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerPlayerAddItem.Wands\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerPlayerAddItem.Wands} Wands\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Wands.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Wands message.\n             * @function verify\n             * @memberof NT.ServerPlayerAddItem.Wands\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Wands.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.list != null && message.hasOwnProperty(\"list\")) {\n                    if (!Array.isArray(message.list))\n                        return \"list: array expected\";\n                    for (let i = 0; i < message.list.length; ++i) {\n                        let error = $root.NT.Wand.verify(message.list[i]);\n                        if (error)\n                            return \"list.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Wands message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerPlayerAddItem.Wands\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerPlayerAddItem.Wands} Wands\n             */\n            Wands.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerPlayerAddItem.Wands)\n                    return object;\n                let message = new $root.NT.ServerPlayerAddItem.Wands();\n                if (object.list) {\n                    if (!Array.isArray(object.list))\n                        throw TypeError(\".NT.ServerPlayerAddItem.Wands.list: array expected\");\n                    message.list = [];\n                    for (let i = 0; i < object.list.length; ++i) {\n                        if (typeof object.list[i] !== \"object\")\n                            throw TypeError(\".NT.ServerPlayerAddItem.Wands.list: object expected\");\n                        message.list[i] = $root.NT.Wand.fromObject(object.list[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Wands message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerPlayerAddItem.Wands\n             * @static\n             * @param {NT.ServerPlayerAddItem.Wands} message Wands\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Wands.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.list = [];\n                if (message.list && message.list.length) {\n                    object.list = [];\n                    for (let j = 0; j < message.list.length; ++j)\n                        object.list[j] = $root.NT.Wand.toObject(message.list[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Wands to JSON.\n             * @function toJSON\n             * @memberof NT.ServerPlayerAddItem.Wands\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Wands.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Wands\n             * @function getTypeUrl\n             * @memberof NT.ServerPlayerAddItem.Wands\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Wands.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerPlayerAddItem.Wands\";\n            };\n\n            return Wands;\n        })();\n\n        ServerPlayerAddItem.Items = (function() {\n\n            /**\n             * Properties of an Items.\n             * @memberof NT.ServerPlayerAddItem\n             * @interface IItems\n             * @property {Array.<NT.IItem>|null} [list] Items list\n             */\n\n            /**\n             * Constructs a new Items.\n             * @memberof NT.ServerPlayerAddItem\n             * @classdesc Represents an Items.\n             * @implements IItems\n             * @constructor\n             * @param {NT.ServerPlayerAddItem.IItems=} [properties] Properties to set\n             */\n            function Items(properties) {\n                this.list = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Items list.\n             * @member {Array.<NT.IItem>} list\n             * @memberof NT.ServerPlayerAddItem.Items\n             * @instance\n             */\n            Items.prototype.list = $util.emptyArray;\n\n            /**\n             * Creates a new Items instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerPlayerAddItem.Items\n             * @static\n             * @param {NT.ServerPlayerAddItem.IItems=} [properties] Properties to set\n             * @returns {NT.ServerPlayerAddItem.Items} Items instance\n             */\n            Items.create = function create(properties) {\n                return new Items(properties);\n            };\n\n            /**\n             * Encodes the specified Items message. Does not implicitly {@link NT.ServerPlayerAddItem.Items.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerPlayerAddItem.Items\n             * @static\n             * @param {NT.ServerPlayerAddItem.IItems} message Items message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Items.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.list != null && message.list.length)\n                    for (let i = 0; i < message.list.length; ++i)\n                        $root.NT.Item.encode(message.list[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Items message, length delimited. Does not implicitly {@link NT.ServerPlayerAddItem.Items.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerPlayerAddItem.Items\n             * @static\n             * @param {NT.ServerPlayerAddItem.IItems} message Items message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Items.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Items message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerPlayerAddItem.Items\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerPlayerAddItem.Items} Items\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Items.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerAddItem.Items();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 3: {\n                            if (!(message.list && message.list.length))\n                                message.list = [];\n                            message.list.push($root.NT.Item.decode(reader, reader.uint32()));\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Items message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerPlayerAddItem.Items\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerPlayerAddItem.Items} Items\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Items.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Items message.\n             * @function verify\n             * @memberof NT.ServerPlayerAddItem.Items\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Items.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.list != null && message.hasOwnProperty(\"list\")) {\n                    if (!Array.isArray(message.list))\n                        return \"list: array expected\";\n                    for (let i = 0; i < message.list.length; ++i) {\n                        let error = $root.NT.Item.verify(message.list[i]);\n                        if (error)\n                            return \"list.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Items message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerPlayerAddItem.Items\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerPlayerAddItem.Items} Items\n             */\n            Items.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerPlayerAddItem.Items)\n                    return object;\n                let message = new $root.NT.ServerPlayerAddItem.Items();\n                if (object.list) {\n                    if (!Array.isArray(object.list))\n                        throw TypeError(\".NT.ServerPlayerAddItem.Items.list: array expected\");\n                    message.list = [];\n                    for (let i = 0; i < object.list.length; ++i) {\n                        if (typeof object.list[i] !== \"object\")\n                            throw TypeError(\".NT.ServerPlayerAddItem.Items.list: object expected\");\n                        message.list[i] = $root.NT.Item.fromObject(object.list[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Items message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerPlayerAddItem.Items\n             * @static\n             * @param {NT.ServerPlayerAddItem.Items} message Items\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Items.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.list = [];\n                if (message.list && message.list.length) {\n                    object.list = [];\n                    for (let j = 0; j < message.list.length; ++j)\n                        object.list[j] = $root.NT.Item.toObject(message.list[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Items to JSON.\n             * @function toJSON\n             * @memberof NT.ServerPlayerAddItem.Items\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Items.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Items\n             * @function getTypeUrl\n             * @memberof NT.ServerPlayerAddItem.Items\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Items.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerPlayerAddItem.Items\";\n            };\n\n            return Items;\n        })();\n\n        ServerPlayerAddItem.Entities = (function() {\n\n            /**\n             * Properties of an Entities.\n             * @memberof NT.ServerPlayerAddItem\n             * @interface IEntities\n             * @property {Array.<NT.IEntityItem>|null} [list] Entities list\n             */\n\n            /**\n             * Constructs a new Entities.\n             * @memberof NT.ServerPlayerAddItem\n             * @classdesc Represents an Entities.\n             * @implements IEntities\n             * @constructor\n             * @param {NT.ServerPlayerAddItem.IEntities=} [properties] Properties to set\n             */\n            function Entities(properties) {\n                this.list = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Entities list.\n             * @member {Array.<NT.IEntityItem>} list\n             * @memberof NT.ServerPlayerAddItem.Entities\n             * @instance\n             */\n            Entities.prototype.list = $util.emptyArray;\n\n            /**\n             * Creates a new Entities instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerPlayerAddItem.Entities\n             * @static\n             * @param {NT.ServerPlayerAddItem.IEntities=} [properties] Properties to set\n             * @returns {NT.ServerPlayerAddItem.Entities} Entities instance\n             */\n            Entities.create = function create(properties) {\n                return new Entities(properties);\n            };\n\n            /**\n             * Encodes the specified Entities message. Does not implicitly {@link NT.ServerPlayerAddItem.Entities.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerPlayerAddItem.Entities\n             * @static\n             * @param {NT.ServerPlayerAddItem.IEntities} message Entities message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Entities.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.list != null && message.list.length)\n                    for (let i = 0; i < message.list.length; ++i)\n                        $root.NT.EntityItem.encode(message.list[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Entities message, length delimited. Does not implicitly {@link NT.ServerPlayerAddItem.Entities.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerPlayerAddItem.Entities\n             * @static\n             * @param {NT.ServerPlayerAddItem.IEntities} message Entities message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Entities.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an Entities message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerPlayerAddItem.Entities\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerPlayerAddItem.Entities} Entities\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Entities.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerAddItem.Entities();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 4: {\n                            if (!(message.list && message.list.length))\n                                message.list = [];\n                            message.list.push($root.NT.EntityItem.decode(reader, reader.uint32()));\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an Entities message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerPlayerAddItem.Entities\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerPlayerAddItem.Entities} Entities\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Entities.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an Entities message.\n             * @function verify\n             * @memberof NT.ServerPlayerAddItem.Entities\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Entities.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.list != null && message.hasOwnProperty(\"list\")) {\n                    if (!Array.isArray(message.list))\n                        return \"list: array expected\";\n                    for (let i = 0; i < message.list.length; ++i) {\n                        let error = $root.NT.EntityItem.verify(message.list[i]);\n                        if (error)\n                            return \"list.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates an Entities message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerPlayerAddItem.Entities\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerPlayerAddItem.Entities} Entities\n             */\n            Entities.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerPlayerAddItem.Entities)\n                    return object;\n                let message = new $root.NT.ServerPlayerAddItem.Entities();\n                if (object.list) {\n                    if (!Array.isArray(object.list))\n                        throw TypeError(\".NT.ServerPlayerAddItem.Entities.list: array expected\");\n                    message.list = [];\n                    for (let i = 0; i < object.list.length; ++i) {\n                        if (typeof object.list[i] !== \"object\")\n                            throw TypeError(\".NT.ServerPlayerAddItem.Entities.list: object expected\");\n                        message.list[i] = $root.NT.EntityItem.fromObject(object.list[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an Entities message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerPlayerAddItem.Entities\n             * @static\n             * @param {NT.ServerPlayerAddItem.Entities} message Entities\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Entities.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.list = [];\n                if (message.list && message.list.length) {\n                    object.list = [];\n                    for (let j = 0; j < message.list.length; ++j)\n                        object.list[j] = $root.NT.EntityItem.toObject(message.list[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Entities to JSON.\n             * @function toJSON\n             * @memberof NT.ServerPlayerAddItem.Entities\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Entities.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Entities\n             * @function getTypeUrl\n             * @memberof NT.ServerPlayerAddItem.Entities\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Entities.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerPlayerAddItem.Entities\";\n            };\n\n            return Entities;\n        })();\n\n        return ServerPlayerAddItem;\n    })();\n\n    NT.ClientPlayerTakeItem = (function() {\n\n        /**\n         * Properties of a ClientPlayerTakeItem.\n         * @memberof NT\n         * @interface IClientPlayerTakeItem\n         * @property {string|null} [id] ClientPlayerTakeItem id\n         */\n\n        /**\n         * Constructs a new ClientPlayerTakeItem.\n         * @memberof NT\n         * @classdesc Represents a ClientPlayerTakeItem.\n         * @implements IClientPlayerTakeItem\n         * @constructor\n         * @param {NT.IClientPlayerTakeItem=} [properties] Properties to set\n         */\n        function ClientPlayerTakeItem(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientPlayerTakeItem id.\n         * @member {string} id\n         * @memberof NT.ClientPlayerTakeItem\n         * @instance\n         */\n        ClientPlayerTakeItem.prototype.id = \"\";\n\n        /**\n         * Creates a new ClientPlayerTakeItem instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientPlayerTakeItem\n         * @static\n         * @param {NT.IClientPlayerTakeItem=} [properties] Properties to set\n         * @returns {NT.ClientPlayerTakeItem} ClientPlayerTakeItem instance\n         */\n        ClientPlayerTakeItem.create = function create(properties) {\n            return new ClientPlayerTakeItem(properties);\n        };\n\n        /**\n         * Encodes the specified ClientPlayerTakeItem message. Does not implicitly {@link NT.ClientPlayerTakeItem.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientPlayerTakeItem\n         * @static\n         * @param {NT.IClientPlayerTakeItem} message ClientPlayerTakeItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerTakeItem.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientPlayerTakeItem message, length delimited. Does not implicitly {@link NT.ClientPlayerTakeItem.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientPlayerTakeItem\n         * @static\n         * @param {NT.IClientPlayerTakeItem} message ClientPlayerTakeItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerTakeItem.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientPlayerTakeItem message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientPlayerTakeItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientPlayerTakeItem} ClientPlayerTakeItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerTakeItem.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerTakeItem();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientPlayerTakeItem message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientPlayerTakeItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientPlayerTakeItem} ClientPlayerTakeItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerTakeItem.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientPlayerTakeItem message.\n         * @function verify\n         * @memberof NT.ClientPlayerTakeItem\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientPlayerTakeItem.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientPlayerTakeItem message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientPlayerTakeItem\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientPlayerTakeItem} ClientPlayerTakeItem\n         */\n        ClientPlayerTakeItem.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientPlayerTakeItem)\n                return object;\n            let message = new $root.NT.ClientPlayerTakeItem();\n            if (object.id != null)\n                message.id = String(object.id);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientPlayerTakeItem message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientPlayerTakeItem\n         * @static\n         * @param {NT.ClientPlayerTakeItem} message ClientPlayerTakeItem\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientPlayerTakeItem.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.id = \"\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            return object;\n        };\n\n        /**\n         * Converts this ClientPlayerTakeItem to JSON.\n         * @function toJSON\n         * @memberof NT.ClientPlayerTakeItem\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientPlayerTakeItem.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientPlayerTakeItem\n         * @function getTypeUrl\n         * @memberof NT.ClientPlayerTakeItem\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientPlayerTakeItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientPlayerTakeItem\";\n        };\n\n        return ClientPlayerTakeItem;\n    })();\n\n    NT.ServerPlayerTakeItem = (function() {\n\n        /**\n         * Properties of a ServerPlayerTakeItem.\n         * @memberof NT\n         * @interface IServerPlayerTakeItem\n         * @property {string|null} [userId] ServerPlayerTakeItem userId\n         * @property {string|null} [id] ServerPlayerTakeItem id\n         */\n\n        /**\n         * Constructs a new ServerPlayerTakeItem.\n         * @memberof NT\n         * @classdesc Represents a ServerPlayerTakeItem.\n         * @implements IServerPlayerTakeItem\n         * @constructor\n         * @param {NT.IServerPlayerTakeItem=} [properties] Properties to set\n         */\n        function ServerPlayerTakeItem(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerPlayerTakeItem userId.\n         * @member {string} userId\n         * @memberof NT.ServerPlayerTakeItem\n         * @instance\n         */\n        ServerPlayerTakeItem.prototype.userId = \"\";\n\n        /**\n         * ServerPlayerTakeItem id.\n         * @member {string} id\n         * @memberof NT.ServerPlayerTakeItem\n         * @instance\n         */\n        ServerPlayerTakeItem.prototype.id = \"\";\n\n        /**\n         * Creates a new ServerPlayerTakeItem instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerPlayerTakeItem\n         * @static\n         * @param {NT.IServerPlayerTakeItem=} [properties] Properties to set\n         * @returns {NT.ServerPlayerTakeItem} ServerPlayerTakeItem instance\n         */\n        ServerPlayerTakeItem.create = function create(properties) {\n            return new ServerPlayerTakeItem(properties);\n        };\n\n        /**\n         * Encodes the specified ServerPlayerTakeItem message. Does not implicitly {@link NT.ServerPlayerTakeItem.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerPlayerTakeItem\n         * @static\n         * @param {NT.IServerPlayerTakeItem} message ServerPlayerTakeItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerTakeItem.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.id);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerPlayerTakeItem message, length delimited. Does not implicitly {@link NT.ServerPlayerTakeItem.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerPlayerTakeItem\n         * @static\n         * @param {NT.IServerPlayerTakeItem} message ServerPlayerTakeItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerTakeItem.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerPlayerTakeItem message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerPlayerTakeItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerPlayerTakeItem} ServerPlayerTakeItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerTakeItem.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerTakeItem();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.id = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerPlayerTakeItem message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerPlayerTakeItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerPlayerTakeItem} ServerPlayerTakeItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerTakeItem.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerPlayerTakeItem message.\n         * @function verify\n         * @memberof NT.ServerPlayerTakeItem\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerPlayerTakeItem.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerPlayerTakeItem message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerPlayerTakeItem\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerPlayerTakeItem} ServerPlayerTakeItem\n         */\n        ServerPlayerTakeItem.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerPlayerTakeItem)\n                return object;\n            let message = new $root.NT.ServerPlayerTakeItem();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.id != null)\n                message.id = String(object.id);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerPlayerTakeItem message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerPlayerTakeItem\n         * @static\n         * @param {NT.ServerPlayerTakeItem} message ServerPlayerTakeItem\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerPlayerTakeItem.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.id = \"\";\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            return object;\n        };\n\n        /**\n         * Converts this ServerPlayerTakeItem to JSON.\n         * @function toJSON\n         * @memberof NT.ServerPlayerTakeItem\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerPlayerTakeItem.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerPlayerTakeItem\n         * @function getTypeUrl\n         * @memberof NT.ServerPlayerTakeItem\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerPlayerTakeItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerPlayerTakeItem\";\n        };\n\n        return ServerPlayerTakeItem;\n    })();\n\n    NT.ClientChat = (function() {\n\n        /**\n         * Properties of a ClientChat.\n         * @memberof NT\n         * @interface IClientChat\n         * @property {string|null} [message] ClientChat message\n         */\n\n        /**\n         * Constructs a new ClientChat.\n         * @memberof NT\n         * @classdesc Represents a ClientChat.\n         * @implements IClientChat\n         * @constructor\n         * @param {NT.IClientChat=} [properties] Properties to set\n         */\n        function ClientChat(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientChat message.\n         * @member {string} message\n         * @memberof NT.ClientChat\n         * @instance\n         */\n        ClientChat.prototype.message = \"\";\n\n        /**\n         * Creates a new ClientChat instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientChat\n         * @static\n         * @param {NT.IClientChat=} [properties] Properties to set\n         * @returns {NT.ClientChat} ClientChat instance\n         */\n        ClientChat.create = function create(properties) {\n            return new ClientChat(properties);\n        };\n\n        /**\n         * Encodes the specified ClientChat message. Does not implicitly {@link NT.ClientChat.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientChat\n         * @static\n         * @param {NT.IClientChat} message ClientChat message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientChat.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientChat message, length delimited. Does not implicitly {@link NT.ClientChat.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientChat\n         * @static\n         * @param {NT.IClientChat} message ClientChat message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientChat.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientChat message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientChat\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientChat} ClientChat\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientChat.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientChat();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.message = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientChat message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientChat\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientChat} ClientChat\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientChat.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientChat message.\n         * @function verify\n         * @memberof NT.ClientChat\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientChat.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                if (!$util.isString(message.message))\n                    return \"message: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientChat message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientChat\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientChat} ClientChat\n         */\n        ClientChat.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientChat)\n                return object;\n            let message = new $root.NT.ClientChat();\n            if (object.message != null)\n                message.message = String(object.message);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientChat message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientChat\n         * @static\n         * @param {NT.ClientChat} message ClientChat\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientChat.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.message = \"\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            return object;\n        };\n\n        /**\n         * Converts this ClientChat to JSON.\n         * @function toJSON\n         * @memberof NT.ClientChat\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientChat.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientChat\n         * @function getTypeUrl\n         * @memberof NT.ClientChat\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientChat.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientChat\";\n        };\n\n        return ClientChat;\n    })();\n\n    NT.ServerChat = (function() {\n\n        /**\n         * Properties of a ServerChat.\n         * @memberof NT\n         * @interface IServerChat\n         * @property {string|null} [id] ServerChat id\n         * @property {string|null} [userId] ServerChat userId\n         * @property {string|null} [name] ServerChat name\n         * @property {string|null} [message] ServerChat message\n         */\n\n        /**\n         * Constructs a new ServerChat.\n         * @memberof NT\n         * @classdesc Represents a ServerChat.\n         * @implements IServerChat\n         * @constructor\n         * @param {NT.IServerChat=} [properties] Properties to set\n         */\n        function ServerChat(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerChat id.\n         * @member {string} id\n         * @memberof NT.ServerChat\n         * @instance\n         */\n        ServerChat.prototype.id = \"\";\n\n        /**\n         * ServerChat userId.\n         * @member {string} userId\n         * @memberof NT.ServerChat\n         * @instance\n         */\n        ServerChat.prototype.userId = \"\";\n\n        /**\n         * ServerChat name.\n         * @member {string} name\n         * @memberof NT.ServerChat\n         * @instance\n         */\n        ServerChat.prototype.name = \"\";\n\n        /**\n         * ServerChat message.\n         * @member {string} message\n         * @memberof NT.ServerChat\n         * @instance\n         */\n        ServerChat.prototype.message = \"\";\n\n        /**\n         * Creates a new ServerChat instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerChat\n         * @static\n         * @param {NT.IServerChat=} [properties] Properties to set\n         * @returns {NT.ServerChat} ServerChat instance\n         */\n        ServerChat.create = function create(properties) {\n            return new ServerChat(properties);\n        };\n\n        /**\n         * Encodes the specified ServerChat message. Does not implicitly {@link NT.ServerChat.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerChat\n         * @static\n         * @param {NT.IServerChat} message ServerChat message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerChat.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.userId);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.name);\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.message);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerChat message, length delimited. Does not implicitly {@link NT.ServerChat.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerChat\n         * @static\n         * @param {NT.IServerChat} message ServerChat message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerChat.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerChat message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerChat\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerChat} ServerChat\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerChat.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerChat();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.message = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerChat message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerChat\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerChat} ServerChat\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerChat.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerChat message.\n         * @function verify\n         * @memberof NT.ServerChat\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerChat.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                if (!$util.isString(message.message))\n                    return \"message: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerChat message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerChat\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerChat} ServerChat\n         */\n        ServerChat.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerChat)\n                return object;\n            let message = new $root.NT.ServerChat();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.message != null)\n                message.message = String(object.message);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerChat message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerChat\n         * @static\n         * @param {NT.ServerChat} message ServerChat\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerChat.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.id = \"\";\n                object.userId = \"\";\n                object.name = \"\";\n                object.message = \"\";\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            return object;\n        };\n\n        /**\n         * Converts this ServerChat to JSON.\n         * @function toJSON\n         * @memberof NT.ServerChat\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerChat.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerChat\n         * @function getTypeUrl\n         * @memberof NT.ServerChat\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerChat.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerChat\";\n        };\n\n        return ServerChat;\n    })();\n\n    NT.ServerStatsUpdate = (function() {\n\n        /**\n         * Properties of a ServerStatsUpdate.\n         * @memberof NT\n         * @interface IServerStatsUpdate\n         * @property {string|null} [data] ServerStatsUpdate data\n         */\n\n        /**\n         * Constructs a new ServerStatsUpdate.\n         * @memberof NT\n         * @classdesc Represents a ServerStatsUpdate.\n         * @implements IServerStatsUpdate\n         * @constructor\n         * @param {NT.IServerStatsUpdate=} [properties] Properties to set\n         */\n        function ServerStatsUpdate(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerStatsUpdate data.\n         * @member {string} data\n         * @memberof NT.ServerStatsUpdate\n         * @instance\n         */\n        ServerStatsUpdate.prototype.data = \"\";\n\n        /**\n         * Creates a new ServerStatsUpdate instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerStatsUpdate\n         * @static\n         * @param {NT.IServerStatsUpdate=} [properties] Properties to set\n         * @returns {NT.ServerStatsUpdate} ServerStatsUpdate instance\n         */\n        ServerStatsUpdate.create = function create(properties) {\n            return new ServerStatsUpdate(properties);\n        };\n\n        /**\n         * Encodes the specified ServerStatsUpdate message. Does not implicitly {@link NT.ServerStatsUpdate.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerStatsUpdate\n         * @static\n         * @param {NT.IServerStatsUpdate} message ServerStatsUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerStatsUpdate.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.data != null && Object.hasOwnProperty.call(message, \"data\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.data);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerStatsUpdate message, length delimited. Does not implicitly {@link NT.ServerStatsUpdate.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerStatsUpdate\n         * @static\n         * @param {NT.IServerStatsUpdate} message ServerStatsUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerStatsUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerStatsUpdate message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerStatsUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerStatsUpdate} ServerStatsUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerStatsUpdate.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerStatsUpdate();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.data = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerStatsUpdate message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerStatsUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerStatsUpdate} ServerStatsUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerStatsUpdate.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerStatsUpdate message.\n         * @function verify\n         * @memberof NT.ServerStatsUpdate\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerStatsUpdate.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                if (!$util.isString(message.data))\n                    return \"data: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerStatsUpdate message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerStatsUpdate\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerStatsUpdate} ServerStatsUpdate\n         */\n        ServerStatsUpdate.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerStatsUpdate)\n                return object;\n            let message = new $root.NT.ServerStatsUpdate();\n            if (object.data != null)\n                message.data = String(object.data);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerStatsUpdate message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerStatsUpdate\n         * @static\n         * @param {NT.ServerStatsUpdate} message ServerStatsUpdate\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerStatsUpdate.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.data = \"\";\n            if (message.data != null && message.hasOwnProperty(\"data\"))\n                object.data = message.data;\n            return object;\n        };\n\n        /**\n         * Converts this ServerStatsUpdate to JSON.\n         * @function toJSON\n         * @memberof NT.ServerStatsUpdate\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerStatsUpdate.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerStatsUpdate\n         * @function getTypeUrl\n         * @memberof NT.ServerStatsUpdate\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerStatsUpdate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerStatsUpdate\";\n        };\n\n        return ServerStatsUpdate;\n    })();\n\n    NT.ClientPlayerPickup = (function() {\n\n        /**\n         * Properties of a ClientPlayerPickup.\n         * @memberof NT\n         * @interface IClientPlayerPickup\n         * @property {NT.ClientPlayerPickup.IHeartPickup|null} [heart] ClientPlayerPickup heart\n         * @property {NT.ClientPlayerPickup.IOrbPickup|null} [orb] ClientPlayerPickup orb\n         */\n\n        /**\n         * Constructs a new ClientPlayerPickup.\n         * @memberof NT\n         * @classdesc Represents a ClientPlayerPickup.\n         * @implements IClientPlayerPickup\n         * @constructor\n         * @param {NT.IClientPlayerPickup=} [properties] Properties to set\n         */\n        function ClientPlayerPickup(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientPlayerPickup heart.\n         * @member {NT.ClientPlayerPickup.IHeartPickup|null|undefined} heart\n         * @memberof NT.ClientPlayerPickup\n         * @instance\n         */\n        ClientPlayerPickup.prototype.heart = null;\n\n        /**\n         * ClientPlayerPickup orb.\n         * @member {NT.ClientPlayerPickup.IOrbPickup|null|undefined} orb\n         * @memberof NT.ClientPlayerPickup\n         * @instance\n         */\n        ClientPlayerPickup.prototype.orb = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ClientPlayerPickup kind.\n         * @member {\"heart\"|\"orb\"|undefined} kind\n         * @memberof NT.ClientPlayerPickup\n         * @instance\n         */\n        Object.defineProperty(ClientPlayerPickup.prototype, \"kind\", {\n            get: $util.oneOfGetter($oneOfFields = [\"heart\", \"orb\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ClientPlayerPickup instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientPlayerPickup\n         * @static\n         * @param {NT.IClientPlayerPickup=} [properties] Properties to set\n         * @returns {NT.ClientPlayerPickup} ClientPlayerPickup instance\n         */\n        ClientPlayerPickup.create = function create(properties) {\n            return new ClientPlayerPickup(properties);\n        };\n\n        /**\n         * Encodes the specified ClientPlayerPickup message. Does not implicitly {@link NT.ClientPlayerPickup.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientPlayerPickup\n         * @static\n         * @param {NT.IClientPlayerPickup} message ClientPlayerPickup message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerPickup.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.heart != null && Object.hasOwnProperty.call(message, \"heart\"))\n                $root.NT.ClientPlayerPickup.HeartPickup.encode(message.heart, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.orb != null && Object.hasOwnProperty.call(message, \"orb\"))\n                $root.NT.ClientPlayerPickup.OrbPickup.encode(message.orb, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientPlayerPickup message, length delimited. Does not implicitly {@link NT.ClientPlayerPickup.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientPlayerPickup\n         * @static\n         * @param {NT.IClientPlayerPickup} message ClientPlayerPickup message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerPickup.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientPlayerPickup message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientPlayerPickup\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientPlayerPickup} ClientPlayerPickup\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerPickup.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerPickup();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.heart = $root.NT.ClientPlayerPickup.HeartPickup.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.orb = $root.NT.ClientPlayerPickup.OrbPickup.decode(reader, reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientPlayerPickup message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientPlayerPickup\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientPlayerPickup} ClientPlayerPickup\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerPickup.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientPlayerPickup message.\n         * @function verify\n         * @memberof NT.ClientPlayerPickup\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientPlayerPickup.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.heart != null && message.hasOwnProperty(\"heart\")) {\n                properties.kind = 1;\n                {\n                    let error = $root.NT.ClientPlayerPickup.HeartPickup.verify(message.heart);\n                    if (error)\n                        return \"heart.\" + error;\n                }\n            }\n            if (message.orb != null && message.hasOwnProperty(\"orb\")) {\n                if (properties.kind === 1)\n                    return \"kind: multiple values\";\n                properties.kind = 1;\n                {\n                    let error = $root.NT.ClientPlayerPickup.OrbPickup.verify(message.orb);\n                    if (error)\n                        return \"orb.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientPlayerPickup message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientPlayerPickup\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientPlayerPickup} ClientPlayerPickup\n         */\n        ClientPlayerPickup.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientPlayerPickup)\n                return object;\n            let message = new $root.NT.ClientPlayerPickup();\n            if (object.heart != null) {\n                if (typeof object.heart !== \"object\")\n                    throw TypeError(\".NT.ClientPlayerPickup.heart: object expected\");\n                message.heart = $root.NT.ClientPlayerPickup.HeartPickup.fromObject(object.heart);\n            }\n            if (object.orb != null) {\n                if (typeof object.orb !== \"object\")\n                    throw TypeError(\".NT.ClientPlayerPickup.orb: object expected\");\n                message.orb = $root.NT.ClientPlayerPickup.OrbPickup.fromObject(object.orb);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientPlayerPickup message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientPlayerPickup\n         * @static\n         * @param {NT.ClientPlayerPickup} message ClientPlayerPickup\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientPlayerPickup.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.heart != null && message.hasOwnProperty(\"heart\")) {\n                object.heart = $root.NT.ClientPlayerPickup.HeartPickup.toObject(message.heart, options);\n                if (options.oneofs)\n                    object.kind = \"heart\";\n            }\n            if (message.orb != null && message.hasOwnProperty(\"orb\")) {\n                object.orb = $root.NT.ClientPlayerPickup.OrbPickup.toObject(message.orb, options);\n                if (options.oneofs)\n                    object.kind = \"orb\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientPlayerPickup to JSON.\n         * @function toJSON\n         * @memberof NT.ClientPlayerPickup\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientPlayerPickup.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientPlayerPickup\n         * @function getTypeUrl\n         * @memberof NT.ClientPlayerPickup\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientPlayerPickup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientPlayerPickup\";\n        };\n\n        ClientPlayerPickup.HeartPickup = (function() {\n\n            /**\n             * Properties of a HeartPickup.\n             * @memberof NT.ClientPlayerPickup\n             * @interface IHeartPickup\n             * @property {boolean|null} [hpPerk] HeartPickup hpPerk\n             */\n\n            /**\n             * Constructs a new HeartPickup.\n             * @memberof NT.ClientPlayerPickup\n             * @classdesc Represents a HeartPickup.\n             * @implements IHeartPickup\n             * @constructor\n             * @param {NT.ClientPlayerPickup.IHeartPickup=} [properties] Properties to set\n             */\n            function HeartPickup(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * HeartPickup hpPerk.\n             * @member {boolean} hpPerk\n             * @memberof NT.ClientPlayerPickup.HeartPickup\n             * @instance\n             */\n            HeartPickup.prototype.hpPerk = false;\n\n            /**\n             * Creates a new HeartPickup instance using the specified properties.\n             * @function create\n             * @memberof NT.ClientPlayerPickup.HeartPickup\n             * @static\n             * @param {NT.ClientPlayerPickup.IHeartPickup=} [properties] Properties to set\n             * @returns {NT.ClientPlayerPickup.HeartPickup} HeartPickup instance\n             */\n            HeartPickup.create = function create(properties) {\n                return new HeartPickup(properties);\n            };\n\n            /**\n             * Encodes the specified HeartPickup message. Does not implicitly {@link NT.ClientPlayerPickup.HeartPickup.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ClientPlayerPickup.HeartPickup\n             * @static\n             * @param {NT.ClientPlayerPickup.IHeartPickup} message HeartPickup message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            HeartPickup.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.hpPerk != null && Object.hasOwnProperty.call(message, \"hpPerk\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.hpPerk);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified HeartPickup message, length delimited. Does not implicitly {@link NT.ClientPlayerPickup.HeartPickup.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ClientPlayerPickup.HeartPickup\n             * @static\n             * @param {NT.ClientPlayerPickup.IHeartPickup} message HeartPickup message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            HeartPickup.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a HeartPickup message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ClientPlayerPickup.HeartPickup\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ClientPlayerPickup.HeartPickup} HeartPickup\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            HeartPickup.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerPickup.HeartPickup();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.hpPerk = reader.bool();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a HeartPickup message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ClientPlayerPickup.HeartPickup\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ClientPlayerPickup.HeartPickup} HeartPickup\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            HeartPickup.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a HeartPickup message.\n             * @function verify\n             * @memberof NT.ClientPlayerPickup.HeartPickup\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            HeartPickup.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.hpPerk != null && message.hasOwnProperty(\"hpPerk\"))\n                    if (typeof message.hpPerk !== \"boolean\")\n                        return \"hpPerk: boolean expected\";\n                return null;\n            };\n\n            /**\n             * Creates a HeartPickup message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ClientPlayerPickup.HeartPickup\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ClientPlayerPickup.HeartPickup} HeartPickup\n             */\n            HeartPickup.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ClientPlayerPickup.HeartPickup)\n                    return object;\n                let message = new $root.NT.ClientPlayerPickup.HeartPickup();\n                if (object.hpPerk != null)\n                    message.hpPerk = Boolean(object.hpPerk);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a HeartPickup message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ClientPlayerPickup.HeartPickup\n             * @static\n             * @param {NT.ClientPlayerPickup.HeartPickup} message HeartPickup\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            HeartPickup.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults)\n                    object.hpPerk = false;\n                if (message.hpPerk != null && message.hasOwnProperty(\"hpPerk\"))\n                    object.hpPerk = message.hpPerk;\n                return object;\n            };\n\n            /**\n             * Converts this HeartPickup to JSON.\n             * @function toJSON\n             * @memberof NT.ClientPlayerPickup.HeartPickup\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            HeartPickup.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for HeartPickup\n             * @function getTypeUrl\n             * @memberof NT.ClientPlayerPickup.HeartPickup\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            HeartPickup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ClientPlayerPickup.HeartPickup\";\n            };\n\n            return HeartPickup;\n        })();\n\n        ClientPlayerPickup.OrbPickup = (function() {\n\n            /**\n             * Properties of an OrbPickup.\n             * @memberof NT.ClientPlayerPickup\n             * @interface IOrbPickup\n             * @property {number|null} [id] OrbPickup id\n             */\n\n            /**\n             * Constructs a new OrbPickup.\n             * @memberof NT.ClientPlayerPickup\n             * @classdesc Represents an OrbPickup.\n             * @implements IOrbPickup\n             * @constructor\n             * @param {NT.ClientPlayerPickup.IOrbPickup=} [properties] Properties to set\n             */\n            function OrbPickup(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * OrbPickup id.\n             * @member {number} id\n             * @memberof NT.ClientPlayerPickup.OrbPickup\n             * @instance\n             */\n            OrbPickup.prototype.id = 0;\n\n            /**\n             * Creates a new OrbPickup instance using the specified properties.\n             * @function create\n             * @memberof NT.ClientPlayerPickup.OrbPickup\n             * @static\n             * @param {NT.ClientPlayerPickup.IOrbPickup=} [properties] Properties to set\n             * @returns {NT.ClientPlayerPickup.OrbPickup} OrbPickup instance\n             */\n            OrbPickup.create = function create(properties) {\n                return new OrbPickup(properties);\n            };\n\n            /**\n             * Encodes the specified OrbPickup message. Does not implicitly {@link NT.ClientPlayerPickup.OrbPickup.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ClientPlayerPickup.OrbPickup\n             * @static\n             * @param {NT.ClientPlayerPickup.IOrbPickup} message OrbPickup message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            OrbPickup.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified OrbPickup message, length delimited. Does not implicitly {@link NT.ClientPlayerPickup.OrbPickup.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ClientPlayerPickup.OrbPickup\n             * @static\n             * @param {NT.ClientPlayerPickup.IOrbPickup} message OrbPickup message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            OrbPickup.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an OrbPickup message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ClientPlayerPickup.OrbPickup\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ClientPlayerPickup.OrbPickup} OrbPickup\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            OrbPickup.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerPickup.OrbPickup();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.id = reader.uint32();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an OrbPickup message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ClientPlayerPickup.OrbPickup\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ClientPlayerPickup.OrbPickup} OrbPickup\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            OrbPickup.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an OrbPickup message.\n             * @function verify\n             * @memberof NT.ClientPlayerPickup.OrbPickup\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            OrbPickup.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isInteger(message.id))\n                        return \"id: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates an OrbPickup message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ClientPlayerPickup.OrbPickup\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ClientPlayerPickup.OrbPickup} OrbPickup\n             */\n            OrbPickup.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ClientPlayerPickup.OrbPickup)\n                    return object;\n                let message = new $root.NT.ClientPlayerPickup.OrbPickup();\n                if (object.id != null)\n                    message.id = object.id >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an OrbPickup message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ClientPlayerPickup.OrbPickup\n             * @static\n             * @param {NT.ClientPlayerPickup.OrbPickup} message OrbPickup\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            OrbPickup.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults)\n                    object.id = 0;\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                return object;\n            };\n\n            /**\n             * Converts this OrbPickup to JSON.\n             * @function toJSON\n             * @memberof NT.ClientPlayerPickup.OrbPickup\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            OrbPickup.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for OrbPickup\n             * @function getTypeUrl\n             * @memberof NT.ClientPlayerPickup.OrbPickup\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            OrbPickup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ClientPlayerPickup.OrbPickup\";\n            };\n\n            return OrbPickup;\n        })();\n\n        return ClientPlayerPickup;\n    })();\n\n    NT.ServerPlayerPickup = (function() {\n\n        /**\n         * Properties of a ServerPlayerPickup.\n         * @memberof NT\n         * @interface IServerPlayerPickup\n         * @property {string|null} [userId] ServerPlayerPickup userId\n         * @property {NT.ServerPlayerPickup.IHeartPickup|null} [heart] ServerPlayerPickup heart\n         * @property {NT.ServerPlayerPickup.IOrbPickup|null} [orb] ServerPlayerPickup orb\n         */\n\n        /**\n         * Constructs a new ServerPlayerPickup.\n         * @memberof NT\n         * @classdesc Represents a ServerPlayerPickup.\n         * @implements IServerPlayerPickup\n         * @constructor\n         * @param {NT.IServerPlayerPickup=} [properties] Properties to set\n         */\n        function ServerPlayerPickup(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerPlayerPickup userId.\n         * @member {string} userId\n         * @memberof NT.ServerPlayerPickup\n         * @instance\n         */\n        ServerPlayerPickup.prototype.userId = \"\";\n\n        /**\n         * ServerPlayerPickup heart.\n         * @member {NT.ServerPlayerPickup.IHeartPickup|null|undefined} heart\n         * @memberof NT.ServerPlayerPickup\n         * @instance\n         */\n        ServerPlayerPickup.prototype.heart = null;\n\n        /**\n         * ServerPlayerPickup orb.\n         * @member {NT.ServerPlayerPickup.IOrbPickup|null|undefined} orb\n         * @memberof NT.ServerPlayerPickup\n         * @instance\n         */\n        ServerPlayerPickup.prototype.orb = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ServerPlayerPickup kind.\n         * @member {\"heart\"|\"orb\"|undefined} kind\n         * @memberof NT.ServerPlayerPickup\n         * @instance\n         */\n        Object.defineProperty(ServerPlayerPickup.prototype, \"kind\", {\n            get: $util.oneOfGetter($oneOfFields = [\"heart\", \"orb\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ServerPlayerPickup instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerPlayerPickup\n         * @static\n         * @param {NT.IServerPlayerPickup=} [properties] Properties to set\n         * @returns {NT.ServerPlayerPickup} ServerPlayerPickup instance\n         */\n        ServerPlayerPickup.create = function create(properties) {\n            return new ServerPlayerPickup(properties);\n        };\n\n        /**\n         * Encodes the specified ServerPlayerPickup message. Does not implicitly {@link NT.ServerPlayerPickup.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerPlayerPickup\n         * @static\n         * @param {NT.IServerPlayerPickup} message ServerPlayerPickup message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerPickup.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.heart != null && Object.hasOwnProperty.call(message, \"heart\"))\n                $root.NT.ServerPlayerPickup.HeartPickup.encode(message.heart, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.orb != null && Object.hasOwnProperty.call(message, \"orb\"))\n                $root.NT.ServerPlayerPickup.OrbPickup.encode(message.orb, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerPlayerPickup message, length delimited. Does not implicitly {@link NT.ServerPlayerPickup.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerPlayerPickup\n         * @static\n         * @param {NT.IServerPlayerPickup} message ServerPlayerPickup message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerPickup.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerPlayerPickup message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerPlayerPickup\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerPlayerPickup} ServerPlayerPickup\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerPickup.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerPickup();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.heart = $root.NT.ServerPlayerPickup.HeartPickup.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.orb = $root.NT.ServerPlayerPickup.OrbPickup.decode(reader, reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerPlayerPickup message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerPlayerPickup\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerPlayerPickup} ServerPlayerPickup\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerPickup.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerPlayerPickup message.\n         * @function verify\n         * @memberof NT.ServerPlayerPickup\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerPlayerPickup.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.heart != null && message.hasOwnProperty(\"heart\")) {\n                properties.kind = 1;\n                {\n                    let error = $root.NT.ServerPlayerPickup.HeartPickup.verify(message.heart);\n                    if (error)\n                        return \"heart.\" + error;\n                }\n            }\n            if (message.orb != null && message.hasOwnProperty(\"orb\")) {\n                if (properties.kind === 1)\n                    return \"kind: multiple values\";\n                properties.kind = 1;\n                {\n                    let error = $root.NT.ServerPlayerPickup.OrbPickup.verify(message.orb);\n                    if (error)\n                        return \"orb.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerPlayerPickup message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerPlayerPickup\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerPlayerPickup} ServerPlayerPickup\n         */\n        ServerPlayerPickup.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerPlayerPickup)\n                return object;\n            let message = new $root.NT.ServerPlayerPickup();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.heart != null) {\n                if (typeof object.heart !== \"object\")\n                    throw TypeError(\".NT.ServerPlayerPickup.heart: object expected\");\n                message.heart = $root.NT.ServerPlayerPickup.HeartPickup.fromObject(object.heart);\n            }\n            if (object.orb != null) {\n                if (typeof object.orb !== \"object\")\n                    throw TypeError(\".NT.ServerPlayerPickup.orb: object expected\");\n                message.orb = $root.NT.ServerPlayerPickup.OrbPickup.fromObject(object.orb);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerPlayerPickup message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerPlayerPickup\n         * @static\n         * @param {NT.ServerPlayerPickup} message ServerPlayerPickup\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerPlayerPickup.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.userId = \"\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.heart != null && message.hasOwnProperty(\"heart\")) {\n                object.heart = $root.NT.ServerPlayerPickup.HeartPickup.toObject(message.heart, options);\n                if (options.oneofs)\n                    object.kind = \"heart\";\n            }\n            if (message.orb != null && message.hasOwnProperty(\"orb\")) {\n                object.orb = $root.NT.ServerPlayerPickup.OrbPickup.toObject(message.orb, options);\n                if (options.oneofs)\n                    object.kind = \"orb\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerPlayerPickup to JSON.\n         * @function toJSON\n         * @memberof NT.ServerPlayerPickup\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerPlayerPickup.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerPlayerPickup\n         * @function getTypeUrl\n         * @memberof NT.ServerPlayerPickup\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerPlayerPickup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerPlayerPickup\";\n        };\n\n        ServerPlayerPickup.HeartPickup = (function() {\n\n            /**\n             * Properties of a HeartPickup.\n             * @memberof NT.ServerPlayerPickup\n             * @interface IHeartPickup\n             * @property {boolean|null} [hpPerk] HeartPickup hpPerk\n             */\n\n            /**\n             * Constructs a new HeartPickup.\n             * @memberof NT.ServerPlayerPickup\n             * @classdesc Represents a HeartPickup.\n             * @implements IHeartPickup\n             * @constructor\n             * @param {NT.ServerPlayerPickup.IHeartPickup=} [properties] Properties to set\n             */\n            function HeartPickup(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * HeartPickup hpPerk.\n             * @member {boolean} hpPerk\n             * @memberof NT.ServerPlayerPickup.HeartPickup\n             * @instance\n             */\n            HeartPickup.prototype.hpPerk = false;\n\n            /**\n             * Creates a new HeartPickup instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerPlayerPickup.HeartPickup\n             * @static\n             * @param {NT.ServerPlayerPickup.IHeartPickup=} [properties] Properties to set\n             * @returns {NT.ServerPlayerPickup.HeartPickup} HeartPickup instance\n             */\n            HeartPickup.create = function create(properties) {\n                return new HeartPickup(properties);\n            };\n\n            /**\n             * Encodes the specified HeartPickup message. Does not implicitly {@link NT.ServerPlayerPickup.HeartPickup.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerPlayerPickup.HeartPickup\n             * @static\n             * @param {NT.ServerPlayerPickup.IHeartPickup} message HeartPickup message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            HeartPickup.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.hpPerk != null && Object.hasOwnProperty.call(message, \"hpPerk\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).bool(message.hpPerk);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified HeartPickup message, length delimited. Does not implicitly {@link NT.ServerPlayerPickup.HeartPickup.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerPlayerPickup.HeartPickup\n             * @static\n             * @param {NT.ServerPlayerPickup.IHeartPickup} message HeartPickup message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            HeartPickup.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a HeartPickup message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerPlayerPickup.HeartPickup\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerPlayerPickup.HeartPickup} HeartPickup\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            HeartPickup.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerPickup.HeartPickup();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.hpPerk = reader.bool();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a HeartPickup message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerPlayerPickup.HeartPickup\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerPlayerPickup.HeartPickup} HeartPickup\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            HeartPickup.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a HeartPickup message.\n             * @function verify\n             * @memberof NT.ServerPlayerPickup.HeartPickup\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            HeartPickup.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.hpPerk != null && message.hasOwnProperty(\"hpPerk\"))\n                    if (typeof message.hpPerk !== \"boolean\")\n                        return \"hpPerk: boolean expected\";\n                return null;\n            };\n\n            /**\n             * Creates a HeartPickup message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerPlayerPickup.HeartPickup\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerPlayerPickup.HeartPickup} HeartPickup\n             */\n            HeartPickup.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerPlayerPickup.HeartPickup)\n                    return object;\n                let message = new $root.NT.ServerPlayerPickup.HeartPickup();\n                if (object.hpPerk != null)\n                    message.hpPerk = Boolean(object.hpPerk);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a HeartPickup message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerPlayerPickup.HeartPickup\n             * @static\n             * @param {NT.ServerPlayerPickup.HeartPickup} message HeartPickup\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            HeartPickup.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults)\n                    object.hpPerk = false;\n                if (message.hpPerk != null && message.hasOwnProperty(\"hpPerk\"))\n                    object.hpPerk = message.hpPerk;\n                return object;\n            };\n\n            /**\n             * Converts this HeartPickup to JSON.\n             * @function toJSON\n             * @memberof NT.ServerPlayerPickup.HeartPickup\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            HeartPickup.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for HeartPickup\n             * @function getTypeUrl\n             * @memberof NT.ServerPlayerPickup.HeartPickup\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            HeartPickup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerPlayerPickup.HeartPickup\";\n            };\n\n            return HeartPickup;\n        })();\n\n        ServerPlayerPickup.OrbPickup = (function() {\n\n            /**\n             * Properties of an OrbPickup.\n             * @memberof NT.ServerPlayerPickup\n             * @interface IOrbPickup\n             * @property {number|null} [id] OrbPickup id\n             */\n\n            /**\n             * Constructs a new OrbPickup.\n             * @memberof NT.ServerPlayerPickup\n             * @classdesc Represents an OrbPickup.\n             * @implements IOrbPickup\n             * @constructor\n             * @param {NT.ServerPlayerPickup.IOrbPickup=} [properties] Properties to set\n             */\n            function OrbPickup(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * OrbPickup id.\n             * @member {number} id\n             * @memberof NT.ServerPlayerPickup.OrbPickup\n             * @instance\n             */\n            OrbPickup.prototype.id = 0;\n\n            /**\n             * Creates a new OrbPickup instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerPlayerPickup.OrbPickup\n             * @static\n             * @param {NT.ServerPlayerPickup.IOrbPickup=} [properties] Properties to set\n             * @returns {NT.ServerPlayerPickup.OrbPickup} OrbPickup instance\n             */\n            OrbPickup.create = function create(properties) {\n                return new OrbPickup(properties);\n            };\n\n            /**\n             * Encodes the specified OrbPickup message. Does not implicitly {@link NT.ServerPlayerPickup.OrbPickup.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerPlayerPickup.OrbPickup\n             * @static\n             * @param {NT.ServerPlayerPickup.IOrbPickup} message OrbPickup message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            OrbPickup.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified OrbPickup message, length delimited. Does not implicitly {@link NT.ServerPlayerPickup.OrbPickup.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerPlayerPickup.OrbPickup\n             * @static\n             * @param {NT.ServerPlayerPickup.IOrbPickup} message OrbPickup message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            OrbPickup.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes an OrbPickup message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerPlayerPickup.OrbPickup\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerPlayerPickup.OrbPickup} OrbPickup\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            OrbPickup.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerPickup.OrbPickup();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.id = reader.uint32();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes an OrbPickup message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerPlayerPickup.OrbPickup\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerPlayerPickup.OrbPickup} OrbPickup\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            OrbPickup.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies an OrbPickup message.\n             * @function verify\n             * @memberof NT.ServerPlayerPickup.OrbPickup\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            OrbPickup.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isInteger(message.id))\n                        return \"id: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates an OrbPickup message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerPlayerPickup.OrbPickup\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerPlayerPickup.OrbPickup} OrbPickup\n             */\n            OrbPickup.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerPlayerPickup.OrbPickup)\n                    return object;\n                let message = new $root.NT.ServerPlayerPickup.OrbPickup();\n                if (object.id != null)\n                    message.id = object.id >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from an OrbPickup message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerPlayerPickup.OrbPickup\n             * @static\n             * @param {NT.ServerPlayerPickup.OrbPickup} message OrbPickup\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            OrbPickup.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults)\n                    object.id = 0;\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                return object;\n            };\n\n            /**\n             * Converts this OrbPickup to JSON.\n             * @function toJSON\n             * @memberof NT.ServerPlayerPickup.OrbPickup\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            OrbPickup.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for OrbPickup\n             * @function getTypeUrl\n             * @memberof NT.ServerPlayerPickup.OrbPickup\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            OrbPickup.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerPlayerPickup.OrbPickup\";\n            };\n\n            return OrbPickup;\n        })();\n\n        return ServerPlayerPickup;\n    })();\n\n    NT.ClientNemesisPickupItem = (function() {\n\n        /**\n         * Properties of a ClientNemesisPickupItem.\n         * @memberof NT\n         * @interface IClientNemesisPickupItem\n         * @property {string|null} [gameId] ClientNemesisPickupItem gameId\n         */\n\n        /**\n         * Constructs a new ClientNemesisPickupItem.\n         * @memberof NT\n         * @classdesc Represents a ClientNemesisPickupItem.\n         * @implements IClientNemesisPickupItem\n         * @constructor\n         * @param {NT.IClientNemesisPickupItem=} [properties] Properties to set\n         */\n        function ClientNemesisPickupItem(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientNemesisPickupItem gameId.\n         * @member {string} gameId\n         * @memberof NT.ClientNemesisPickupItem\n         * @instance\n         */\n        ClientNemesisPickupItem.prototype.gameId = \"\";\n\n        /**\n         * Creates a new ClientNemesisPickupItem instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientNemesisPickupItem\n         * @static\n         * @param {NT.IClientNemesisPickupItem=} [properties] Properties to set\n         * @returns {NT.ClientNemesisPickupItem} ClientNemesisPickupItem instance\n         */\n        ClientNemesisPickupItem.create = function create(properties) {\n            return new ClientNemesisPickupItem(properties);\n        };\n\n        /**\n         * Encodes the specified ClientNemesisPickupItem message. Does not implicitly {@link NT.ClientNemesisPickupItem.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientNemesisPickupItem\n         * @static\n         * @param {NT.IClientNemesisPickupItem} message ClientNemesisPickupItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientNemesisPickupItem.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.gameId != null && Object.hasOwnProperty.call(message, \"gameId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.gameId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientNemesisPickupItem message, length delimited. Does not implicitly {@link NT.ClientNemesisPickupItem.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientNemesisPickupItem\n         * @static\n         * @param {NT.IClientNemesisPickupItem} message ClientNemesisPickupItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientNemesisPickupItem.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientNemesisPickupItem message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientNemesisPickupItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientNemesisPickupItem} ClientNemesisPickupItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientNemesisPickupItem.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientNemesisPickupItem();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.gameId = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientNemesisPickupItem message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientNemesisPickupItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientNemesisPickupItem} ClientNemesisPickupItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientNemesisPickupItem.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientNemesisPickupItem message.\n         * @function verify\n         * @memberof NT.ClientNemesisPickupItem\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientNemesisPickupItem.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.gameId != null && message.hasOwnProperty(\"gameId\"))\n                if (!$util.isString(message.gameId))\n                    return \"gameId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientNemesisPickupItem message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientNemesisPickupItem\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientNemesisPickupItem} ClientNemesisPickupItem\n         */\n        ClientNemesisPickupItem.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientNemesisPickupItem)\n                return object;\n            let message = new $root.NT.ClientNemesisPickupItem();\n            if (object.gameId != null)\n                message.gameId = String(object.gameId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientNemesisPickupItem message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientNemesisPickupItem\n         * @static\n         * @param {NT.ClientNemesisPickupItem} message ClientNemesisPickupItem\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientNemesisPickupItem.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.gameId = \"\";\n            if (message.gameId != null && message.hasOwnProperty(\"gameId\"))\n                object.gameId = message.gameId;\n            return object;\n        };\n\n        /**\n         * Converts this ClientNemesisPickupItem to JSON.\n         * @function toJSON\n         * @memberof NT.ClientNemesisPickupItem\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientNemesisPickupItem.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientNemesisPickupItem\n         * @function getTypeUrl\n         * @memberof NT.ClientNemesisPickupItem\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientNemesisPickupItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientNemesisPickupItem\";\n        };\n\n        return ClientNemesisPickupItem;\n    })();\n\n    NT.ServerNemesisPickupItem = (function() {\n\n        /**\n         * Properties of a ServerNemesisPickupItem.\n         * @memberof NT\n         * @interface IServerNemesisPickupItem\n         * @property {string|null} [userId] ServerNemesisPickupItem userId\n         * @property {string|null} [gameId] ServerNemesisPickupItem gameId\n         */\n\n        /**\n         * Constructs a new ServerNemesisPickupItem.\n         * @memberof NT\n         * @classdesc Represents a ServerNemesisPickupItem.\n         * @implements IServerNemesisPickupItem\n         * @constructor\n         * @param {NT.IServerNemesisPickupItem=} [properties] Properties to set\n         */\n        function ServerNemesisPickupItem(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerNemesisPickupItem userId.\n         * @member {string} userId\n         * @memberof NT.ServerNemesisPickupItem\n         * @instance\n         */\n        ServerNemesisPickupItem.prototype.userId = \"\";\n\n        /**\n         * ServerNemesisPickupItem gameId.\n         * @member {string} gameId\n         * @memberof NT.ServerNemesisPickupItem\n         * @instance\n         */\n        ServerNemesisPickupItem.prototype.gameId = \"\";\n\n        /**\n         * Creates a new ServerNemesisPickupItem instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerNemesisPickupItem\n         * @static\n         * @param {NT.IServerNemesisPickupItem=} [properties] Properties to set\n         * @returns {NT.ServerNemesisPickupItem} ServerNemesisPickupItem instance\n         */\n        ServerNemesisPickupItem.create = function create(properties) {\n            return new ServerNemesisPickupItem(properties);\n        };\n\n        /**\n         * Encodes the specified ServerNemesisPickupItem message. Does not implicitly {@link NT.ServerNemesisPickupItem.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerNemesisPickupItem\n         * @static\n         * @param {NT.IServerNemesisPickupItem} message ServerNemesisPickupItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerNemesisPickupItem.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.gameId != null && Object.hasOwnProperty.call(message, \"gameId\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.gameId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerNemesisPickupItem message, length delimited. Does not implicitly {@link NT.ServerNemesisPickupItem.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerNemesisPickupItem\n         * @static\n         * @param {NT.IServerNemesisPickupItem} message ServerNemesisPickupItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerNemesisPickupItem.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerNemesisPickupItem message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerNemesisPickupItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerNemesisPickupItem} ServerNemesisPickupItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerNemesisPickupItem.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerNemesisPickupItem();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.gameId = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerNemesisPickupItem message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerNemesisPickupItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerNemesisPickupItem} ServerNemesisPickupItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerNemesisPickupItem.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerNemesisPickupItem message.\n         * @function verify\n         * @memberof NT.ServerNemesisPickupItem\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerNemesisPickupItem.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.gameId != null && message.hasOwnProperty(\"gameId\"))\n                if (!$util.isString(message.gameId))\n                    return \"gameId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerNemesisPickupItem message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerNemesisPickupItem\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerNemesisPickupItem} ServerNemesisPickupItem\n         */\n        ServerNemesisPickupItem.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerNemesisPickupItem)\n                return object;\n            let message = new $root.NT.ServerNemesisPickupItem();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.gameId != null)\n                message.gameId = String(object.gameId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerNemesisPickupItem message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerNemesisPickupItem\n         * @static\n         * @param {NT.ServerNemesisPickupItem} message ServerNemesisPickupItem\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerNemesisPickupItem.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.gameId = \"\";\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.gameId != null && message.hasOwnProperty(\"gameId\"))\n                object.gameId = message.gameId;\n            return object;\n        };\n\n        /**\n         * Converts this ServerNemesisPickupItem to JSON.\n         * @function toJSON\n         * @memberof NT.ServerNemesisPickupItem\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerNemesisPickupItem.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerNemesisPickupItem\n         * @function getTypeUrl\n         * @memberof NT.ServerNemesisPickupItem\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerNemesisPickupItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerNemesisPickupItem\";\n        };\n\n        return ServerNemesisPickupItem;\n    })();\n\n    NT.ClientNemesisAbility = (function() {\n\n        /**\n         * Properties of a ClientNemesisAbility.\n         * @memberof NT\n         * @interface IClientNemesisAbility\n         * @property {string|null} [gameId] ClientNemesisAbility gameId\n         */\n\n        /**\n         * Constructs a new ClientNemesisAbility.\n         * @memberof NT\n         * @classdesc Represents a ClientNemesisAbility.\n         * @implements IClientNemesisAbility\n         * @constructor\n         * @param {NT.IClientNemesisAbility=} [properties] Properties to set\n         */\n        function ClientNemesisAbility(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientNemesisAbility gameId.\n         * @member {string} gameId\n         * @memberof NT.ClientNemesisAbility\n         * @instance\n         */\n        ClientNemesisAbility.prototype.gameId = \"\";\n\n        /**\n         * Creates a new ClientNemesisAbility instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientNemesisAbility\n         * @static\n         * @param {NT.IClientNemesisAbility=} [properties] Properties to set\n         * @returns {NT.ClientNemesisAbility} ClientNemesisAbility instance\n         */\n        ClientNemesisAbility.create = function create(properties) {\n            return new ClientNemesisAbility(properties);\n        };\n\n        /**\n         * Encodes the specified ClientNemesisAbility message. Does not implicitly {@link NT.ClientNemesisAbility.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientNemesisAbility\n         * @static\n         * @param {NT.IClientNemesisAbility} message ClientNemesisAbility message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientNemesisAbility.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.gameId != null && Object.hasOwnProperty.call(message, \"gameId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.gameId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientNemesisAbility message, length delimited. Does not implicitly {@link NT.ClientNemesisAbility.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientNemesisAbility\n         * @static\n         * @param {NT.IClientNemesisAbility} message ClientNemesisAbility message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientNemesisAbility.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientNemesisAbility message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientNemesisAbility\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientNemesisAbility} ClientNemesisAbility\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientNemesisAbility.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientNemesisAbility();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.gameId = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientNemesisAbility message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientNemesisAbility\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientNemesisAbility} ClientNemesisAbility\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientNemesisAbility.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientNemesisAbility message.\n         * @function verify\n         * @memberof NT.ClientNemesisAbility\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientNemesisAbility.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.gameId != null && message.hasOwnProperty(\"gameId\"))\n                if (!$util.isString(message.gameId))\n                    return \"gameId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientNemesisAbility message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientNemesisAbility\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientNemesisAbility} ClientNemesisAbility\n         */\n        ClientNemesisAbility.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientNemesisAbility)\n                return object;\n            let message = new $root.NT.ClientNemesisAbility();\n            if (object.gameId != null)\n                message.gameId = String(object.gameId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientNemesisAbility message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientNemesisAbility\n         * @static\n         * @param {NT.ClientNemesisAbility} message ClientNemesisAbility\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientNemesisAbility.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.gameId = \"\";\n            if (message.gameId != null && message.hasOwnProperty(\"gameId\"))\n                object.gameId = message.gameId;\n            return object;\n        };\n\n        /**\n         * Converts this ClientNemesisAbility to JSON.\n         * @function toJSON\n         * @memberof NT.ClientNemesisAbility\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientNemesisAbility.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientNemesisAbility\n         * @function getTypeUrl\n         * @memberof NT.ClientNemesisAbility\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientNemesisAbility.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientNemesisAbility\";\n        };\n\n        return ClientNemesisAbility;\n    })();\n\n    NT.ServerNemesisAbility = (function() {\n\n        /**\n         * Properties of a ServerNemesisAbility.\n         * @memberof NT\n         * @interface IServerNemesisAbility\n         * @property {string|null} [userId] ServerNemesisAbility userId\n         * @property {string|null} [gameId] ServerNemesisAbility gameId\n         */\n\n        /**\n         * Constructs a new ServerNemesisAbility.\n         * @memberof NT\n         * @classdesc Represents a ServerNemesisAbility.\n         * @implements IServerNemesisAbility\n         * @constructor\n         * @param {NT.IServerNemesisAbility=} [properties] Properties to set\n         */\n        function ServerNemesisAbility(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerNemesisAbility userId.\n         * @member {string} userId\n         * @memberof NT.ServerNemesisAbility\n         * @instance\n         */\n        ServerNemesisAbility.prototype.userId = \"\";\n\n        /**\n         * ServerNemesisAbility gameId.\n         * @member {string} gameId\n         * @memberof NT.ServerNemesisAbility\n         * @instance\n         */\n        ServerNemesisAbility.prototype.gameId = \"\";\n\n        /**\n         * Creates a new ServerNemesisAbility instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerNemesisAbility\n         * @static\n         * @param {NT.IServerNemesisAbility=} [properties] Properties to set\n         * @returns {NT.ServerNemesisAbility} ServerNemesisAbility instance\n         */\n        ServerNemesisAbility.create = function create(properties) {\n            return new ServerNemesisAbility(properties);\n        };\n\n        /**\n         * Encodes the specified ServerNemesisAbility message. Does not implicitly {@link NT.ServerNemesisAbility.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerNemesisAbility\n         * @static\n         * @param {NT.IServerNemesisAbility} message ServerNemesisAbility message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerNemesisAbility.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.gameId != null && Object.hasOwnProperty.call(message, \"gameId\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.gameId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerNemesisAbility message, length delimited. Does not implicitly {@link NT.ServerNemesisAbility.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerNemesisAbility\n         * @static\n         * @param {NT.IServerNemesisAbility} message ServerNemesisAbility message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerNemesisAbility.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerNemesisAbility message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerNemesisAbility\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerNemesisAbility} ServerNemesisAbility\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerNemesisAbility.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerNemesisAbility();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.gameId = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerNemesisAbility message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerNemesisAbility\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerNemesisAbility} ServerNemesisAbility\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerNemesisAbility.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerNemesisAbility message.\n         * @function verify\n         * @memberof NT.ServerNemesisAbility\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerNemesisAbility.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.gameId != null && message.hasOwnProperty(\"gameId\"))\n                if (!$util.isString(message.gameId))\n                    return \"gameId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerNemesisAbility message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerNemesisAbility\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerNemesisAbility} ServerNemesisAbility\n         */\n        ServerNemesisAbility.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerNemesisAbility)\n                return object;\n            let message = new $root.NT.ServerNemesisAbility();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.gameId != null)\n                message.gameId = String(object.gameId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerNemesisAbility message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerNemesisAbility\n         * @static\n         * @param {NT.ServerNemesisAbility} message ServerNemesisAbility\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerNemesisAbility.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.gameId = \"\";\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.gameId != null && message.hasOwnProperty(\"gameId\"))\n                object.gameId = message.gameId;\n            return object;\n        };\n\n        /**\n         * Converts this ServerNemesisAbility to JSON.\n         * @function toJSON\n         * @memberof NT.ServerNemesisAbility\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerNemesisAbility.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerNemesisAbility\n         * @function getTypeUrl\n         * @memberof NT.ServerNemesisAbility\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerNemesisAbility.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerNemesisAbility\";\n        };\n\n        return ServerNemesisAbility;\n    })();\n\n    NT.ClientPlayerDeath = (function() {\n\n        /**\n         * Properties of a ClientPlayerDeath.\n         * @memberof NT\n         * @interface IClientPlayerDeath\n         * @property {boolean|null} [isWin] ClientPlayerDeath isWin\n         * @property {number|null} [gameTime] ClientPlayerDeath gameTime\n         */\n\n        /**\n         * Constructs a new ClientPlayerDeath.\n         * @memberof NT\n         * @classdesc Represents a ClientPlayerDeath.\n         * @implements IClientPlayerDeath\n         * @constructor\n         * @param {NT.IClientPlayerDeath=} [properties] Properties to set\n         */\n        function ClientPlayerDeath(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientPlayerDeath isWin.\n         * @member {boolean} isWin\n         * @memberof NT.ClientPlayerDeath\n         * @instance\n         */\n        ClientPlayerDeath.prototype.isWin = false;\n\n        /**\n         * ClientPlayerDeath gameTime.\n         * @member {number|null|undefined} gameTime\n         * @memberof NT.ClientPlayerDeath\n         * @instance\n         */\n        ClientPlayerDeath.prototype.gameTime = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ClientPlayerDeath _gameTime.\n         * @member {\"gameTime\"|undefined} _gameTime\n         * @memberof NT.ClientPlayerDeath\n         * @instance\n         */\n        Object.defineProperty(ClientPlayerDeath.prototype, \"_gameTime\", {\n            get: $util.oneOfGetter($oneOfFields = [\"gameTime\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ClientPlayerDeath instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientPlayerDeath\n         * @static\n         * @param {NT.IClientPlayerDeath=} [properties] Properties to set\n         * @returns {NT.ClientPlayerDeath} ClientPlayerDeath instance\n         */\n        ClientPlayerDeath.create = function create(properties) {\n            return new ClientPlayerDeath(properties);\n        };\n\n        /**\n         * Encodes the specified ClientPlayerDeath message. Does not implicitly {@link NT.ClientPlayerDeath.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientPlayerDeath\n         * @static\n         * @param {NT.IClientPlayerDeath} message ClientPlayerDeath message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerDeath.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.isWin != null && Object.hasOwnProperty.call(message, \"isWin\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.isWin);\n            if (message.gameTime != null && Object.hasOwnProperty.call(message, \"gameTime\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gameTime);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientPlayerDeath message, length delimited. Does not implicitly {@link NT.ClientPlayerDeath.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientPlayerDeath\n         * @static\n         * @param {NT.IClientPlayerDeath} message ClientPlayerDeath message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerDeath.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientPlayerDeath message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientPlayerDeath\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientPlayerDeath} ClientPlayerDeath\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerDeath.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerDeath();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.isWin = reader.bool();\n                        break;\n                    }\n                case 2: {\n                        message.gameTime = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientPlayerDeath message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientPlayerDeath\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientPlayerDeath} ClientPlayerDeath\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerDeath.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientPlayerDeath message.\n         * @function verify\n         * @memberof NT.ClientPlayerDeath\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientPlayerDeath.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.isWin != null && message.hasOwnProperty(\"isWin\"))\n                if (typeof message.isWin !== \"boolean\")\n                    return \"isWin: boolean expected\";\n            if (message.gameTime != null && message.hasOwnProperty(\"gameTime\")) {\n                properties._gameTime = 1;\n                if (!$util.isInteger(message.gameTime))\n                    return \"gameTime: integer expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientPlayerDeath message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientPlayerDeath\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientPlayerDeath} ClientPlayerDeath\n         */\n        ClientPlayerDeath.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientPlayerDeath)\n                return object;\n            let message = new $root.NT.ClientPlayerDeath();\n            if (object.isWin != null)\n                message.isWin = Boolean(object.isWin);\n            if (object.gameTime != null)\n                message.gameTime = object.gameTime >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientPlayerDeath message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientPlayerDeath\n         * @static\n         * @param {NT.ClientPlayerDeath} message ClientPlayerDeath\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientPlayerDeath.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.isWin = false;\n            if (message.isWin != null && message.hasOwnProperty(\"isWin\"))\n                object.isWin = message.isWin;\n            if (message.gameTime != null && message.hasOwnProperty(\"gameTime\")) {\n                object.gameTime = message.gameTime;\n                if (options.oneofs)\n                    object._gameTime = \"gameTime\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientPlayerDeath to JSON.\n         * @function toJSON\n         * @memberof NT.ClientPlayerDeath\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientPlayerDeath.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientPlayerDeath\n         * @function getTypeUrl\n         * @memberof NT.ClientPlayerDeath\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientPlayerDeath.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientPlayerDeath\";\n        };\n\n        return ClientPlayerDeath;\n    })();\n\n    NT.ServerPlayerDeath = (function() {\n\n        /**\n         * Properties of a ServerPlayerDeath.\n         * @memberof NT\n         * @interface IServerPlayerDeath\n         * @property {string|null} [userId] ServerPlayerDeath userId\n         * @property {boolean|null} [isWin] ServerPlayerDeath isWin\n         * @property {number|null} [gameTime] ServerPlayerDeath gameTime\n         */\n\n        /**\n         * Constructs a new ServerPlayerDeath.\n         * @memberof NT\n         * @classdesc Represents a ServerPlayerDeath.\n         * @implements IServerPlayerDeath\n         * @constructor\n         * @param {NT.IServerPlayerDeath=} [properties] Properties to set\n         */\n        function ServerPlayerDeath(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerPlayerDeath userId.\n         * @member {string} userId\n         * @memberof NT.ServerPlayerDeath\n         * @instance\n         */\n        ServerPlayerDeath.prototype.userId = \"\";\n\n        /**\n         * ServerPlayerDeath isWin.\n         * @member {boolean} isWin\n         * @memberof NT.ServerPlayerDeath\n         * @instance\n         */\n        ServerPlayerDeath.prototype.isWin = false;\n\n        /**\n         * ServerPlayerDeath gameTime.\n         * @member {number|null|undefined} gameTime\n         * @memberof NT.ServerPlayerDeath\n         * @instance\n         */\n        ServerPlayerDeath.prototype.gameTime = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ServerPlayerDeath _gameTime.\n         * @member {\"gameTime\"|undefined} _gameTime\n         * @memberof NT.ServerPlayerDeath\n         * @instance\n         */\n        Object.defineProperty(ServerPlayerDeath.prototype, \"_gameTime\", {\n            get: $util.oneOfGetter($oneOfFields = [\"gameTime\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ServerPlayerDeath instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerPlayerDeath\n         * @static\n         * @param {NT.IServerPlayerDeath=} [properties] Properties to set\n         * @returns {NT.ServerPlayerDeath} ServerPlayerDeath instance\n         */\n        ServerPlayerDeath.create = function create(properties) {\n            return new ServerPlayerDeath(properties);\n        };\n\n        /**\n         * Encodes the specified ServerPlayerDeath message. Does not implicitly {@link NT.ServerPlayerDeath.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerPlayerDeath\n         * @static\n         * @param {NT.IServerPlayerDeath} message ServerPlayerDeath message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerDeath.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.isWin != null && Object.hasOwnProperty.call(message, \"isWin\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isWin);\n            if (message.gameTime != null && Object.hasOwnProperty.call(message, \"gameTime\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gameTime);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerPlayerDeath message, length delimited. Does not implicitly {@link NT.ServerPlayerDeath.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerPlayerDeath\n         * @static\n         * @param {NT.IServerPlayerDeath} message ServerPlayerDeath message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerDeath.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerPlayerDeath message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerPlayerDeath\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerPlayerDeath} ServerPlayerDeath\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerDeath.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerDeath();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.isWin = reader.bool();\n                        break;\n                    }\n                case 3: {\n                        message.gameTime = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerPlayerDeath message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerPlayerDeath\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerPlayerDeath} ServerPlayerDeath\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerDeath.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerPlayerDeath message.\n         * @function verify\n         * @memberof NT.ServerPlayerDeath\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerPlayerDeath.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.isWin != null && message.hasOwnProperty(\"isWin\"))\n                if (typeof message.isWin !== \"boolean\")\n                    return \"isWin: boolean expected\";\n            if (message.gameTime != null && message.hasOwnProperty(\"gameTime\")) {\n                properties._gameTime = 1;\n                if (!$util.isInteger(message.gameTime))\n                    return \"gameTime: integer expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerPlayerDeath message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerPlayerDeath\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerPlayerDeath} ServerPlayerDeath\n         */\n        ServerPlayerDeath.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerPlayerDeath)\n                return object;\n            let message = new $root.NT.ServerPlayerDeath();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.isWin != null)\n                message.isWin = Boolean(object.isWin);\n            if (object.gameTime != null)\n                message.gameTime = object.gameTime >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerPlayerDeath message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerPlayerDeath\n         * @static\n         * @param {NT.ServerPlayerDeath} message ServerPlayerDeath\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerPlayerDeath.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.isWin = false;\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.isWin != null && message.hasOwnProperty(\"isWin\"))\n                object.isWin = message.isWin;\n            if (message.gameTime != null && message.hasOwnProperty(\"gameTime\")) {\n                object.gameTime = message.gameTime;\n                if (options.oneofs)\n                    object._gameTime = \"gameTime\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerPlayerDeath to JSON.\n         * @function toJSON\n         * @memberof NT.ServerPlayerDeath\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerPlayerDeath.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerPlayerDeath\n         * @function getTypeUrl\n         * @memberof NT.ServerPlayerDeath\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerPlayerDeath.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerPlayerDeath\";\n        };\n\n        return ServerPlayerDeath;\n    })();\n\n    NT.ClientPlayerNewGamePlus = (function() {\n\n        /**\n         * Properties of a ClientPlayerNewGamePlus.\n         * @memberof NT\n         * @interface IClientPlayerNewGamePlus\n         * @property {number|null} [amount] ClientPlayerNewGamePlus amount\n         */\n\n        /**\n         * Constructs a new ClientPlayerNewGamePlus.\n         * @memberof NT\n         * @classdesc Represents a ClientPlayerNewGamePlus.\n         * @implements IClientPlayerNewGamePlus\n         * @constructor\n         * @param {NT.IClientPlayerNewGamePlus=} [properties] Properties to set\n         */\n        function ClientPlayerNewGamePlus(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientPlayerNewGamePlus amount.\n         * @member {number} amount\n         * @memberof NT.ClientPlayerNewGamePlus\n         * @instance\n         */\n        ClientPlayerNewGamePlus.prototype.amount = 0;\n\n        /**\n         * Creates a new ClientPlayerNewGamePlus instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientPlayerNewGamePlus\n         * @static\n         * @param {NT.IClientPlayerNewGamePlus=} [properties] Properties to set\n         * @returns {NT.ClientPlayerNewGamePlus} ClientPlayerNewGamePlus instance\n         */\n        ClientPlayerNewGamePlus.create = function create(properties) {\n            return new ClientPlayerNewGamePlus(properties);\n        };\n\n        /**\n         * Encodes the specified ClientPlayerNewGamePlus message. Does not implicitly {@link NT.ClientPlayerNewGamePlus.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientPlayerNewGamePlus\n         * @static\n         * @param {NT.IClientPlayerNewGamePlus} message ClientPlayerNewGamePlus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerNewGamePlus.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.amount);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientPlayerNewGamePlus message, length delimited. Does not implicitly {@link NT.ClientPlayerNewGamePlus.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientPlayerNewGamePlus\n         * @static\n         * @param {NT.IClientPlayerNewGamePlus} message ClientPlayerNewGamePlus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerNewGamePlus.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientPlayerNewGamePlus message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientPlayerNewGamePlus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientPlayerNewGamePlus} ClientPlayerNewGamePlus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerNewGamePlus.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerNewGamePlus();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.amount = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientPlayerNewGamePlus message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientPlayerNewGamePlus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientPlayerNewGamePlus} ClientPlayerNewGamePlus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerNewGamePlus.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientPlayerNewGamePlus message.\n         * @function verify\n         * @memberof NT.ClientPlayerNewGamePlus\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientPlayerNewGamePlus.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                if (!$util.isInteger(message.amount))\n                    return \"amount: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientPlayerNewGamePlus message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientPlayerNewGamePlus\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientPlayerNewGamePlus} ClientPlayerNewGamePlus\n         */\n        ClientPlayerNewGamePlus.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientPlayerNewGamePlus)\n                return object;\n            let message = new $root.NT.ClientPlayerNewGamePlus();\n            if (object.amount != null)\n                message.amount = object.amount >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientPlayerNewGamePlus message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientPlayerNewGamePlus\n         * @static\n         * @param {NT.ClientPlayerNewGamePlus} message ClientPlayerNewGamePlus\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientPlayerNewGamePlus.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.amount = 0;\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                object.amount = message.amount;\n            return object;\n        };\n\n        /**\n         * Converts this ClientPlayerNewGamePlus to JSON.\n         * @function toJSON\n         * @memberof NT.ClientPlayerNewGamePlus\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientPlayerNewGamePlus.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientPlayerNewGamePlus\n         * @function getTypeUrl\n         * @memberof NT.ClientPlayerNewGamePlus\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientPlayerNewGamePlus.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientPlayerNewGamePlus\";\n        };\n\n        return ClientPlayerNewGamePlus;\n    })();\n\n    NT.ServerPlayerNewGamePlus = (function() {\n\n        /**\n         * Properties of a ServerPlayerNewGamePlus.\n         * @memberof NT\n         * @interface IServerPlayerNewGamePlus\n         * @property {string|null} [userId] ServerPlayerNewGamePlus userId\n         * @property {number|null} [amount] ServerPlayerNewGamePlus amount\n         */\n\n        /**\n         * Constructs a new ServerPlayerNewGamePlus.\n         * @memberof NT\n         * @classdesc Represents a ServerPlayerNewGamePlus.\n         * @implements IServerPlayerNewGamePlus\n         * @constructor\n         * @param {NT.IServerPlayerNewGamePlus=} [properties] Properties to set\n         */\n        function ServerPlayerNewGamePlus(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerPlayerNewGamePlus userId.\n         * @member {string} userId\n         * @memberof NT.ServerPlayerNewGamePlus\n         * @instance\n         */\n        ServerPlayerNewGamePlus.prototype.userId = \"\";\n\n        /**\n         * ServerPlayerNewGamePlus amount.\n         * @member {number} amount\n         * @memberof NT.ServerPlayerNewGamePlus\n         * @instance\n         */\n        ServerPlayerNewGamePlus.prototype.amount = 0;\n\n        /**\n         * Creates a new ServerPlayerNewGamePlus instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerPlayerNewGamePlus\n         * @static\n         * @param {NT.IServerPlayerNewGamePlus=} [properties] Properties to set\n         * @returns {NT.ServerPlayerNewGamePlus} ServerPlayerNewGamePlus instance\n         */\n        ServerPlayerNewGamePlus.create = function create(properties) {\n            return new ServerPlayerNewGamePlus(properties);\n        };\n\n        /**\n         * Encodes the specified ServerPlayerNewGamePlus message. Does not implicitly {@link NT.ServerPlayerNewGamePlus.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerPlayerNewGamePlus\n         * @static\n         * @param {NT.IServerPlayerNewGamePlus} message ServerPlayerNewGamePlus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerNewGamePlus.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.amount);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerPlayerNewGamePlus message, length delimited. Does not implicitly {@link NT.ServerPlayerNewGamePlus.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerPlayerNewGamePlus\n         * @static\n         * @param {NT.IServerPlayerNewGamePlus} message ServerPlayerNewGamePlus message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerNewGamePlus.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerPlayerNewGamePlus message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerPlayerNewGamePlus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerPlayerNewGamePlus} ServerPlayerNewGamePlus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerNewGamePlus.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerNewGamePlus();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.amount = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerPlayerNewGamePlus message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerPlayerNewGamePlus\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerPlayerNewGamePlus} ServerPlayerNewGamePlus\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerNewGamePlus.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerPlayerNewGamePlus message.\n         * @function verify\n         * @memberof NT.ServerPlayerNewGamePlus\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerPlayerNewGamePlus.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                if (!$util.isInteger(message.amount))\n                    return \"amount: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerPlayerNewGamePlus message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerPlayerNewGamePlus\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerPlayerNewGamePlus} ServerPlayerNewGamePlus\n         */\n        ServerPlayerNewGamePlus.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerPlayerNewGamePlus)\n                return object;\n            let message = new $root.NT.ServerPlayerNewGamePlus();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.amount != null)\n                message.amount = object.amount >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerPlayerNewGamePlus message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerPlayerNewGamePlus\n         * @static\n         * @param {NT.ServerPlayerNewGamePlus} message ServerPlayerNewGamePlus\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerPlayerNewGamePlus.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.amount = 0;\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                object.amount = message.amount;\n            return object;\n        };\n\n        /**\n         * Converts this ServerPlayerNewGamePlus to JSON.\n         * @function toJSON\n         * @memberof NT.ServerPlayerNewGamePlus\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerPlayerNewGamePlus.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerPlayerNewGamePlus\n         * @function getTypeUrl\n         * @memberof NT.ServerPlayerNewGamePlus\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerPlayerNewGamePlus.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerPlayerNewGamePlus\";\n        };\n\n        return ServerPlayerNewGamePlus;\n    })();\n\n    NT.ClientPlayerSecretHourglass = (function() {\n\n        /**\n         * Properties of a ClientPlayerSecretHourglass.\n         * @memberof NT\n         * @interface IClientPlayerSecretHourglass\n         * @property {string|null} [material] ClientPlayerSecretHourglass material\n         */\n\n        /**\n         * Constructs a new ClientPlayerSecretHourglass.\n         * @memberof NT\n         * @classdesc Represents a ClientPlayerSecretHourglass.\n         * @implements IClientPlayerSecretHourglass\n         * @constructor\n         * @param {NT.IClientPlayerSecretHourglass=} [properties] Properties to set\n         */\n        function ClientPlayerSecretHourglass(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientPlayerSecretHourglass material.\n         * @member {string} material\n         * @memberof NT.ClientPlayerSecretHourglass\n         * @instance\n         */\n        ClientPlayerSecretHourglass.prototype.material = \"\";\n\n        /**\n         * Creates a new ClientPlayerSecretHourglass instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientPlayerSecretHourglass\n         * @static\n         * @param {NT.IClientPlayerSecretHourglass=} [properties] Properties to set\n         * @returns {NT.ClientPlayerSecretHourglass} ClientPlayerSecretHourglass instance\n         */\n        ClientPlayerSecretHourglass.create = function create(properties) {\n            return new ClientPlayerSecretHourglass(properties);\n        };\n\n        /**\n         * Encodes the specified ClientPlayerSecretHourglass message. Does not implicitly {@link NT.ClientPlayerSecretHourglass.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientPlayerSecretHourglass\n         * @static\n         * @param {NT.IClientPlayerSecretHourglass} message ClientPlayerSecretHourglass message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerSecretHourglass.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.material != null && Object.hasOwnProperty.call(message, \"material\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.material);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientPlayerSecretHourglass message, length delimited. Does not implicitly {@link NT.ClientPlayerSecretHourglass.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientPlayerSecretHourglass\n         * @static\n         * @param {NT.IClientPlayerSecretHourglass} message ClientPlayerSecretHourglass message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientPlayerSecretHourglass.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientPlayerSecretHourglass message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientPlayerSecretHourglass\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientPlayerSecretHourglass} ClientPlayerSecretHourglass\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerSecretHourglass.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientPlayerSecretHourglass();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.material = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientPlayerSecretHourglass message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientPlayerSecretHourglass\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientPlayerSecretHourglass} ClientPlayerSecretHourglass\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientPlayerSecretHourglass.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientPlayerSecretHourglass message.\n         * @function verify\n         * @memberof NT.ClientPlayerSecretHourglass\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientPlayerSecretHourglass.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.material != null && message.hasOwnProperty(\"material\"))\n                if (!$util.isString(message.material))\n                    return \"material: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientPlayerSecretHourglass message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientPlayerSecretHourglass\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientPlayerSecretHourglass} ClientPlayerSecretHourglass\n         */\n        ClientPlayerSecretHourglass.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientPlayerSecretHourglass)\n                return object;\n            let message = new $root.NT.ClientPlayerSecretHourglass();\n            if (object.material != null)\n                message.material = String(object.material);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientPlayerSecretHourglass message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientPlayerSecretHourglass\n         * @static\n         * @param {NT.ClientPlayerSecretHourglass} message ClientPlayerSecretHourglass\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientPlayerSecretHourglass.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.material = \"\";\n            if (message.material != null && message.hasOwnProperty(\"material\"))\n                object.material = message.material;\n            return object;\n        };\n\n        /**\n         * Converts this ClientPlayerSecretHourglass to JSON.\n         * @function toJSON\n         * @memberof NT.ClientPlayerSecretHourglass\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientPlayerSecretHourglass.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientPlayerSecretHourglass\n         * @function getTypeUrl\n         * @memberof NT.ClientPlayerSecretHourglass\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientPlayerSecretHourglass.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientPlayerSecretHourglass\";\n        };\n\n        return ClientPlayerSecretHourglass;\n    })();\n\n    NT.ServerPlayerSecretHourglass = (function() {\n\n        /**\n         * Properties of a ServerPlayerSecretHourglass.\n         * @memberof NT\n         * @interface IServerPlayerSecretHourglass\n         * @property {string|null} [userId] ServerPlayerSecretHourglass userId\n         * @property {string|null} [material] ServerPlayerSecretHourglass material\n         */\n\n        /**\n         * Constructs a new ServerPlayerSecretHourglass.\n         * @memberof NT\n         * @classdesc Represents a ServerPlayerSecretHourglass.\n         * @implements IServerPlayerSecretHourglass\n         * @constructor\n         * @param {NT.IServerPlayerSecretHourglass=} [properties] Properties to set\n         */\n        function ServerPlayerSecretHourglass(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerPlayerSecretHourglass userId.\n         * @member {string} userId\n         * @memberof NT.ServerPlayerSecretHourglass\n         * @instance\n         */\n        ServerPlayerSecretHourglass.prototype.userId = \"\";\n\n        /**\n         * ServerPlayerSecretHourglass material.\n         * @member {string} material\n         * @memberof NT.ServerPlayerSecretHourglass\n         * @instance\n         */\n        ServerPlayerSecretHourglass.prototype.material = \"\";\n\n        /**\n         * Creates a new ServerPlayerSecretHourglass instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerPlayerSecretHourglass\n         * @static\n         * @param {NT.IServerPlayerSecretHourglass=} [properties] Properties to set\n         * @returns {NT.ServerPlayerSecretHourglass} ServerPlayerSecretHourglass instance\n         */\n        ServerPlayerSecretHourglass.create = function create(properties) {\n            return new ServerPlayerSecretHourglass(properties);\n        };\n\n        /**\n         * Encodes the specified ServerPlayerSecretHourglass message. Does not implicitly {@link NT.ServerPlayerSecretHourglass.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerPlayerSecretHourglass\n         * @static\n         * @param {NT.IServerPlayerSecretHourglass} message ServerPlayerSecretHourglass message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerSecretHourglass.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.material != null && Object.hasOwnProperty.call(message, \"material\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.material);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerPlayerSecretHourglass message, length delimited. Does not implicitly {@link NT.ServerPlayerSecretHourglass.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerPlayerSecretHourglass\n         * @static\n         * @param {NT.IServerPlayerSecretHourglass} message ServerPlayerSecretHourglass message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerPlayerSecretHourglass.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerPlayerSecretHourglass message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerPlayerSecretHourglass\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerPlayerSecretHourglass} ServerPlayerSecretHourglass\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerSecretHourglass.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerPlayerSecretHourglass();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.material = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerPlayerSecretHourglass message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerPlayerSecretHourglass\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerPlayerSecretHourglass} ServerPlayerSecretHourglass\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerPlayerSecretHourglass.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerPlayerSecretHourglass message.\n         * @function verify\n         * @memberof NT.ServerPlayerSecretHourglass\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerPlayerSecretHourglass.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.material != null && message.hasOwnProperty(\"material\"))\n                if (!$util.isString(message.material))\n                    return \"material: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerPlayerSecretHourglass message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerPlayerSecretHourglass\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerPlayerSecretHourglass} ServerPlayerSecretHourglass\n         */\n        ServerPlayerSecretHourglass.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerPlayerSecretHourglass)\n                return object;\n            let message = new $root.NT.ServerPlayerSecretHourglass();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.material != null)\n                message.material = String(object.material);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerPlayerSecretHourglass message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerPlayerSecretHourglass\n         * @static\n         * @param {NT.ServerPlayerSecretHourglass} message ServerPlayerSecretHourglass\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerPlayerSecretHourglass.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.material = \"\";\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.material != null && message.hasOwnProperty(\"material\"))\n                object.material = message.material;\n            return object;\n        };\n\n        /**\n         * Converts this ServerPlayerSecretHourglass to JSON.\n         * @function toJSON\n         * @memberof NT.ServerPlayerSecretHourglass\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerPlayerSecretHourglass.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerPlayerSecretHourglass\n         * @function getTypeUrl\n         * @memberof NT.ServerPlayerSecretHourglass\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerPlayerSecretHourglass.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerPlayerSecretHourglass\";\n        };\n\n        return ServerPlayerSecretHourglass;\n    })();\n\n    NT.ClientCustomModEvent = (function() {\n\n        /**\n         * Properties of a ClientCustomModEvent.\n         * @memberof NT\n         * @interface IClientCustomModEvent\n         * @property {string|null} [payload] ClientCustomModEvent payload\n         */\n\n        /**\n         * Constructs a new ClientCustomModEvent.\n         * @memberof NT\n         * @classdesc Represents a ClientCustomModEvent.\n         * @implements IClientCustomModEvent\n         * @constructor\n         * @param {NT.IClientCustomModEvent=} [properties] Properties to set\n         */\n        function ClientCustomModEvent(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientCustomModEvent payload.\n         * @member {string} payload\n         * @memberof NT.ClientCustomModEvent\n         * @instance\n         */\n        ClientCustomModEvent.prototype.payload = \"\";\n\n        /**\n         * Creates a new ClientCustomModEvent instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientCustomModEvent\n         * @static\n         * @param {NT.IClientCustomModEvent=} [properties] Properties to set\n         * @returns {NT.ClientCustomModEvent} ClientCustomModEvent instance\n         */\n        ClientCustomModEvent.create = function create(properties) {\n            return new ClientCustomModEvent(properties);\n        };\n\n        /**\n         * Encodes the specified ClientCustomModEvent message. Does not implicitly {@link NT.ClientCustomModEvent.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientCustomModEvent\n         * @static\n         * @param {NT.IClientCustomModEvent} message ClientCustomModEvent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientCustomModEvent.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.payload != null && Object.hasOwnProperty.call(message, \"payload\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.payload);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientCustomModEvent message, length delimited. Does not implicitly {@link NT.ClientCustomModEvent.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientCustomModEvent\n         * @static\n         * @param {NT.IClientCustomModEvent} message ClientCustomModEvent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientCustomModEvent.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientCustomModEvent message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientCustomModEvent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientCustomModEvent} ClientCustomModEvent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientCustomModEvent.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientCustomModEvent();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.payload = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientCustomModEvent message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientCustomModEvent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientCustomModEvent} ClientCustomModEvent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientCustomModEvent.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientCustomModEvent message.\n         * @function verify\n         * @memberof NT.ClientCustomModEvent\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientCustomModEvent.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.payload != null && message.hasOwnProperty(\"payload\"))\n                if (!$util.isString(message.payload))\n                    return \"payload: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientCustomModEvent message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientCustomModEvent\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientCustomModEvent} ClientCustomModEvent\n         */\n        ClientCustomModEvent.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientCustomModEvent)\n                return object;\n            let message = new $root.NT.ClientCustomModEvent();\n            if (object.payload != null)\n                message.payload = String(object.payload);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientCustomModEvent message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientCustomModEvent\n         * @static\n         * @param {NT.ClientCustomModEvent} message ClientCustomModEvent\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientCustomModEvent.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.payload = \"\";\n            if (message.payload != null && message.hasOwnProperty(\"payload\"))\n                object.payload = message.payload;\n            return object;\n        };\n\n        /**\n         * Converts this ClientCustomModEvent to JSON.\n         * @function toJSON\n         * @memberof NT.ClientCustomModEvent\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientCustomModEvent.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientCustomModEvent\n         * @function getTypeUrl\n         * @memberof NT.ClientCustomModEvent\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientCustomModEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientCustomModEvent\";\n        };\n\n        return ClientCustomModEvent;\n    })();\n\n    NT.ServerCustomModEvent = (function() {\n\n        /**\n         * Properties of a ServerCustomModEvent.\n         * @memberof NT\n         * @interface IServerCustomModEvent\n         * @property {string|null} [userId] ServerCustomModEvent userId\n         * @property {string|null} [payload] ServerCustomModEvent payload\n         */\n\n        /**\n         * Constructs a new ServerCustomModEvent.\n         * @memberof NT\n         * @classdesc Represents a ServerCustomModEvent.\n         * @implements IServerCustomModEvent\n         * @constructor\n         * @param {NT.IServerCustomModEvent=} [properties] Properties to set\n         */\n        function ServerCustomModEvent(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerCustomModEvent userId.\n         * @member {string} userId\n         * @memberof NT.ServerCustomModEvent\n         * @instance\n         */\n        ServerCustomModEvent.prototype.userId = \"\";\n\n        /**\n         * ServerCustomModEvent payload.\n         * @member {string} payload\n         * @memberof NT.ServerCustomModEvent\n         * @instance\n         */\n        ServerCustomModEvent.prototype.payload = \"\";\n\n        /**\n         * Creates a new ServerCustomModEvent instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerCustomModEvent\n         * @static\n         * @param {NT.IServerCustomModEvent=} [properties] Properties to set\n         * @returns {NT.ServerCustomModEvent} ServerCustomModEvent instance\n         */\n        ServerCustomModEvent.create = function create(properties) {\n            return new ServerCustomModEvent(properties);\n        };\n\n        /**\n         * Encodes the specified ServerCustomModEvent message. Does not implicitly {@link NT.ServerCustomModEvent.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerCustomModEvent\n         * @static\n         * @param {NT.IServerCustomModEvent} message ServerCustomModEvent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerCustomModEvent.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.payload != null && Object.hasOwnProperty.call(message, \"payload\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.payload);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerCustomModEvent message, length delimited. Does not implicitly {@link NT.ServerCustomModEvent.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerCustomModEvent\n         * @static\n         * @param {NT.IServerCustomModEvent} message ServerCustomModEvent message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerCustomModEvent.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerCustomModEvent message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerCustomModEvent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerCustomModEvent} ServerCustomModEvent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerCustomModEvent.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerCustomModEvent();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.payload = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerCustomModEvent message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerCustomModEvent\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerCustomModEvent} ServerCustomModEvent\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerCustomModEvent.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerCustomModEvent message.\n         * @function verify\n         * @memberof NT.ServerCustomModEvent\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerCustomModEvent.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.payload != null && message.hasOwnProperty(\"payload\"))\n                if (!$util.isString(message.payload))\n                    return \"payload: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerCustomModEvent message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerCustomModEvent\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerCustomModEvent} ServerCustomModEvent\n         */\n        ServerCustomModEvent.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerCustomModEvent)\n                return object;\n            let message = new $root.NT.ServerCustomModEvent();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.payload != null)\n                message.payload = String(object.payload);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerCustomModEvent message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerCustomModEvent\n         * @static\n         * @param {NT.ServerCustomModEvent} message ServerCustomModEvent\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerCustomModEvent.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.payload = \"\";\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.payload != null && message.hasOwnProperty(\"payload\"))\n                object.payload = message.payload;\n            return object;\n        };\n\n        /**\n         * Converts this ServerCustomModEvent to JSON.\n         * @function toJSON\n         * @memberof NT.ServerCustomModEvent\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerCustomModEvent.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerCustomModEvent\n         * @function getTypeUrl\n         * @memberof NT.ServerCustomModEvent\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerCustomModEvent.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerCustomModEvent\";\n        };\n\n        return ServerCustomModEvent;\n    })();\n\n    NT.ClientRespawnPenalty = (function() {\n\n        /**\n         * Properties of a ClientRespawnPenalty.\n         * @memberof NT\n         * @interface IClientRespawnPenalty\n         * @property {number|null} [deaths] ClientRespawnPenalty deaths\n         */\n\n        /**\n         * Constructs a new ClientRespawnPenalty.\n         * @memberof NT\n         * @classdesc Represents a ClientRespawnPenalty.\n         * @implements IClientRespawnPenalty\n         * @constructor\n         * @param {NT.IClientRespawnPenalty=} [properties] Properties to set\n         */\n        function ClientRespawnPenalty(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientRespawnPenalty deaths.\n         * @member {number} deaths\n         * @memberof NT.ClientRespawnPenalty\n         * @instance\n         */\n        ClientRespawnPenalty.prototype.deaths = 0;\n\n        /**\n         * Creates a new ClientRespawnPenalty instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientRespawnPenalty\n         * @static\n         * @param {NT.IClientRespawnPenalty=} [properties] Properties to set\n         * @returns {NT.ClientRespawnPenalty} ClientRespawnPenalty instance\n         */\n        ClientRespawnPenalty.create = function create(properties) {\n            return new ClientRespawnPenalty(properties);\n        };\n\n        /**\n         * Encodes the specified ClientRespawnPenalty message. Does not implicitly {@link NT.ClientRespawnPenalty.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientRespawnPenalty\n         * @static\n         * @param {NT.IClientRespawnPenalty} message ClientRespawnPenalty message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRespawnPenalty.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.deaths != null && Object.hasOwnProperty.call(message, \"deaths\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.deaths);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientRespawnPenalty message, length delimited. Does not implicitly {@link NT.ClientRespawnPenalty.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientRespawnPenalty\n         * @static\n         * @param {NT.IClientRespawnPenalty} message ClientRespawnPenalty message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRespawnPenalty.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientRespawnPenalty message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientRespawnPenalty\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientRespawnPenalty} ClientRespawnPenalty\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRespawnPenalty.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientRespawnPenalty();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.deaths = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientRespawnPenalty message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientRespawnPenalty\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientRespawnPenalty} ClientRespawnPenalty\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRespawnPenalty.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientRespawnPenalty message.\n         * @function verify\n         * @memberof NT.ClientRespawnPenalty\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientRespawnPenalty.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.deaths != null && message.hasOwnProperty(\"deaths\"))\n                if (!$util.isInteger(message.deaths))\n                    return \"deaths: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientRespawnPenalty message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientRespawnPenalty\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientRespawnPenalty} ClientRespawnPenalty\n         */\n        ClientRespawnPenalty.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientRespawnPenalty)\n                return object;\n            let message = new $root.NT.ClientRespawnPenalty();\n            if (object.deaths != null)\n                message.deaths = object.deaths >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientRespawnPenalty message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientRespawnPenalty\n         * @static\n         * @param {NT.ClientRespawnPenalty} message ClientRespawnPenalty\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientRespawnPenalty.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.deaths = 0;\n            if (message.deaths != null && message.hasOwnProperty(\"deaths\"))\n                object.deaths = message.deaths;\n            return object;\n        };\n\n        /**\n         * Converts this ClientRespawnPenalty to JSON.\n         * @function toJSON\n         * @memberof NT.ClientRespawnPenalty\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientRespawnPenalty.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientRespawnPenalty\n         * @function getTypeUrl\n         * @memberof NT.ClientRespawnPenalty\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientRespawnPenalty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientRespawnPenalty\";\n        };\n\n        return ClientRespawnPenalty;\n    })();\n\n    NT.ServerRespawnPenalty = (function() {\n\n        /**\n         * Properties of a ServerRespawnPenalty.\n         * @memberof NT\n         * @interface IServerRespawnPenalty\n         * @property {string|null} [userId] ServerRespawnPenalty userId\n         * @property {number|null} [deaths] ServerRespawnPenalty deaths\n         */\n\n        /**\n         * Constructs a new ServerRespawnPenalty.\n         * @memberof NT\n         * @classdesc Represents a ServerRespawnPenalty.\n         * @implements IServerRespawnPenalty\n         * @constructor\n         * @param {NT.IServerRespawnPenalty=} [properties] Properties to set\n         */\n        function ServerRespawnPenalty(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerRespawnPenalty userId.\n         * @member {string} userId\n         * @memberof NT.ServerRespawnPenalty\n         * @instance\n         */\n        ServerRespawnPenalty.prototype.userId = \"\";\n\n        /**\n         * ServerRespawnPenalty deaths.\n         * @member {number} deaths\n         * @memberof NT.ServerRespawnPenalty\n         * @instance\n         */\n        ServerRespawnPenalty.prototype.deaths = 0;\n\n        /**\n         * Creates a new ServerRespawnPenalty instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerRespawnPenalty\n         * @static\n         * @param {NT.IServerRespawnPenalty=} [properties] Properties to set\n         * @returns {NT.ServerRespawnPenalty} ServerRespawnPenalty instance\n         */\n        ServerRespawnPenalty.create = function create(properties) {\n            return new ServerRespawnPenalty(properties);\n        };\n\n        /**\n         * Encodes the specified ServerRespawnPenalty message. Does not implicitly {@link NT.ServerRespawnPenalty.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerRespawnPenalty\n         * @static\n         * @param {NT.IServerRespawnPenalty} message ServerRespawnPenalty message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRespawnPenalty.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.deaths != null && Object.hasOwnProperty.call(message, \"deaths\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.deaths);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerRespawnPenalty message, length delimited. Does not implicitly {@link NT.ServerRespawnPenalty.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerRespawnPenalty\n         * @static\n         * @param {NT.IServerRespawnPenalty} message ServerRespawnPenalty message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRespawnPenalty.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerRespawnPenalty message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerRespawnPenalty\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerRespawnPenalty} ServerRespawnPenalty\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRespawnPenalty.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRespawnPenalty();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.deaths = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerRespawnPenalty message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerRespawnPenalty\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerRespawnPenalty} ServerRespawnPenalty\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRespawnPenalty.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerRespawnPenalty message.\n         * @function verify\n         * @memberof NT.ServerRespawnPenalty\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerRespawnPenalty.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.deaths != null && message.hasOwnProperty(\"deaths\"))\n                if (!$util.isInteger(message.deaths))\n                    return \"deaths: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerRespawnPenalty message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerRespawnPenalty\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerRespawnPenalty} ServerRespawnPenalty\n         */\n        ServerRespawnPenalty.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerRespawnPenalty)\n                return object;\n            let message = new $root.NT.ServerRespawnPenalty();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.deaths != null)\n                message.deaths = object.deaths >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerRespawnPenalty message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerRespawnPenalty\n         * @static\n         * @param {NT.ServerRespawnPenalty} message ServerRespawnPenalty\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerRespawnPenalty.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.deaths = 0;\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.deaths != null && message.hasOwnProperty(\"deaths\"))\n                object.deaths = message.deaths;\n            return object;\n        };\n\n        /**\n         * Converts this ServerRespawnPenalty to JSON.\n         * @function toJSON\n         * @memberof NT.ServerRespawnPenalty\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerRespawnPenalty.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerRespawnPenalty\n         * @function getTypeUrl\n         * @memberof NT.ServerRespawnPenalty\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerRespawnPenalty.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerRespawnPenalty\";\n        };\n\n        return ServerRespawnPenalty;\n    })();\n\n    NT.ClientAngerySteve = (function() {\n\n        /**\n         * Properties of a ClientAngerySteve.\n         * @memberof NT\n         * @interface IClientAngerySteve\n         * @property {boolean|null} [idk] ClientAngerySteve idk\n         */\n\n        /**\n         * Constructs a new ClientAngerySteve.\n         * @memberof NT\n         * @classdesc Represents a ClientAngerySteve.\n         * @implements IClientAngerySteve\n         * @constructor\n         * @param {NT.IClientAngerySteve=} [properties] Properties to set\n         */\n        function ClientAngerySteve(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientAngerySteve idk.\n         * @member {boolean} idk\n         * @memberof NT.ClientAngerySteve\n         * @instance\n         */\n        ClientAngerySteve.prototype.idk = false;\n\n        /**\n         * Creates a new ClientAngerySteve instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientAngerySteve\n         * @static\n         * @param {NT.IClientAngerySteve=} [properties] Properties to set\n         * @returns {NT.ClientAngerySteve} ClientAngerySteve instance\n         */\n        ClientAngerySteve.create = function create(properties) {\n            return new ClientAngerySteve(properties);\n        };\n\n        /**\n         * Encodes the specified ClientAngerySteve message. Does not implicitly {@link NT.ClientAngerySteve.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientAngerySteve\n         * @static\n         * @param {NT.IClientAngerySteve} message ClientAngerySteve message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientAngerySteve.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.idk != null && Object.hasOwnProperty.call(message, \"idk\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.idk);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientAngerySteve message, length delimited. Does not implicitly {@link NT.ClientAngerySteve.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientAngerySteve\n         * @static\n         * @param {NT.IClientAngerySteve} message ClientAngerySteve message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientAngerySteve.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientAngerySteve message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientAngerySteve\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientAngerySteve} ClientAngerySteve\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientAngerySteve.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientAngerySteve();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.idk = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientAngerySteve message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientAngerySteve\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientAngerySteve} ClientAngerySteve\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientAngerySteve.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientAngerySteve message.\n         * @function verify\n         * @memberof NT.ClientAngerySteve\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientAngerySteve.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.idk != null && message.hasOwnProperty(\"idk\"))\n                if (typeof message.idk !== \"boolean\")\n                    return \"idk: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientAngerySteve message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientAngerySteve\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientAngerySteve} ClientAngerySteve\n         */\n        ClientAngerySteve.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientAngerySteve)\n                return object;\n            let message = new $root.NT.ClientAngerySteve();\n            if (object.idk != null)\n                message.idk = Boolean(object.idk);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientAngerySteve message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientAngerySteve\n         * @static\n         * @param {NT.ClientAngerySteve} message ClientAngerySteve\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientAngerySteve.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.idk = false;\n            if (message.idk != null && message.hasOwnProperty(\"idk\"))\n                object.idk = message.idk;\n            return object;\n        };\n\n        /**\n         * Converts this ClientAngerySteve to JSON.\n         * @function toJSON\n         * @memberof NT.ClientAngerySteve\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientAngerySteve.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientAngerySteve\n         * @function getTypeUrl\n         * @memberof NT.ClientAngerySteve\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientAngerySteve.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientAngerySteve\";\n        };\n\n        return ClientAngerySteve;\n    })();\n\n    NT.ServerAngerySteve = (function() {\n\n        /**\n         * Properties of a ServerAngerySteve.\n         * @memberof NT\n         * @interface IServerAngerySteve\n         * @property {string|null} [userId] ServerAngerySteve userId\n         */\n\n        /**\n         * Constructs a new ServerAngerySteve.\n         * @memberof NT\n         * @classdesc Represents a ServerAngerySteve.\n         * @implements IServerAngerySteve\n         * @constructor\n         * @param {NT.IServerAngerySteve=} [properties] Properties to set\n         */\n        function ServerAngerySteve(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerAngerySteve userId.\n         * @member {string} userId\n         * @memberof NT.ServerAngerySteve\n         * @instance\n         */\n        ServerAngerySteve.prototype.userId = \"\";\n\n        /**\n         * Creates a new ServerAngerySteve instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerAngerySteve\n         * @static\n         * @param {NT.IServerAngerySteve=} [properties] Properties to set\n         * @returns {NT.ServerAngerySteve} ServerAngerySteve instance\n         */\n        ServerAngerySteve.create = function create(properties) {\n            return new ServerAngerySteve(properties);\n        };\n\n        /**\n         * Encodes the specified ServerAngerySteve message. Does not implicitly {@link NT.ServerAngerySteve.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerAngerySteve\n         * @static\n         * @param {NT.IServerAngerySteve} message ServerAngerySteve message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerAngerySteve.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerAngerySteve message, length delimited. Does not implicitly {@link NT.ServerAngerySteve.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerAngerySteve\n         * @static\n         * @param {NT.IServerAngerySteve} message ServerAngerySteve message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerAngerySteve.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerAngerySteve message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerAngerySteve\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerAngerySteve} ServerAngerySteve\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerAngerySteve.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerAngerySteve();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerAngerySteve message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerAngerySteve\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerAngerySteve} ServerAngerySteve\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerAngerySteve.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerAngerySteve message.\n         * @function verify\n         * @memberof NT.ServerAngerySteve\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerAngerySteve.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerAngerySteve message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerAngerySteve\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerAngerySteve} ServerAngerySteve\n         */\n        ServerAngerySteve.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerAngerySteve)\n                return object;\n            let message = new $root.NT.ServerAngerySteve();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerAngerySteve message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerAngerySteve\n         * @static\n         * @param {NT.ServerAngerySteve} message ServerAngerySteve\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerAngerySteve.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.userId = \"\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            return object;\n        };\n\n        /**\n         * Converts this ServerAngerySteve to JSON.\n         * @function toJSON\n         * @memberof NT.ServerAngerySteve\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerAngerySteve.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerAngerySteve\n         * @function getTypeUrl\n         * @memberof NT.ServerAngerySteve\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerAngerySteve.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerAngerySteve\";\n        };\n\n        return ServerAngerySteve;\n    })();\n\n    NT.Wand = (function() {\n\n        /**\n         * Properties of a Wand.\n         * @memberof NT\n         * @interface IWand\n         * @property {string|null} [id] Wand id\n         * @property {NT.Wand.IWandStats|null} [stats] Wand stats\n         * @property {Array.<NT.ISpell>|null} [alwaysCast] Wand alwaysCast\n         * @property {Array.<NT.ISpell>|null} [deck] Wand deck\n         * @property {string|null} [sentBy] Wand sentBy\n         * @property {string|null} [contributedBy] Wand contributedBy\n         */\n\n        /**\n         * Constructs a new Wand.\n         * @memberof NT\n         * @classdesc Represents a Wand.\n         * @implements IWand\n         * @constructor\n         * @param {NT.IWand=} [properties] Properties to set\n         */\n        function Wand(properties) {\n            this.alwaysCast = [];\n            this.deck = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Wand id.\n         * @member {string} id\n         * @memberof NT.Wand\n         * @instance\n         */\n        Wand.prototype.id = \"\";\n\n        /**\n         * Wand stats.\n         * @member {NT.Wand.IWandStats|null|undefined} stats\n         * @memberof NT.Wand\n         * @instance\n         */\n        Wand.prototype.stats = null;\n\n        /**\n         * Wand alwaysCast.\n         * @member {Array.<NT.ISpell>} alwaysCast\n         * @memberof NT.Wand\n         * @instance\n         */\n        Wand.prototype.alwaysCast = $util.emptyArray;\n\n        /**\n         * Wand deck.\n         * @member {Array.<NT.ISpell>} deck\n         * @memberof NT.Wand\n         * @instance\n         */\n        Wand.prototype.deck = $util.emptyArray;\n\n        /**\n         * Wand sentBy.\n         * @member {string|null|undefined} sentBy\n         * @memberof NT.Wand\n         * @instance\n         */\n        Wand.prototype.sentBy = null;\n\n        /**\n         * Wand contributedBy.\n         * @member {string|null|undefined} contributedBy\n         * @memberof NT.Wand\n         * @instance\n         */\n        Wand.prototype.contributedBy = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Wand _sentBy.\n         * @member {\"sentBy\"|undefined} _sentBy\n         * @memberof NT.Wand\n         * @instance\n         */\n        Object.defineProperty(Wand.prototype, \"_sentBy\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sentBy\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Wand _contributedBy.\n         * @member {\"contributedBy\"|undefined} _contributedBy\n         * @memberof NT.Wand\n         * @instance\n         */\n        Object.defineProperty(Wand.prototype, \"_contributedBy\", {\n            get: $util.oneOfGetter($oneOfFields = [\"contributedBy\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Wand instance using the specified properties.\n         * @function create\n         * @memberof NT.Wand\n         * @static\n         * @param {NT.IWand=} [properties] Properties to set\n         * @returns {NT.Wand} Wand instance\n         */\n        Wand.create = function create(properties) {\n            return new Wand(properties);\n        };\n\n        /**\n         * Encodes the specified Wand message. Does not implicitly {@link NT.Wand.verify|verify} messages.\n         * @function encode\n         * @memberof NT.Wand\n         * @static\n         * @param {NT.IWand} message Wand message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Wand.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.stats != null && Object.hasOwnProperty.call(message, \"stats\"))\n                $root.NT.Wand.WandStats.encode(message.stats, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.alwaysCast != null && message.alwaysCast.length)\n                for (let i = 0; i < message.alwaysCast.length; ++i)\n                    $root.NT.Spell.encode(message.alwaysCast[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.deck != null && message.deck.length)\n                for (let i = 0; i < message.deck.length; ++i)\n                    $root.NT.Spell.encode(message.deck[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.sentBy != null && Object.hasOwnProperty.call(message, \"sentBy\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.sentBy);\n            if (message.contributedBy != null && Object.hasOwnProperty.call(message, \"contributedBy\"))\n                writer.uint32(/* id 6, wireType 2 =*/50).string(message.contributedBy);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Wand message, length delimited. Does not implicitly {@link NT.Wand.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.Wand\n         * @static\n         * @param {NT.IWand} message Wand message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Wand.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Wand message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.Wand\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.Wand} Wand\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Wand.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.Wand();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.stats = $root.NT.Wand.WandStats.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.alwaysCast && message.alwaysCast.length))\n                            message.alwaysCast = [];\n                        message.alwaysCast.push($root.NT.Spell.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        if (!(message.deck && message.deck.length))\n                            message.deck = [];\n                        message.deck.push($root.NT.Spell.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 5: {\n                        message.sentBy = reader.string();\n                        break;\n                    }\n                case 6: {\n                        message.contributedBy = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Wand message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.Wand\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.Wand} Wand\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Wand.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Wand message.\n         * @function verify\n         * @memberof NT.Wand\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Wand.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.stats != null && message.hasOwnProperty(\"stats\")) {\n                let error = $root.NT.Wand.WandStats.verify(message.stats);\n                if (error)\n                    return \"stats.\" + error;\n            }\n            if (message.alwaysCast != null && message.hasOwnProperty(\"alwaysCast\")) {\n                if (!Array.isArray(message.alwaysCast))\n                    return \"alwaysCast: array expected\";\n                for (let i = 0; i < message.alwaysCast.length; ++i) {\n                    let error = $root.NT.Spell.verify(message.alwaysCast[i]);\n                    if (error)\n                        return \"alwaysCast.\" + error;\n                }\n            }\n            if (message.deck != null && message.hasOwnProperty(\"deck\")) {\n                if (!Array.isArray(message.deck))\n                    return \"deck: array expected\";\n                for (let i = 0; i < message.deck.length; ++i) {\n                    let error = $root.NT.Spell.verify(message.deck[i]);\n                    if (error)\n                        return \"deck.\" + error;\n                }\n            }\n            if (message.sentBy != null && message.hasOwnProperty(\"sentBy\")) {\n                properties._sentBy = 1;\n                if (!$util.isString(message.sentBy))\n                    return \"sentBy: string expected\";\n            }\n            if (message.contributedBy != null && message.hasOwnProperty(\"contributedBy\")) {\n                properties._contributedBy = 1;\n                if (!$util.isString(message.contributedBy))\n                    return \"contributedBy: string expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Wand message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.Wand\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.Wand} Wand\n         */\n        Wand.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.Wand)\n                return object;\n            let message = new $root.NT.Wand();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.stats != null) {\n                if (typeof object.stats !== \"object\")\n                    throw TypeError(\".NT.Wand.stats: object expected\");\n                message.stats = $root.NT.Wand.WandStats.fromObject(object.stats);\n            }\n            if (object.alwaysCast) {\n                if (!Array.isArray(object.alwaysCast))\n                    throw TypeError(\".NT.Wand.alwaysCast: array expected\");\n                message.alwaysCast = [];\n                for (let i = 0; i < object.alwaysCast.length; ++i) {\n                    if (typeof object.alwaysCast[i] !== \"object\")\n                        throw TypeError(\".NT.Wand.alwaysCast: object expected\");\n                    message.alwaysCast[i] = $root.NT.Spell.fromObject(object.alwaysCast[i]);\n                }\n            }\n            if (object.deck) {\n                if (!Array.isArray(object.deck))\n                    throw TypeError(\".NT.Wand.deck: array expected\");\n                message.deck = [];\n                for (let i = 0; i < object.deck.length; ++i) {\n                    if (typeof object.deck[i] !== \"object\")\n                        throw TypeError(\".NT.Wand.deck: object expected\");\n                    message.deck[i] = $root.NT.Spell.fromObject(object.deck[i]);\n                }\n            }\n            if (object.sentBy != null)\n                message.sentBy = String(object.sentBy);\n            if (object.contributedBy != null)\n                message.contributedBy = String(object.contributedBy);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Wand message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.Wand\n         * @static\n         * @param {NT.Wand} message Wand\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Wand.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.alwaysCast = [];\n                object.deck = [];\n            }\n            if (options.defaults) {\n                object.id = \"\";\n                object.stats = null;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.stats != null && message.hasOwnProperty(\"stats\"))\n                object.stats = $root.NT.Wand.WandStats.toObject(message.stats, options);\n            if (message.alwaysCast && message.alwaysCast.length) {\n                object.alwaysCast = [];\n                for (let j = 0; j < message.alwaysCast.length; ++j)\n                    object.alwaysCast[j] = $root.NT.Spell.toObject(message.alwaysCast[j], options);\n            }\n            if (message.deck && message.deck.length) {\n                object.deck = [];\n                for (let j = 0; j < message.deck.length; ++j)\n                    object.deck[j] = $root.NT.Spell.toObject(message.deck[j], options);\n            }\n            if (message.sentBy != null && message.hasOwnProperty(\"sentBy\")) {\n                object.sentBy = message.sentBy;\n                if (options.oneofs)\n                    object._sentBy = \"sentBy\";\n            }\n            if (message.contributedBy != null && message.hasOwnProperty(\"contributedBy\")) {\n                object.contributedBy = message.contributedBy;\n                if (options.oneofs)\n                    object._contributedBy = \"contributedBy\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Wand to JSON.\n         * @function toJSON\n         * @memberof NT.Wand\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Wand.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Wand\n         * @function getTypeUrl\n         * @memberof NT.Wand\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Wand.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.Wand\";\n        };\n\n        Wand.WandStats = (function() {\n\n            /**\n             * Properties of a WandStats.\n             * @memberof NT.Wand\n             * @interface IWandStats\n             * @property {string|null} [sprite] WandStats sprite\n             * @property {boolean|null} [named] WandStats named\n             * @property {string|null} [uiName] WandStats uiName\n             * @property {number|null} [manaMax] WandStats manaMax\n             * @property {number|null} [manaChargeSpeed] WandStats manaChargeSpeed\n             * @property {number|null} [reloadTime] WandStats reloadTime\n             * @property {number|null} [actionsPerRound] WandStats actionsPerRound\n             * @property {number|null} [deckCapacity] WandStats deckCapacity\n             * @property {boolean|null} [shuffleDeckWhenEmpty] WandStats shuffleDeckWhenEmpty\n             * @property {number|null} [spreadDegrees] WandStats spreadDegrees\n             * @property {number|null} [speedMultiplier] WandStats speedMultiplier\n             * @property {number|null} [fireRateWait] WandStats fireRateWait\n             * @property {number|null} [tipX] WandStats tipX\n             * @property {number|null} [tipY] WandStats tipY\n             * @property {number|null} [gripX] WandStats gripX\n             * @property {number|null} [gripY] WandStats gripY\n             */\n\n            /**\n             * Constructs a new WandStats.\n             * @memberof NT.Wand\n             * @classdesc Represents a WandStats.\n             * @implements IWandStats\n             * @constructor\n             * @param {NT.Wand.IWandStats=} [properties] Properties to set\n             */\n            function WandStats(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * WandStats sprite.\n             * @member {string} sprite\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.sprite = \"\";\n\n            /**\n             * WandStats named.\n             * @member {boolean} named\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.named = false;\n\n            /**\n             * WandStats uiName.\n             * @member {string} uiName\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.uiName = \"\";\n\n            /**\n             * WandStats manaMax.\n             * @member {number} manaMax\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.manaMax = 0;\n\n            /**\n             * WandStats manaChargeSpeed.\n             * @member {number} manaChargeSpeed\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.manaChargeSpeed = 0;\n\n            /**\n             * WandStats reloadTime.\n             * @member {number} reloadTime\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.reloadTime = 0;\n\n            /**\n             * WandStats actionsPerRound.\n             * @member {number} actionsPerRound\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.actionsPerRound = 0;\n\n            /**\n             * WandStats deckCapacity.\n             * @member {number} deckCapacity\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.deckCapacity = 0;\n\n            /**\n             * WandStats shuffleDeckWhenEmpty.\n             * @member {boolean} shuffleDeckWhenEmpty\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.shuffleDeckWhenEmpty = false;\n\n            /**\n             * WandStats spreadDegrees.\n             * @member {number} spreadDegrees\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.spreadDegrees = 0;\n\n            /**\n             * WandStats speedMultiplier.\n             * @member {number} speedMultiplier\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.speedMultiplier = 0;\n\n            /**\n             * WandStats fireRateWait.\n             * @member {number} fireRateWait\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.fireRateWait = 0;\n\n            /**\n             * WandStats tipX.\n             * @member {number} tipX\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.tipX = 0;\n\n            /**\n             * WandStats tipY.\n             * @member {number} tipY\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.tipY = 0;\n\n            /**\n             * WandStats gripX.\n             * @member {number} gripX\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.gripX = 0;\n\n            /**\n             * WandStats gripY.\n             * @member {number} gripY\n             * @memberof NT.Wand.WandStats\n             * @instance\n             */\n            WandStats.prototype.gripY = 0;\n\n            /**\n             * Creates a new WandStats instance using the specified properties.\n             * @function create\n             * @memberof NT.Wand.WandStats\n             * @static\n             * @param {NT.Wand.IWandStats=} [properties] Properties to set\n             * @returns {NT.Wand.WandStats} WandStats instance\n             */\n            WandStats.create = function create(properties) {\n                return new WandStats(properties);\n            };\n\n            /**\n             * Encodes the specified WandStats message. Does not implicitly {@link NT.Wand.WandStats.verify|verify} messages.\n             * @function encode\n             * @memberof NT.Wand.WandStats\n             * @static\n             * @param {NT.Wand.IWandStats} message WandStats message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            WandStats.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.sprite != null && Object.hasOwnProperty.call(message, \"sprite\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.sprite);\n                if (message.named != null && Object.hasOwnProperty.call(message, \"named\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.named);\n                if (message.uiName != null && Object.hasOwnProperty.call(message, \"uiName\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.uiName);\n                if (message.manaMax != null && Object.hasOwnProperty.call(message, \"manaMax\"))\n                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.manaMax);\n                if (message.manaChargeSpeed != null && Object.hasOwnProperty.call(message, \"manaChargeSpeed\"))\n                    writer.uint32(/* id 5, wireType 5 =*/45).float(message.manaChargeSpeed);\n                if (message.reloadTime != null && Object.hasOwnProperty.call(message, \"reloadTime\"))\n                    writer.uint32(/* id 6, wireType 0 =*/48).int32(message.reloadTime);\n                if (message.actionsPerRound != null && Object.hasOwnProperty.call(message, \"actionsPerRound\"))\n                    writer.uint32(/* id 7, wireType 0 =*/56).uint32(message.actionsPerRound);\n                if (message.deckCapacity != null && Object.hasOwnProperty.call(message, \"deckCapacity\"))\n                    writer.uint32(/* id 8, wireType 0 =*/64).uint32(message.deckCapacity);\n                if (message.shuffleDeckWhenEmpty != null && Object.hasOwnProperty.call(message, \"shuffleDeckWhenEmpty\"))\n                    writer.uint32(/* id 9, wireType 0 =*/72).bool(message.shuffleDeckWhenEmpty);\n                if (message.spreadDegrees != null && Object.hasOwnProperty.call(message, \"spreadDegrees\"))\n                    writer.uint32(/* id 10, wireType 5 =*/85).float(message.spreadDegrees);\n                if (message.speedMultiplier != null && Object.hasOwnProperty.call(message, \"speedMultiplier\"))\n                    writer.uint32(/* id 11, wireType 5 =*/93).float(message.speedMultiplier);\n                if (message.fireRateWait != null && Object.hasOwnProperty.call(message, \"fireRateWait\"))\n                    writer.uint32(/* id 12, wireType 0 =*/96).int32(message.fireRateWait);\n                if (message.tipX != null && Object.hasOwnProperty.call(message, \"tipX\"))\n                    writer.uint32(/* id 13, wireType 5 =*/109).float(message.tipX);\n                if (message.tipY != null && Object.hasOwnProperty.call(message, \"tipY\"))\n                    writer.uint32(/* id 14, wireType 5 =*/117).float(message.tipY);\n                if (message.gripX != null && Object.hasOwnProperty.call(message, \"gripX\"))\n                    writer.uint32(/* id 15, wireType 5 =*/125).float(message.gripX);\n                if (message.gripY != null && Object.hasOwnProperty.call(message, \"gripY\"))\n                    writer.uint32(/* id 16, wireType 5 =*/133).float(message.gripY);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified WandStats message, length delimited. Does not implicitly {@link NT.Wand.WandStats.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.Wand.WandStats\n             * @static\n             * @param {NT.Wand.IWandStats} message WandStats message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            WandStats.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a WandStats message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.Wand.WandStats\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.Wand.WandStats} WandStats\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            WandStats.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.Wand.WandStats();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.sprite = reader.string();\n                            break;\n                        }\n                    case 2: {\n                            message.named = reader.bool();\n                            break;\n                        }\n                    case 3: {\n                            message.uiName = reader.string();\n                            break;\n                        }\n                    case 4: {\n                            message.manaMax = reader.float();\n                            break;\n                        }\n                    case 5: {\n                            message.manaChargeSpeed = reader.float();\n                            break;\n                        }\n                    case 6: {\n                            message.reloadTime = reader.int32();\n                            break;\n                        }\n                    case 7: {\n                            message.actionsPerRound = reader.uint32();\n                            break;\n                        }\n                    case 8: {\n                            message.deckCapacity = reader.uint32();\n                            break;\n                        }\n                    case 9: {\n                            message.shuffleDeckWhenEmpty = reader.bool();\n                            break;\n                        }\n                    case 10: {\n                            message.spreadDegrees = reader.float();\n                            break;\n                        }\n                    case 11: {\n                            message.speedMultiplier = reader.float();\n                            break;\n                        }\n                    case 12: {\n                            message.fireRateWait = reader.int32();\n                            break;\n                        }\n                    case 13: {\n                            message.tipX = reader.float();\n                            break;\n                        }\n                    case 14: {\n                            message.tipY = reader.float();\n                            break;\n                        }\n                    case 15: {\n                            message.gripX = reader.float();\n                            break;\n                        }\n                    case 16: {\n                            message.gripY = reader.float();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a WandStats message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.Wand.WandStats\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.Wand.WandStats} WandStats\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            WandStats.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a WandStats message.\n             * @function verify\n             * @memberof NT.Wand.WandStats\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            WandStats.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.sprite != null && message.hasOwnProperty(\"sprite\"))\n                    if (!$util.isString(message.sprite))\n                        return \"sprite: string expected\";\n                if (message.named != null && message.hasOwnProperty(\"named\"))\n                    if (typeof message.named !== \"boolean\")\n                        return \"named: boolean expected\";\n                if (message.uiName != null && message.hasOwnProperty(\"uiName\"))\n                    if (!$util.isString(message.uiName))\n                        return \"uiName: string expected\";\n                if (message.manaMax != null && message.hasOwnProperty(\"manaMax\"))\n                    if (typeof message.manaMax !== \"number\")\n                        return \"manaMax: number expected\";\n                if (message.manaChargeSpeed != null && message.hasOwnProperty(\"manaChargeSpeed\"))\n                    if (typeof message.manaChargeSpeed !== \"number\")\n                        return \"manaChargeSpeed: number expected\";\n                if (message.reloadTime != null && message.hasOwnProperty(\"reloadTime\"))\n                    if (!$util.isInteger(message.reloadTime))\n                        return \"reloadTime: integer expected\";\n                if (message.actionsPerRound != null && message.hasOwnProperty(\"actionsPerRound\"))\n                    if (!$util.isInteger(message.actionsPerRound))\n                        return \"actionsPerRound: integer expected\";\n                if (message.deckCapacity != null && message.hasOwnProperty(\"deckCapacity\"))\n                    if (!$util.isInteger(message.deckCapacity))\n                        return \"deckCapacity: integer expected\";\n                if (message.shuffleDeckWhenEmpty != null && message.hasOwnProperty(\"shuffleDeckWhenEmpty\"))\n                    if (typeof message.shuffleDeckWhenEmpty !== \"boolean\")\n                        return \"shuffleDeckWhenEmpty: boolean expected\";\n                if (message.spreadDegrees != null && message.hasOwnProperty(\"spreadDegrees\"))\n                    if (typeof message.spreadDegrees !== \"number\")\n                        return \"spreadDegrees: number expected\";\n                if (message.speedMultiplier != null && message.hasOwnProperty(\"speedMultiplier\"))\n                    if (typeof message.speedMultiplier !== \"number\")\n                        return \"speedMultiplier: number expected\";\n                if (message.fireRateWait != null && message.hasOwnProperty(\"fireRateWait\"))\n                    if (!$util.isInteger(message.fireRateWait))\n                        return \"fireRateWait: integer expected\";\n                if (message.tipX != null && message.hasOwnProperty(\"tipX\"))\n                    if (typeof message.tipX !== \"number\")\n                        return \"tipX: number expected\";\n                if (message.tipY != null && message.hasOwnProperty(\"tipY\"))\n                    if (typeof message.tipY !== \"number\")\n                        return \"tipY: number expected\";\n                if (message.gripX != null && message.hasOwnProperty(\"gripX\"))\n                    if (typeof message.gripX !== \"number\")\n                        return \"gripX: number expected\";\n                if (message.gripY != null && message.hasOwnProperty(\"gripY\"))\n                    if (typeof message.gripY !== \"number\")\n                        return \"gripY: number expected\";\n                return null;\n            };\n\n            /**\n             * Creates a WandStats message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.Wand.WandStats\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.Wand.WandStats} WandStats\n             */\n            WandStats.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.Wand.WandStats)\n                    return object;\n                let message = new $root.NT.Wand.WandStats();\n                if (object.sprite != null)\n                    message.sprite = String(object.sprite);\n                if (object.named != null)\n                    message.named = Boolean(object.named);\n                if (object.uiName != null)\n                    message.uiName = String(object.uiName);\n                if (object.manaMax != null)\n                    message.manaMax = Number(object.manaMax);\n                if (object.manaChargeSpeed != null)\n                    message.manaChargeSpeed = Number(object.manaChargeSpeed);\n                if (object.reloadTime != null)\n                    message.reloadTime = object.reloadTime | 0;\n                if (object.actionsPerRound != null)\n                    message.actionsPerRound = object.actionsPerRound >>> 0;\n                if (object.deckCapacity != null)\n                    message.deckCapacity = object.deckCapacity >>> 0;\n                if (object.shuffleDeckWhenEmpty != null)\n                    message.shuffleDeckWhenEmpty = Boolean(object.shuffleDeckWhenEmpty);\n                if (object.spreadDegrees != null)\n                    message.spreadDegrees = Number(object.spreadDegrees);\n                if (object.speedMultiplier != null)\n                    message.speedMultiplier = Number(object.speedMultiplier);\n                if (object.fireRateWait != null)\n                    message.fireRateWait = object.fireRateWait | 0;\n                if (object.tipX != null)\n                    message.tipX = Number(object.tipX);\n                if (object.tipY != null)\n                    message.tipY = Number(object.tipY);\n                if (object.gripX != null)\n                    message.gripX = Number(object.gripX);\n                if (object.gripY != null)\n                    message.gripY = Number(object.gripY);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a WandStats message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.Wand.WandStats\n             * @static\n             * @param {NT.Wand.WandStats} message WandStats\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            WandStats.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.sprite = \"\";\n                    object.named = false;\n                    object.uiName = \"\";\n                    object.manaMax = 0;\n                    object.manaChargeSpeed = 0;\n                    object.reloadTime = 0;\n                    object.actionsPerRound = 0;\n                    object.deckCapacity = 0;\n                    object.shuffleDeckWhenEmpty = false;\n                    object.spreadDegrees = 0;\n                    object.speedMultiplier = 0;\n                    object.fireRateWait = 0;\n                    object.tipX = 0;\n                    object.tipY = 0;\n                    object.gripX = 0;\n                    object.gripY = 0;\n                }\n                if (message.sprite != null && message.hasOwnProperty(\"sprite\"))\n                    object.sprite = message.sprite;\n                if (message.named != null && message.hasOwnProperty(\"named\"))\n                    object.named = message.named;\n                if (message.uiName != null && message.hasOwnProperty(\"uiName\"))\n                    object.uiName = message.uiName;\n                if (message.manaMax != null && message.hasOwnProperty(\"manaMax\"))\n                    object.manaMax = options.json && !isFinite(message.manaMax) ? String(message.manaMax) : message.manaMax;\n                if (message.manaChargeSpeed != null && message.hasOwnProperty(\"manaChargeSpeed\"))\n                    object.manaChargeSpeed = options.json && !isFinite(message.manaChargeSpeed) ? String(message.manaChargeSpeed) : message.manaChargeSpeed;\n                if (message.reloadTime != null && message.hasOwnProperty(\"reloadTime\"))\n                    object.reloadTime = message.reloadTime;\n                if (message.actionsPerRound != null && message.hasOwnProperty(\"actionsPerRound\"))\n                    object.actionsPerRound = message.actionsPerRound;\n                if (message.deckCapacity != null && message.hasOwnProperty(\"deckCapacity\"))\n                    object.deckCapacity = message.deckCapacity;\n                if (message.shuffleDeckWhenEmpty != null && message.hasOwnProperty(\"shuffleDeckWhenEmpty\"))\n                    object.shuffleDeckWhenEmpty = message.shuffleDeckWhenEmpty;\n                if (message.spreadDegrees != null && message.hasOwnProperty(\"spreadDegrees\"))\n                    object.spreadDegrees = options.json && !isFinite(message.spreadDegrees) ? String(message.spreadDegrees) : message.spreadDegrees;\n                if (message.speedMultiplier != null && message.hasOwnProperty(\"speedMultiplier\"))\n                    object.speedMultiplier = options.json && !isFinite(message.speedMultiplier) ? String(message.speedMultiplier) : message.speedMultiplier;\n                if (message.fireRateWait != null && message.hasOwnProperty(\"fireRateWait\"))\n                    object.fireRateWait = message.fireRateWait;\n                if (message.tipX != null && message.hasOwnProperty(\"tipX\"))\n                    object.tipX = options.json && !isFinite(message.tipX) ? String(message.tipX) : message.tipX;\n                if (message.tipY != null && message.hasOwnProperty(\"tipY\"))\n                    object.tipY = options.json && !isFinite(message.tipY) ? String(message.tipY) : message.tipY;\n                if (message.gripX != null && message.hasOwnProperty(\"gripX\"))\n                    object.gripX = options.json && !isFinite(message.gripX) ? String(message.gripX) : message.gripX;\n                if (message.gripY != null && message.hasOwnProperty(\"gripY\"))\n                    object.gripY = options.json && !isFinite(message.gripY) ? String(message.gripY) : message.gripY;\n                return object;\n            };\n\n            /**\n             * Converts this WandStats to JSON.\n             * @function toJSON\n             * @memberof NT.Wand.WandStats\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            WandStats.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for WandStats\n             * @function getTypeUrl\n             * @memberof NT.Wand.WandStats\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            WandStats.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.Wand.WandStats\";\n            };\n\n            return WandStats;\n        })();\n\n        return Wand;\n    })();\n\n    NT.Spell = (function() {\n\n        /**\n         * Properties of a Spell.\n         * @memberof NT\n         * @interface ISpell\n         * @property {string|null} [id] Spell id\n         * @property {string|null} [gameId] Spell gameId\n         * @property {string|null} [sentBy] Spell sentBy\n         * @property {string|null} [contributedBy] Spell contributedBy\n         * @property {number|null} [usesRemaining] Spell usesRemaining\n         */\n\n        /**\n         * Constructs a new Spell.\n         * @memberof NT\n         * @classdesc Represents a Spell.\n         * @implements ISpell\n         * @constructor\n         * @param {NT.ISpell=} [properties] Properties to set\n         */\n        function Spell(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Spell id.\n         * @member {string} id\n         * @memberof NT.Spell\n         * @instance\n         */\n        Spell.prototype.id = \"\";\n\n        /**\n         * Spell gameId.\n         * @member {string} gameId\n         * @memberof NT.Spell\n         * @instance\n         */\n        Spell.prototype.gameId = \"\";\n\n        /**\n         * Spell sentBy.\n         * @member {string|null|undefined} sentBy\n         * @memberof NT.Spell\n         * @instance\n         */\n        Spell.prototype.sentBy = null;\n\n        /**\n         * Spell contributedBy.\n         * @member {string|null|undefined} contributedBy\n         * @memberof NT.Spell\n         * @instance\n         */\n        Spell.prototype.contributedBy = null;\n\n        /**\n         * Spell usesRemaining.\n         * @member {number} usesRemaining\n         * @memberof NT.Spell\n         * @instance\n         */\n        Spell.prototype.usesRemaining = 0;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Spell _sentBy.\n         * @member {\"sentBy\"|undefined} _sentBy\n         * @memberof NT.Spell\n         * @instance\n         */\n        Object.defineProperty(Spell.prototype, \"_sentBy\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sentBy\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Spell _contributedBy.\n         * @member {\"contributedBy\"|undefined} _contributedBy\n         * @memberof NT.Spell\n         * @instance\n         */\n        Object.defineProperty(Spell.prototype, \"_contributedBy\", {\n            get: $util.oneOfGetter($oneOfFields = [\"contributedBy\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Spell instance using the specified properties.\n         * @function create\n         * @memberof NT.Spell\n         * @static\n         * @param {NT.ISpell=} [properties] Properties to set\n         * @returns {NT.Spell} Spell instance\n         */\n        Spell.create = function create(properties) {\n            return new Spell(properties);\n        };\n\n        /**\n         * Encodes the specified Spell message. Does not implicitly {@link NT.Spell.verify|verify} messages.\n         * @function encode\n         * @memberof NT.Spell\n         * @static\n         * @param {NT.ISpell} message Spell message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Spell.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.gameId != null && Object.hasOwnProperty.call(message, \"gameId\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.gameId);\n            if (message.sentBy != null && Object.hasOwnProperty.call(message, \"sentBy\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.sentBy);\n            if (message.contributedBy != null && Object.hasOwnProperty.call(message, \"contributedBy\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.contributedBy);\n            if (message.usesRemaining != null && Object.hasOwnProperty.call(message, \"usesRemaining\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).int32(message.usesRemaining);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Spell message, length delimited. Does not implicitly {@link NT.Spell.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.Spell\n         * @static\n         * @param {NT.ISpell} message Spell message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Spell.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Spell message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.Spell\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.Spell} Spell\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Spell.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.Spell();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.gameId = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.sentBy = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.contributedBy = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.usesRemaining = reader.int32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Spell message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.Spell\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.Spell} Spell\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Spell.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Spell message.\n         * @function verify\n         * @memberof NT.Spell\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Spell.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.gameId != null && message.hasOwnProperty(\"gameId\"))\n                if (!$util.isString(message.gameId))\n                    return \"gameId: string expected\";\n            if (message.sentBy != null && message.hasOwnProperty(\"sentBy\")) {\n                properties._sentBy = 1;\n                if (!$util.isString(message.sentBy))\n                    return \"sentBy: string expected\";\n            }\n            if (message.contributedBy != null && message.hasOwnProperty(\"contributedBy\")) {\n                properties._contributedBy = 1;\n                if (!$util.isString(message.contributedBy))\n                    return \"contributedBy: string expected\";\n            }\n            if (message.usesRemaining != null && message.hasOwnProperty(\"usesRemaining\"))\n                if (!$util.isInteger(message.usesRemaining))\n                    return \"usesRemaining: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Spell message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.Spell\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.Spell} Spell\n         */\n        Spell.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.Spell)\n                return object;\n            let message = new $root.NT.Spell();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.gameId != null)\n                message.gameId = String(object.gameId);\n            if (object.sentBy != null)\n                message.sentBy = String(object.sentBy);\n            if (object.contributedBy != null)\n                message.contributedBy = String(object.contributedBy);\n            if (object.usesRemaining != null)\n                message.usesRemaining = object.usesRemaining | 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Spell message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.Spell\n         * @static\n         * @param {NT.Spell} message Spell\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Spell.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.id = \"\";\n                object.gameId = \"\";\n                object.usesRemaining = 0;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.gameId != null && message.hasOwnProperty(\"gameId\"))\n                object.gameId = message.gameId;\n            if (message.sentBy != null && message.hasOwnProperty(\"sentBy\")) {\n                object.sentBy = message.sentBy;\n                if (options.oneofs)\n                    object._sentBy = \"sentBy\";\n            }\n            if (message.contributedBy != null && message.hasOwnProperty(\"contributedBy\")) {\n                object.contributedBy = message.contributedBy;\n                if (options.oneofs)\n                    object._contributedBy = \"contributedBy\";\n            }\n            if (message.usesRemaining != null && message.hasOwnProperty(\"usesRemaining\"))\n                object.usesRemaining = message.usesRemaining;\n            return object;\n        };\n\n        /**\n         * Converts this Spell to JSON.\n         * @function toJSON\n         * @memberof NT.Spell\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Spell.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Spell\n         * @function getTypeUrl\n         * @memberof NT.Spell\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Spell.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.Spell\";\n        };\n\n        return Spell;\n    })();\n\n    NT.Item = (function() {\n\n        /**\n         * Properties of an Item.\n         * @memberof NT\n         * @interface IItem\n         * @property {string|null} [id] Item id\n         * @property {NT.Item.IColor|null} [color] Item color\n         * @property {Array.<NT.Item.IMaterial>|null} [content] Item content\n         * @property {string|null} [sentBy] Item sentBy\n         * @property {string|null} [contributedBy] Item contributedBy\n         * @property {boolean|null} [isChest] Item isChest\n         * @property {string|null} [itemType] Item itemType\n         */\n\n        /**\n         * Constructs a new Item.\n         * @memberof NT\n         * @classdesc Represents an Item.\n         * @implements IItem\n         * @constructor\n         * @param {NT.IItem=} [properties] Properties to set\n         */\n        function Item(properties) {\n            this.content = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Item id.\n         * @member {string} id\n         * @memberof NT.Item\n         * @instance\n         */\n        Item.prototype.id = \"\";\n\n        /**\n         * Item color.\n         * @member {NT.Item.IColor|null|undefined} color\n         * @memberof NT.Item\n         * @instance\n         */\n        Item.prototype.color = null;\n\n        /**\n         * Item content.\n         * @member {Array.<NT.Item.IMaterial>} content\n         * @memberof NT.Item\n         * @instance\n         */\n        Item.prototype.content = $util.emptyArray;\n\n        /**\n         * Item sentBy.\n         * @member {string|null|undefined} sentBy\n         * @memberof NT.Item\n         * @instance\n         */\n        Item.prototype.sentBy = null;\n\n        /**\n         * Item contributedBy.\n         * @member {string|null|undefined} contributedBy\n         * @memberof NT.Item\n         * @instance\n         */\n        Item.prototype.contributedBy = null;\n\n        /**\n         * Item isChest.\n         * @member {boolean} isChest\n         * @memberof NT.Item\n         * @instance\n         */\n        Item.prototype.isChest = false;\n\n        /**\n         * Item itemType.\n         * @member {string} itemType\n         * @memberof NT.Item\n         * @instance\n         */\n        Item.prototype.itemType = \"\";\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Item _sentBy.\n         * @member {\"sentBy\"|undefined} _sentBy\n         * @memberof NT.Item\n         * @instance\n         */\n        Object.defineProperty(Item.prototype, \"_sentBy\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sentBy\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Item _contributedBy.\n         * @member {\"contributedBy\"|undefined} _contributedBy\n         * @memberof NT.Item\n         * @instance\n         */\n        Object.defineProperty(Item.prototype, \"_contributedBy\", {\n            get: $util.oneOfGetter($oneOfFields = [\"contributedBy\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Item instance using the specified properties.\n         * @function create\n         * @memberof NT.Item\n         * @static\n         * @param {NT.IItem=} [properties] Properties to set\n         * @returns {NT.Item} Item instance\n         */\n        Item.create = function create(properties) {\n            return new Item(properties);\n        };\n\n        /**\n         * Encodes the specified Item message. Does not implicitly {@link NT.Item.verify|verify} messages.\n         * @function encode\n         * @memberof NT.Item\n         * @static\n         * @param {NT.IItem} message Item message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Item.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.color != null && Object.hasOwnProperty.call(message, \"color\"))\n                $root.NT.Item.Color.encode(message.color, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.content != null && message.content.length)\n                for (let i = 0; i < message.content.length; ++i)\n                    $root.NT.Item.Material.encode(message.content[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.sentBy != null && Object.hasOwnProperty.call(message, \"sentBy\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.sentBy);\n            if (message.contributedBy != null && Object.hasOwnProperty.call(message, \"contributedBy\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.contributedBy);\n            if (message.isChest != null && Object.hasOwnProperty.call(message, \"isChest\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.isChest);\n            if (message.itemType != null && Object.hasOwnProperty.call(message, \"itemType\"))\n                writer.uint32(/* id 7, wireType 2 =*/58).string(message.itemType);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Item message, length delimited. Does not implicitly {@link NT.Item.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.Item\n         * @static\n         * @param {NT.IItem} message Item message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Item.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Item message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.Item\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.Item} Item\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Item.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.Item();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.color = $root.NT.Item.Color.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        if (!(message.content && message.content.length))\n                            message.content = [];\n                        message.content.push($root.NT.Item.Material.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 4: {\n                        message.sentBy = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.contributedBy = reader.string();\n                        break;\n                    }\n                case 6: {\n                        message.isChest = reader.bool();\n                        break;\n                    }\n                case 7: {\n                        message.itemType = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Item message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.Item\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.Item} Item\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Item.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Item message.\n         * @function verify\n         * @memberof NT.Item\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Item.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.color != null && message.hasOwnProperty(\"color\")) {\n                let error = $root.NT.Item.Color.verify(message.color);\n                if (error)\n                    return \"color.\" + error;\n            }\n            if (message.content != null && message.hasOwnProperty(\"content\")) {\n                if (!Array.isArray(message.content))\n                    return \"content: array expected\";\n                for (let i = 0; i < message.content.length; ++i) {\n                    let error = $root.NT.Item.Material.verify(message.content[i]);\n                    if (error)\n                        return \"content.\" + error;\n                }\n            }\n            if (message.sentBy != null && message.hasOwnProperty(\"sentBy\")) {\n                properties._sentBy = 1;\n                if (!$util.isString(message.sentBy))\n                    return \"sentBy: string expected\";\n            }\n            if (message.contributedBy != null && message.hasOwnProperty(\"contributedBy\")) {\n                properties._contributedBy = 1;\n                if (!$util.isString(message.contributedBy))\n                    return \"contributedBy: string expected\";\n            }\n            if (message.isChest != null && message.hasOwnProperty(\"isChest\"))\n                if (typeof message.isChest !== \"boolean\")\n                    return \"isChest: boolean expected\";\n            if (message.itemType != null && message.hasOwnProperty(\"itemType\"))\n                if (!$util.isString(message.itemType))\n                    return \"itemType: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Item message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.Item\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.Item} Item\n         */\n        Item.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.Item)\n                return object;\n            let message = new $root.NT.Item();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.color != null) {\n                if (typeof object.color !== \"object\")\n                    throw TypeError(\".NT.Item.color: object expected\");\n                message.color = $root.NT.Item.Color.fromObject(object.color);\n            }\n            if (object.content) {\n                if (!Array.isArray(object.content))\n                    throw TypeError(\".NT.Item.content: array expected\");\n                message.content = [];\n                for (let i = 0; i < object.content.length; ++i) {\n                    if (typeof object.content[i] !== \"object\")\n                        throw TypeError(\".NT.Item.content: object expected\");\n                    message.content[i] = $root.NT.Item.Material.fromObject(object.content[i]);\n                }\n            }\n            if (object.sentBy != null)\n                message.sentBy = String(object.sentBy);\n            if (object.contributedBy != null)\n                message.contributedBy = String(object.contributedBy);\n            if (object.isChest != null)\n                message.isChest = Boolean(object.isChest);\n            if (object.itemType != null)\n                message.itemType = String(object.itemType);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Item message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.Item\n         * @static\n         * @param {NT.Item} message Item\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Item.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.content = [];\n            if (options.defaults) {\n                object.id = \"\";\n                object.color = null;\n                object.isChest = false;\n                object.itemType = \"\";\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.color != null && message.hasOwnProperty(\"color\"))\n                object.color = $root.NT.Item.Color.toObject(message.color, options);\n            if (message.content && message.content.length) {\n                object.content = [];\n                for (let j = 0; j < message.content.length; ++j)\n                    object.content[j] = $root.NT.Item.Material.toObject(message.content[j], options);\n            }\n            if (message.sentBy != null && message.hasOwnProperty(\"sentBy\")) {\n                object.sentBy = message.sentBy;\n                if (options.oneofs)\n                    object._sentBy = \"sentBy\";\n            }\n            if (message.contributedBy != null && message.hasOwnProperty(\"contributedBy\")) {\n                object.contributedBy = message.contributedBy;\n                if (options.oneofs)\n                    object._contributedBy = \"contributedBy\";\n            }\n            if (message.isChest != null && message.hasOwnProperty(\"isChest\"))\n                object.isChest = message.isChest;\n            if (message.itemType != null && message.hasOwnProperty(\"itemType\"))\n                object.itemType = message.itemType;\n            return object;\n        };\n\n        /**\n         * Converts this Item to JSON.\n         * @function toJSON\n         * @memberof NT.Item\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Item.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for Item\n         * @function getTypeUrl\n         * @memberof NT.Item\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        Item.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.Item\";\n        };\n\n        Item.Color = (function() {\n\n            /**\n             * Properties of a Color.\n             * @memberof NT.Item\n             * @interface IColor\n             * @property {number|null} [r] Color r\n             * @property {number|null} [g] Color g\n             * @property {number|null} [b] Color b\n             */\n\n            /**\n             * Constructs a new Color.\n             * @memberof NT.Item\n             * @classdesc Represents a Color.\n             * @implements IColor\n             * @constructor\n             * @param {NT.Item.IColor=} [properties] Properties to set\n             */\n            function Color(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Color r.\n             * @member {number} r\n             * @memberof NT.Item.Color\n             * @instance\n             */\n            Color.prototype.r = 0;\n\n            /**\n             * Color g.\n             * @member {number} g\n             * @memberof NT.Item.Color\n             * @instance\n             */\n            Color.prototype.g = 0;\n\n            /**\n             * Color b.\n             * @member {number} b\n             * @memberof NT.Item.Color\n             * @instance\n             */\n            Color.prototype.b = 0;\n\n            /**\n             * Creates a new Color instance using the specified properties.\n             * @function create\n             * @memberof NT.Item.Color\n             * @static\n             * @param {NT.Item.IColor=} [properties] Properties to set\n             * @returns {NT.Item.Color} Color instance\n             */\n            Color.create = function create(properties) {\n                return new Color(properties);\n            };\n\n            /**\n             * Encodes the specified Color message. Does not implicitly {@link NT.Item.Color.verify|verify} messages.\n             * @function encode\n             * @memberof NT.Item.Color\n             * @static\n             * @param {NT.Item.IColor} message Color message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Color.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.r != null && Object.hasOwnProperty.call(message, \"r\"))\n                    writer.uint32(/* id 1, wireType 5 =*/13).float(message.r);\n                if (message.g != null && Object.hasOwnProperty.call(message, \"g\"))\n                    writer.uint32(/* id 2, wireType 5 =*/21).float(message.g);\n                if (message.b != null && Object.hasOwnProperty.call(message, \"b\"))\n                    writer.uint32(/* id 3, wireType 5 =*/29).float(message.b);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Color message, length delimited. Does not implicitly {@link NT.Item.Color.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.Item.Color\n             * @static\n             * @param {NT.Item.IColor} message Color message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Color.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Color message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.Item.Color\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.Item.Color} Color\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Color.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.Item.Color();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.r = reader.float();\n                            break;\n                        }\n                    case 2: {\n                            message.g = reader.float();\n                            break;\n                        }\n                    case 3: {\n                            message.b = reader.float();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Color message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.Item.Color\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.Item.Color} Color\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Color.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Color message.\n             * @function verify\n             * @memberof NT.Item.Color\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Color.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.r != null && message.hasOwnProperty(\"r\"))\n                    if (typeof message.r !== \"number\")\n                        return \"r: number expected\";\n                if (message.g != null && message.hasOwnProperty(\"g\"))\n                    if (typeof message.g !== \"number\")\n                        return \"g: number expected\";\n                if (message.b != null && message.hasOwnProperty(\"b\"))\n                    if (typeof message.b !== \"number\")\n                        return \"b: number expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Color message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.Item.Color\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.Item.Color} Color\n             */\n            Color.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.Item.Color)\n                    return object;\n                let message = new $root.NT.Item.Color();\n                if (object.r != null)\n                    message.r = Number(object.r);\n                if (object.g != null)\n                    message.g = Number(object.g);\n                if (object.b != null)\n                    message.b = Number(object.b);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Color message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.Item.Color\n             * @static\n             * @param {NT.Item.Color} message Color\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Color.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.r = 0;\n                    object.g = 0;\n                    object.b = 0;\n                }\n                if (message.r != null && message.hasOwnProperty(\"r\"))\n                    object.r = options.json && !isFinite(message.r) ? String(message.r) : message.r;\n                if (message.g != null && message.hasOwnProperty(\"g\"))\n                    object.g = options.json && !isFinite(message.g) ? String(message.g) : message.g;\n                if (message.b != null && message.hasOwnProperty(\"b\"))\n                    object.b = options.json && !isFinite(message.b) ? String(message.b) : message.b;\n                return object;\n            };\n\n            /**\n             * Converts this Color to JSON.\n             * @function toJSON\n             * @memberof NT.Item.Color\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Color.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Color\n             * @function getTypeUrl\n             * @memberof NT.Item.Color\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Color.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.Item.Color\";\n            };\n\n            return Color;\n        })();\n\n        Item.Material = (function() {\n\n            /**\n             * Properties of a Material.\n             * @memberof NT.Item\n             * @interface IMaterial\n             * @property {number|null} [id] Material id\n             * @property {number|null} [amount] Material amount\n             */\n\n            /**\n             * Constructs a new Material.\n             * @memberof NT.Item\n             * @classdesc Represents a Material.\n             * @implements IMaterial\n             * @constructor\n             * @param {NT.Item.IMaterial=} [properties] Properties to set\n             */\n            function Material(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Material id.\n             * @member {number} id\n             * @memberof NT.Item.Material\n             * @instance\n             */\n            Material.prototype.id = 0;\n\n            /**\n             * Material amount.\n             * @member {number} amount\n             * @memberof NT.Item.Material\n             * @instance\n             */\n            Material.prototype.amount = 0;\n\n            /**\n             * Creates a new Material instance using the specified properties.\n             * @function create\n             * @memberof NT.Item.Material\n             * @static\n             * @param {NT.Item.IMaterial=} [properties] Properties to set\n             * @returns {NT.Item.Material} Material instance\n             */\n            Material.create = function create(properties) {\n                return new Material(properties);\n            };\n\n            /**\n             * Encodes the specified Material message. Does not implicitly {@link NT.Item.Material.verify|verify} messages.\n             * @function encode\n             * @memberof NT.Item.Material\n             * @static\n             * @param {NT.Item.IMaterial} message Material message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Material.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.id);\n                if (message.amount != null && Object.hasOwnProperty.call(message, \"amount\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.amount);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Material message, length delimited. Does not implicitly {@link NT.Item.Material.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.Item.Material\n             * @static\n             * @param {NT.Item.IMaterial} message Material message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Material.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Material message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.Item.Material\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.Item.Material} Material\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Material.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.Item.Material();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.id = reader.uint32();\n                            break;\n                        }\n                    case 2: {\n                            message.amount = reader.uint32();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Material message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.Item.Material\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.Item.Material} Material\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Material.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Material message.\n             * @function verify\n             * @memberof NT.Item.Material\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Material.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isInteger(message.id))\n                        return \"id: integer expected\";\n                if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                    if (!$util.isInteger(message.amount))\n                        return \"amount: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Material message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.Item.Material\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.Item.Material} Material\n             */\n            Material.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.Item.Material)\n                    return object;\n                let message = new $root.NT.Item.Material();\n                if (object.id != null)\n                    message.id = object.id >>> 0;\n                if (object.amount != null)\n                    message.amount = object.amount >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Material message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.Item.Material\n             * @static\n             * @param {NT.Item.Material} message Material\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Material.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.id = 0;\n                    object.amount = 0;\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                if (message.amount != null && message.hasOwnProperty(\"amount\"))\n                    object.amount = message.amount;\n                return object;\n            };\n\n            /**\n             * Converts this Material to JSON.\n             * @function toJSON\n             * @memberof NT.Item.Material\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Material.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Material\n             * @function getTypeUrl\n             * @memberof NT.Item.Material\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Material.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.Item.Material\";\n            };\n\n            return Material;\n        })();\n\n        return Item;\n    })();\n\n    NT.EntityItem = (function() {\n\n        /**\n         * Properties of an EntityItem.\n         * @memberof NT\n         * @interface IEntityItem\n         * @property {string|null} [id] EntityItem id\n         * @property {string|null} [path] EntityItem path\n         * @property {string|null} [sprite] EntityItem sprite\n         * @property {string|null} [sentBy] EntityItem sentBy\n         */\n\n        /**\n         * Constructs a new EntityItem.\n         * @memberof NT\n         * @classdesc Represents an EntityItem.\n         * @implements IEntityItem\n         * @constructor\n         * @param {NT.IEntityItem=} [properties] Properties to set\n         */\n        function EntityItem(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * EntityItem id.\n         * @member {string} id\n         * @memberof NT.EntityItem\n         * @instance\n         */\n        EntityItem.prototype.id = \"\";\n\n        /**\n         * EntityItem path.\n         * @member {string} path\n         * @memberof NT.EntityItem\n         * @instance\n         */\n        EntityItem.prototype.path = \"\";\n\n        /**\n         * EntityItem sprite.\n         * @member {string} sprite\n         * @memberof NT.EntityItem\n         * @instance\n         */\n        EntityItem.prototype.sprite = \"\";\n\n        /**\n         * EntityItem sentBy.\n         * @member {string|null|undefined} sentBy\n         * @memberof NT.EntityItem\n         * @instance\n         */\n        EntityItem.prototype.sentBy = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * EntityItem _sentBy.\n         * @member {\"sentBy\"|undefined} _sentBy\n         * @memberof NT.EntityItem\n         * @instance\n         */\n        Object.defineProperty(EntityItem.prototype, \"_sentBy\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sentBy\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new EntityItem instance using the specified properties.\n         * @function create\n         * @memberof NT.EntityItem\n         * @static\n         * @param {NT.IEntityItem=} [properties] Properties to set\n         * @returns {NT.EntityItem} EntityItem instance\n         */\n        EntityItem.create = function create(properties) {\n            return new EntityItem(properties);\n        };\n\n        /**\n         * Encodes the specified EntityItem message. Does not implicitly {@link NT.EntityItem.verify|verify} messages.\n         * @function encode\n         * @memberof NT.EntityItem\n         * @static\n         * @param {NT.IEntityItem} message EntityItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EntityItem.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.path != null && Object.hasOwnProperty.call(message, \"path\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.path);\n            if (message.sprite != null && Object.hasOwnProperty.call(message, \"sprite\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.sprite);\n            if (message.sentBy != null && Object.hasOwnProperty.call(message, \"sentBy\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.sentBy);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified EntityItem message, length delimited. Does not implicitly {@link NT.EntityItem.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.EntityItem\n         * @static\n         * @param {NT.IEntityItem} message EntityItem message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        EntityItem.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an EntityItem message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.EntityItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.EntityItem} EntityItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EntityItem.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.EntityItem();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.path = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.sprite = reader.string();\n                        break;\n                    }\n                case 4: {\n                        message.sentBy = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an EntityItem message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.EntityItem\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.EntityItem} EntityItem\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        EntityItem.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an EntityItem message.\n         * @function verify\n         * @memberof NT.EntityItem\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        EntityItem.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.path != null && message.hasOwnProperty(\"path\"))\n                if (!$util.isString(message.path))\n                    return \"path: string expected\";\n            if (message.sprite != null && message.hasOwnProperty(\"sprite\"))\n                if (!$util.isString(message.sprite))\n                    return \"sprite: string expected\";\n            if (message.sentBy != null && message.hasOwnProperty(\"sentBy\")) {\n                properties._sentBy = 1;\n                if (!$util.isString(message.sentBy))\n                    return \"sentBy: string expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates an EntityItem message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.EntityItem\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.EntityItem} EntityItem\n         */\n        EntityItem.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.EntityItem)\n                return object;\n            let message = new $root.NT.EntityItem();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.path != null)\n                message.path = String(object.path);\n            if (object.sprite != null)\n                message.sprite = String(object.sprite);\n            if (object.sentBy != null)\n                message.sentBy = String(object.sentBy);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an EntityItem message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.EntityItem\n         * @static\n         * @param {NT.EntityItem} message EntityItem\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        EntityItem.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.id = \"\";\n                object.path = \"\";\n                object.sprite = \"\";\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.path != null && message.hasOwnProperty(\"path\"))\n                object.path = message.path;\n            if (message.sprite != null && message.hasOwnProperty(\"sprite\"))\n                object.sprite = message.sprite;\n            if (message.sentBy != null && message.hasOwnProperty(\"sentBy\")) {\n                object.sentBy = message.sentBy;\n                if (options.oneofs)\n                    object._sentBy = \"sentBy\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this EntityItem to JSON.\n         * @function toJSON\n         * @memberof NT.EntityItem\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        EntityItem.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for EntityItem\n         * @function getTypeUrl\n         * @memberof NT.EntityItem\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        EntityItem.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.EntityItem\";\n        };\n\n        return EntityItem;\n    })();\n\n    NT.LobbyAction = (function() {\n\n        /**\n         * Properties of a LobbyAction.\n         * @memberof NT\n         * @interface ILobbyAction\n         * @property {NT.IClientRoomCreate|null} [cRoomCreate] LobbyAction cRoomCreate\n         * @property {NT.IServerRoomCreated|null} [sRoomCreated] LobbyAction sRoomCreated\n         * @property {NT.IServerRoomCreateFailed|null} [sRoomCreateFailed] LobbyAction sRoomCreateFailed\n         * @property {NT.IClientRoomUpdate|null} [cRoomUpdate] LobbyAction cRoomUpdate\n         * @property {NT.IServerRoomUpdated|null} [sRoomUpdated] LobbyAction sRoomUpdated\n         * @property {NT.IServerRoomUpdateFailed|null} [sRoomUpdateFailed] LobbyAction sRoomUpdateFailed\n         * @property {NT.IClientRoomFlagsUpdate|null} [cRoomFlagsUpdate] LobbyAction cRoomFlagsUpdate\n         * @property {NT.IServerRoomFlagsUpdated|null} [sRoomFlagsUpdated] LobbyAction sRoomFlagsUpdated\n         * @property {NT.IServerRoomFlagsUpdateFailed|null} [sRoomFlagsUpdateFailed] LobbyAction sRoomFlagsUpdateFailed\n         * @property {NT.IClientRoomDelete|null} [cRoomDelete] LobbyAction cRoomDelete\n         * @property {NT.IServerRoomDeleted|null} [sRoomDeleted] LobbyAction sRoomDeleted\n         * @property {NT.IClientJoinRoom|null} [cJoinRoom] LobbyAction cJoinRoom\n         * @property {NT.IServerJoinRoomSuccess|null} [sJoinRoomSuccess] LobbyAction sJoinRoomSuccess\n         * @property {NT.IServerJoinRoomFailed|null} [sJoinRoomFailed] LobbyAction sJoinRoomFailed\n         * @property {NT.IServerUserJoinedRoom|null} [sUserJoinedRoom] LobbyAction sUserJoinedRoom\n         * @property {NT.IClientLeaveRoom|null} [cLeaveRoom] LobbyAction cLeaveRoom\n         * @property {NT.IServerUserLeftRoom|null} [sUserLeftRoom] LobbyAction sUserLeftRoom\n         * @property {NT.IClientKickUser|null} [cKickUser] LobbyAction cKickUser\n         * @property {NT.IServerUserKicked|null} [sUserKicked] LobbyAction sUserKicked\n         * @property {NT.IClientBanUser|null} [cBanUser] LobbyAction cBanUser\n         * @property {NT.IServerUserBanned|null} [sUserBanned] LobbyAction sUserBanned\n         * @property {NT.IClientReadyState|null} [cReadyState] LobbyAction cReadyState\n         * @property {NT.IServerUserReadyState|null} [sUserReadyState] LobbyAction sUserReadyState\n         * @property {NT.IClientStartRun|null} [cStartRun] LobbyAction cStartRun\n         * @property {NT.IServerHostStart|null} [sHostStart] LobbyAction sHostStart\n         * @property {NT.IClientRequestRoomList|null} [cRequestRoomList] LobbyAction cRequestRoomList\n         * @property {NT.IServerRoomList|null} [sRoomList] LobbyAction sRoomList\n         * @property {NT.IServerDisconnected|null} [sDisconnected] LobbyAction sDisconnected\n         * @property {NT.IServerRoomAddToList|null} [sRoomAddToList] LobbyAction sRoomAddToList\n         * @property {NT.IClientRunOver|null} [cRunOver] LobbyAction cRunOver\n         */\n\n        /**\n         * Constructs a new LobbyAction.\n         * @memberof NT\n         * @classdesc Represents a LobbyAction.\n         * @implements ILobbyAction\n         * @constructor\n         * @param {NT.ILobbyAction=} [properties] Properties to set\n         */\n        function LobbyAction(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * LobbyAction cRoomCreate.\n         * @member {NT.IClientRoomCreate|null|undefined} cRoomCreate\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.cRoomCreate = null;\n\n        /**\n         * LobbyAction sRoomCreated.\n         * @member {NT.IServerRoomCreated|null|undefined} sRoomCreated\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sRoomCreated = null;\n\n        /**\n         * LobbyAction sRoomCreateFailed.\n         * @member {NT.IServerRoomCreateFailed|null|undefined} sRoomCreateFailed\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sRoomCreateFailed = null;\n\n        /**\n         * LobbyAction cRoomUpdate.\n         * @member {NT.IClientRoomUpdate|null|undefined} cRoomUpdate\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.cRoomUpdate = null;\n\n        /**\n         * LobbyAction sRoomUpdated.\n         * @member {NT.IServerRoomUpdated|null|undefined} sRoomUpdated\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sRoomUpdated = null;\n\n        /**\n         * LobbyAction sRoomUpdateFailed.\n         * @member {NT.IServerRoomUpdateFailed|null|undefined} sRoomUpdateFailed\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sRoomUpdateFailed = null;\n\n        /**\n         * LobbyAction cRoomFlagsUpdate.\n         * @member {NT.IClientRoomFlagsUpdate|null|undefined} cRoomFlagsUpdate\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.cRoomFlagsUpdate = null;\n\n        /**\n         * LobbyAction sRoomFlagsUpdated.\n         * @member {NT.IServerRoomFlagsUpdated|null|undefined} sRoomFlagsUpdated\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sRoomFlagsUpdated = null;\n\n        /**\n         * LobbyAction sRoomFlagsUpdateFailed.\n         * @member {NT.IServerRoomFlagsUpdateFailed|null|undefined} sRoomFlagsUpdateFailed\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sRoomFlagsUpdateFailed = null;\n\n        /**\n         * LobbyAction cRoomDelete.\n         * @member {NT.IClientRoomDelete|null|undefined} cRoomDelete\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.cRoomDelete = null;\n\n        /**\n         * LobbyAction sRoomDeleted.\n         * @member {NT.IServerRoomDeleted|null|undefined} sRoomDeleted\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sRoomDeleted = null;\n\n        /**\n         * LobbyAction cJoinRoom.\n         * @member {NT.IClientJoinRoom|null|undefined} cJoinRoom\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.cJoinRoom = null;\n\n        /**\n         * LobbyAction sJoinRoomSuccess.\n         * @member {NT.IServerJoinRoomSuccess|null|undefined} sJoinRoomSuccess\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sJoinRoomSuccess = null;\n\n        /**\n         * LobbyAction sJoinRoomFailed.\n         * @member {NT.IServerJoinRoomFailed|null|undefined} sJoinRoomFailed\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sJoinRoomFailed = null;\n\n        /**\n         * LobbyAction sUserJoinedRoom.\n         * @member {NT.IServerUserJoinedRoom|null|undefined} sUserJoinedRoom\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sUserJoinedRoom = null;\n\n        /**\n         * LobbyAction cLeaveRoom.\n         * @member {NT.IClientLeaveRoom|null|undefined} cLeaveRoom\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.cLeaveRoom = null;\n\n        /**\n         * LobbyAction sUserLeftRoom.\n         * @member {NT.IServerUserLeftRoom|null|undefined} sUserLeftRoom\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sUserLeftRoom = null;\n\n        /**\n         * LobbyAction cKickUser.\n         * @member {NT.IClientKickUser|null|undefined} cKickUser\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.cKickUser = null;\n\n        /**\n         * LobbyAction sUserKicked.\n         * @member {NT.IServerUserKicked|null|undefined} sUserKicked\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sUserKicked = null;\n\n        /**\n         * LobbyAction cBanUser.\n         * @member {NT.IClientBanUser|null|undefined} cBanUser\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.cBanUser = null;\n\n        /**\n         * LobbyAction sUserBanned.\n         * @member {NT.IServerUserBanned|null|undefined} sUserBanned\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sUserBanned = null;\n\n        /**\n         * LobbyAction cReadyState.\n         * @member {NT.IClientReadyState|null|undefined} cReadyState\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.cReadyState = null;\n\n        /**\n         * LobbyAction sUserReadyState.\n         * @member {NT.IServerUserReadyState|null|undefined} sUserReadyState\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sUserReadyState = null;\n\n        /**\n         * LobbyAction cStartRun.\n         * @member {NT.IClientStartRun|null|undefined} cStartRun\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.cStartRun = null;\n\n        /**\n         * LobbyAction sHostStart.\n         * @member {NT.IServerHostStart|null|undefined} sHostStart\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sHostStart = null;\n\n        /**\n         * LobbyAction cRequestRoomList.\n         * @member {NT.IClientRequestRoomList|null|undefined} cRequestRoomList\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.cRequestRoomList = null;\n\n        /**\n         * LobbyAction sRoomList.\n         * @member {NT.IServerRoomList|null|undefined} sRoomList\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sRoomList = null;\n\n        /**\n         * LobbyAction sDisconnected.\n         * @member {NT.IServerDisconnected|null|undefined} sDisconnected\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sDisconnected = null;\n\n        /**\n         * LobbyAction sRoomAddToList.\n         * @member {NT.IServerRoomAddToList|null|undefined} sRoomAddToList\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.sRoomAddToList = null;\n\n        /**\n         * LobbyAction cRunOver.\n         * @member {NT.IClientRunOver|null|undefined} cRunOver\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        LobbyAction.prototype.cRunOver = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * LobbyAction action.\n         * @member {\"cRoomCreate\"|\"sRoomCreated\"|\"sRoomCreateFailed\"|\"cRoomUpdate\"|\"sRoomUpdated\"|\"sRoomUpdateFailed\"|\"cRoomFlagsUpdate\"|\"sRoomFlagsUpdated\"|\"sRoomFlagsUpdateFailed\"|\"cRoomDelete\"|\"sRoomDeleted\"|\"cJoinRoom\"|\"sJoinRoomSuccess\"|\"sJoinRoomFailed\"|\"sUserJoinedRoom\"|\"cLeaveRoom\"|\"sUserLeftRoom\"|\"cKickUser\"|\"sUserKicked\"|\"cBanUser\"|\"sUserBanned\"|\"cReadyState\"|\"sUserReadyState\"|\"cStartRun\"|\"sHostStart\"|\"cRequestRoomList\"|\"sRoomList\"|\"sDisconnected\"|\"sRoomAddToList\"|\"cRunOver\"|undefined} action\n         * @memberof NT.LobbyAction\n         * @instance\n         */\n        Object.defineProperty(LobbyAction.prototype, \"action\", {\n            get: $util.oneOfGetter($oneOfFields = [\"cRoomCreate\", \"sRoomCreated\", \"sRoomCreateFailed\", \"cRoomUpdate\", \"sRoomUpdated\", \"sRoomUpdateFailed\", \"cRoomFlagsUpdate\", \"sRoomFlagsUpdated\", \"sRoomFlagsUpdateFailed\", \"cRoomDelete\", \"sRoomDeleted\", \"cJoinRoom\", \"sJoinRoomSuccess\", \"sJoinRoomFailed\", \"sUserJoinedRoom\", \"cLeaveRoom\", \"sUserLeftRoom\", \"cKickUser\", \"sUserKicked\", \"cBanUser\", \"sUserBanned\", \"cReadyState\", \"sUserReadyState\", \"cStartRun\", \"sHostStart\", \"cRequestRoomList\", \"sRoomList\", \"sDisconnected\", \"sRoomAddToList\", \"cRunOver\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new LobbyAction instance using the specified properties.\n         * @function create\n         * @memberof NT.LobbyAction\n         * @static\n         * @param {NT.ILobbyAction=} [properties] Properties to set\n         * @returns {NT.LobbyAction} LobbyAction instance\n         */\n        LobbyAction.create = function create(properties) {\n            return new LobbyAction(properties);\n        };\n\n        /**\n         * Encodes the specified LobbyAction message. Does not implicitly {@link NT.LobbyAction.verify|verify} messages.\n         * @function encode\n         * @memberof NT.LobbyAction\n         * @static\n         * @param {NT.ILobbyAction} message LobbyAction message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LobbyAction.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.cRoomCreate != null && Object.hasOwnProperty.call(message, \"cRoomCreate\"))\n                $root.NT.ClientRoomCreate.encode(message.cRoomCreate, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.sRoomCreated != null && Object.hasOwnProperty.call(message, \"sRoomCreated\"))\n                $root.NT.ServerRoomCreated.encode(message.sRoomCreated, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.sRoomCreateFailed != null && Object.hasOwnProperty.call(message, \"sRoomCreateFailed\"))\n                $root.NT.ServerRoomCreateFailed.encode(message.sRoomCreateFailed, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.cRoomUpdate != null && Object.hasOwnProperty.call(message, \"cRoomUpdate\"))\n                $root.NT.ClientRoomUpdate.encode(message.cRoomUpdate, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.sRoomUpdated != null && Object.hasOwnProperty.call(message, \"sRoomUpdated\"))\n                $root.NT.ServerRoomUpdated.encode(message.sRoomUpdated, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.sRoomUpdateFailed != null && Object.hasOwnProperty.call(message, \"sRoomUpdateFailed\"))\n                $root.NT.ServerRoomUpdateFailed.encode(message.sRoomUpdateFailed, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            if (message.cRoomFlagsUpdate != null && Object.hasOwnProperty.call(message, \"cRoomFlagsUpdate\"))\n                $root.NT.ClientRoomFlagsUpdate.encode(message.cRoomFlagsUpdate, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            if (message.sRoomFlagsUpdated != null && Object.hasOwnProperty.call(message, \"sRoomFlagsUpdated\"))\n                $root.NT.ServerRoomFlagsUpdated.encode(message.sRoomFlagsUpdated, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();\n            if (message.sRoomFlagsUpdateFailed != null && Object.hasOwnProperty.call(message, \"sRoomFlagsUpdateFailed\"))\n                $root.NT.ServerRoomFlagsUpdateFailed.encode(message.sRoomFlagsUpdateFailed, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();\n            if (message.cRoomDelete != null && Object.hasOwnProperty.call(message, \"cRoomDelete\"))\n                $root.NT.ClientRoomDelete.encode(message.cRoomDelete, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n            if (message.sRoomDeleted != null && Object.hasOwnProperty.call(message, \"sRoomDeleted\"))\n                $root.NT.ServerRoomDeleted.encode(message.sRoomDeleted, writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.cJoinRoom != null && Object.hasOwnProperty.call(message, \"cJoinRoom\"))\n                $root.NT.ClientJoinRoom.encode(message.cJoinRoom, writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.sJoinRoomSuccess != null && Object.hasOwnProperty.call(message, \"sJoinRoomSuccess\"))\n                $root.NT.ServerJoinRoomSuccess.encode(message.sJoinRoomSuccess, writer.uint32(/* id 13, wireType 2 =*/106).fork()).ldelim();\n            if (message.sJoinRoomFailed != null && Object.hasOwnProperty.call(message, \"sJoinRoomFailed\"))\n                $root.NT.ServerJoinRoomFailed.encode(message.sJoinRoomFailed, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n            if (message.sUserJoinedRoom != null && Object.hasOwnProperty.call(message, \"sUserJoinedRoom\"))\n                $root.NT.ServerUserJoinedRoom.encode(message.sUserJoinedRoom, writer.uint32(/* id 15, wireType 2 =*/122).fork()).ldelim();\n            if (message.cLeaveRoom != null && Object.hasOwnProperty.call(message, \"cLeaveRoom\"))\n                $root.NT.ClientLeaveRoom.encode(message.cLeaveRoom, writer.uint32(/* id 16, wireType 2 =*/130).fork()).ldelim();\n            if (message.sUserLeftRoom != null && Object.hasOwnProperty.call(message, \"sUserLeftRoom\"))\n                $root.NT.ServerUserLeftRoom.encode(message.sUserLeftRoom, writer.uint32(/* id 17, wireType 2 =*/138).fork()).ldelim();\n            if (message.cKickUser != null && Object.hasOwnProperty.call(message, \"cKickUser\"))\n                $root.NT.ClientKickUser.encode(message.cKickUser, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n            if (message.sUserKicked != null && Object.hasOwnProperty.call(message, \"sUserKicked\"))\n                $root.NT.ServerUserKicked.encode(message.sUserKicked, writer.uint32(/* id 19, wireType 2 =*/154).fork()).ldelim();\n            if (message.cBanUser != null && Object.hasOwnProperty.call(message, \"cBanUser\"))\n                $root.NT.ClientBanUser.encode(message.cBanUser, writer.uint32(/* id 20, wireType 2 =*/162).fork()).ldelim();\n            if (message.sUserBanned != null && Object.hasOwnProperty.call(message, \"sUserBanned\"))\n                $root.NT.ServerUserBanned.encode(message.sUserBanned, writer.uint32(/* id 21, wireType 2 =*/170).fork()).ldelim();\n            if (message.cReadyState != null && Object.hasOwnProperty.call(message, \"cReadyState\"))\n                $root.NT.ClientReadyState.encode(message.cReadyState, writer.uint32(/* id 22, wireType 2 =*/178).fork()).ldelim();\n            if (message.sUserReadyState != null && Object.hasOwnProperty.call(message, \"sUserReadyState\"))\n                $root.NT.ServerUserReadyState.encode(message.sUserReadyState, writer.uint32(/* id 23, wireType 2 =*/186).fork()).ldelim();\n            if (message.cStartRun != null && Object.hasOwnProperty.call(message, \"cStartRun\"))\n                $root.NT.ClientStartRun.encode(message.cStartRun, writer.uint32(/* id 24, wireType 2 =*/194).fork()).ldelim();\n            if (message.sHostStart != null && Object.hasOwnProperty.call(message, \"sHostStart\"))\n                $root.NT.ServerHostStart.encode(message.sHostStart, writer.uint32(/* id 25, wireType 2 =*/202).fork()).ldelim();\n            if (message.cRequestRoomList != null && Object.hasOwnProperty.call(message, \"cRequestRoomList\"))\n                $root.NT.ClientRequestRoomList.encode(message.cRequestRoomList, writer.uint32(/* id 27, wireType 2 =*/218).fork()).ldelim();\n            if (message.sRoomList != null && Object.hasOwnProperty.call(message, \"sRoomList\"))\n                $root.NT.ServerRoomList.encode(message.sRoomList, writer.uint32(/* id 28, wireType 2 =*/226).fork()).ldelim();\n            if (message.sDisconnected != null && Object.hasOwnProperty.call(message, \"sDisconnected\"))\n                $root.NT.ServerDisconnected.encode(message.sDisconnected, writer.uint32(/* id 31, wireType 2 =*/250).fork()).ldelim();\n            if (message.sRoomAddToList != null && Object.hasOwnProperty.call(message, \"sRoomAddToList\"))\n                $root.NT.ServerRoomAddToList.encode(message.sRoomAddToList, writer.uint32(/* id 32, wireType 2 =*/258).fork()).ldelim();\n            if (message.cRunOver != null && Object.hasOwnProperty.call(message, \"cRunOver\"))\n                $root.NT.ClientRunOver.encode(message.cRunOver, writer.uint32(/* id 33, wireType 2 =*/266).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified LobbyAction message, length delimited. Does not implicitly {@link NT.LobbyAction.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.LobbyAction\n         * @static\n         * @param {NT.ILobbyAction} message LobbyAction message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        LobbyAction.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a LobbyAction message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.LobbyAction\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.LobbyAction} LobbyAction\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LobbyAction.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.LobbyAction();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.cRoomCreate = $root.NT.ClientRoomCreate.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 2: {\n                        message.sRoomCreated = $root.NT.ServerRoomCreated.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 3: {\n                        message.sRoomCreateFailed = $root.NT.ServerRoomCreateFailed.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 4: {\n                        message.cRoomUpdate = $root.NT.ClientRoomUpdate.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 5: {\n                        message.sRoomUpdated = $root.NT.ServerRoomUpdated.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 6: {\n                        message.sRoomUpdateFailed = $root.NT.ServerRoomUpdateFailed.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 7: {\n                        message.cRoomFlagsUpdate = $root.NT.ClientRoomFlagsUpdate.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 8: {\n                        message.sRoomFlagsUpdated = $root.NT.ServerRoomFlagsUpdated.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 9: {\n                        message.sRoomFlagsUpdateFailed = $root.NT.ServerRoomFlagsUpdateFailed.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 10: {\n                        message.cRoomDelete = $root.NT.ClientRoomDelete.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 11: {\n                        message.sRoomDeleted = $root.NT.ServerRoomDeleted.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 12: {\n                        message.cJoinRoom = $root.NT.ClientJoinRoom.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 13: {\n                        message.sJoinRoomSuccess = $root.NT.ServerJoinRoomSuccess.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 14: {\n                        message.sJoinRoomFailed = $root.NT.ServerJoinRoomFailed.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 15: {\n                        message.sUserJoinedRoom = $root.NT.ServerUserJoinedRoom.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 16: {\n                        message.cLeaveRoom = $root.NT.ClientLeaveRoom.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 17: {\n                        message.sUserLeftRoom = $root.NT.ServerUserLeftRoom.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 18: {\n                        message.cKickUser = $root.NT.ClientKickUser.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 19: {\n                        message.sUserKicked = $root.NT.ServerUserKicked.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 20: {\n                        message.cBanUser = $root.NT.ClientBanUser.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 21: {\n                        message.sUserBanned = $root.NT.ServerUserBanned.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 22: {\n                        message.cReadyState = $root.NT.ClientReadyState.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 23: {\n                        message.sUserReadyState = $root.NT.ServerUserReadyState.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 24: {\n                        message.cStartRun = $root.NT.ClientStartRun.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 25: {\n                        message.sHostStart = $root.NT.ServerHostStart.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 27: {\n                        message.cRequestRoomList = $root.NT.ClientRequestRoomList.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 28: {\n                        message.sRoomList = $root.NT.ServerRoomList.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 31: {\n                        message.sDisconnected = $root.NT.ServerDisconnected.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 32: {\n                        message.sRoomAddToList = $root.NT.ServerRoomAddToList.decode(reader, reader.uint32());\n                        break;\n                    }\n                case 33: {\n                        message.cRunOver = $root.NT.ClientRunOver.decode(reader, reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a LobbyAction message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.LobbyAction\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.LobbyAction} LobbyAction\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        LobbyAction.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a LobbyAction message.\n         * @function verify\n         * @memberof NT.LobbyAction\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        LobbyAction.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.cRoomCreate != null && message.hasOwnProperty(\"cRoomCreate\")) {\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientRoomCreate.verify(message.cRoomCreate);\n                    if (error)\n                        return \"cRoomCreate.\" + error;\n                }\n            }\n            if (message.sRoomCreated != null && message.hasOwnProperty(\"sRoomCreated\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerRoomCreated.verify(message.sRoomCreated);\n                    if (error)\n                        return \"sRoomCreated.\" + error;\n                }\n            }\n            if (message.sRoomCreateFailed != null && message.hasOwnProperty(\"sRoomCreateFailed\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerRoomCreateFailed.verify(message.sRoomCreateFailed);\n                    if (error)\n                        return \"sRoomCreateFailed.\" + error;\n                }\n            }\n            if (message.cRoomUpdate != null && message.hasOwnProperty(\"cRoomUpdate\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientRoomUpdate.verify(message.cRoomUpdate);\n                    if (error)\n                        return \"cRoomUpdate.\" + error;\n                }\n            }\n            if (message.sRoomUpdated != null && message.hasOwnProperty(\"sRoomUpdated\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerRoomUpdated.verify(message.sRoomUpdated);\n                    if (error)\n                        return \"sRoomUpdated.\" + error;\n                }\n            }\n            if (message.sRoomUpdateFailed != null && message.hasOwnProperty(\"sRoomUpdateFailed\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerRoomUpdateFailed.verify(message.sRoomUpdateFailed);\n                    if (error)\n                        return \"sRoomUpdateFailed.\" + error;\n                }\n            }\n            if (message.cRoomFlagsUpdate != null && message.hasOwnProperty(\"cRoomFlagsUpdate\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientRoomFlagsUpdate.verify(message.cRoomFlagsUpdate);\n                    if (error)\n                        return \"cRoomFlagsUpdate.\" + error;\n                }\n            }\n            if (message.sRoomFlagsUpdated != null && message.hasOwnProperty(\"sRoomFlagsUpdated\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerRoomFlagsUpdated.verify(message.sRoomFlagsUpdated);\n                    if (error)\n                        return \"sRoomFlagsUpdated.\" + error;\n                }\n            }\n            if (message.sRoomFlagsUpdateFailed != null && message.hasOwnProperty(\"sRoomFlagsUpdateFailed\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerRoomFlagsUpdateFailed.verify(message.sRoomFlagsUpdateFailed);\n                    if (error)\n                        return \"sRoomFlagsUpdateFailed.\" + error;\n                }\n            }\n            if (message.cRoomDelete != null && message.hasOwnProperty(\"cRoomDelete\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientRoomDelete.verify(message.cRoomDelete);\n                    if (error)\n                        return \"cRoomDelete.\" + error;\n                }\n            }\n            if (message.sRoomDeleted != null && message.hasOwnProperty(\"sRoomDeleted\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerRoomDeleted.verify(message.sRoomDeleted);\n                    if (error)\n                        return \"sRoomDeleted.\" + error;\n                }\n            }\n            if (message.cJoinRoom != null && message.hasOwnProperty(\"cJoinRoom\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientJoinRoom.verify(message.cJoinRoom);\n                    if (error)\n                        return \"cJoinRoom.\" + error;\n                }\n            }\n            if (message.sJoinRoomSuccess != null && message.hasOwnProperty(\"sJoinRoomSuccess\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerJoinRoomSuccess.verify(message.sJoinRoomSuccess);\n                    if (error)\n                        return \"sJoinRoomSuccess.\" + error;\n                }\n            }\n            if (message.sJoinRoomFailed != null && message.hasOwnProperty(\"sJoinRoomFailed\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerJoinRoomFailed.verify(message.sJoinRoomFailed);\n                    if (error)\n                        return \"sJoinRoomFailed.\" + error;\n                }\n            }\n            if (message.sUserJoinedRoom != null && message.hasOwnProperty(\"sUserJoinedRoom\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerUserJoinedRoom.verify(message.sUserJoinedRoom);\n                    if (error)\n                        return \"sUserJoinedRoom.\" + error;\n                }\n            }\n            if (message.cLeaveRoom != null && message.hasOwnProperty(\"cLeaveRoom\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientLeaveRoom.verify(message.cLeaveRoom);\n                    if (error)\n                        return \"cLeaveRoom.\" + error;\n                }\n            }\n            if (message.sUserLeftRoom != null && message.hasOwnProperty(\"sUserLeftRoom\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerUserLeftRoom.verify(message.sUserLeftRoom);\n                    if (error)\n                        return \"sUserLeftRoom.\" + error;\n                }\n            }\n            if (message.cKickUser != null && message.hasOwnProperty(\"cKickUser\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientKickUser.verify(message.cKickUser);\n                    if (error)\n                        return \"cKickUser.\" + error;\n                }\n            }\n            if (message.sUserKicked != null && message.hasOwnProperty(\"sUserKicked\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerUserKicked.verify(message.sUserKicked);\n                    if (error)\n                        return \"sUserKicked.\" + error;\n                }\n            }\n            if (message.cBanUser != null && message.hasOwnProperty(\"cBanUser\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientBanUser.verify(message.cBanUser);\n                    if (error)\n                        return \"cBanUser.\" + error;\n                }\n            }\n            if (message.sUserBanned != null && message.hasOwnProperty(\"sUserBanned\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerUserBanned.verify(message.sUserBanned);\n                    if (error)\n                        return \"sUserBanned.\" + error;\n                }\n            }\n            if (message.cReadyState != null && message.hasOwnProperty(\"cReadyState\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientReadyState.verify(message.cReadyState);\n                    if (error)\n                        return \"cReadyState.\" + error;\n                }\n            }\n            if (message.sUserReadyState != null && message.hasOwnProperty(\"sUserReadyState\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerUserReadyState.verify(message.sUserReadyState);\n                    if (error)\n                        return \"sUserReadyState.\" + error;\n                }\n            }\n            if (message.cStartRun != null && message.hasOwnProperty(\"cStartRun\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientStartRun.verify(message.cStartRun);\n                    if (error)\n                        return \"cStartRun.\" + error;\n                }\n            }\n            if (message.sHostStart != null && message.hasOwnProperty(\"sHostStart\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerHostStart.verify(message.sHostStart);\n                    if (error)\n                        return \"sHostStart.\" + error;\n                }\n            }\n            if (message.cRequestRoomList != null && message.hasOwnProperty(\"cRequestRoomList\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientRequestRoomList.verify(message.cRequestRoomList);\n                    if (error)\n                        return \"cRequestRoomList.\" + error;\n                }\n            }\n            if (message.sRoomList != null && message.hasOwnProperty(\"sRoomList\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerRoomList.verify(message.sRoomList);\n                    if (error)\n                        return \"sRoomList.\" + error;\n                }\n            }\n            if (message.sDisconnected != null && message.hasOwnProperty(\"sDisconnected\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerDisconnected.verify(message.sDisconnected);\n                    if (error)\n                        return \"sDisconnected.\" + error;\n                }\n            }\n            if (message.sRoomAddToList != null && message.hasOwnProperty(\"sRoomAddToList\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ServerRoomAddToList.verify(message.sRoomAddToList);\n                    if (error)\n                        return \"sRoomAddToList.\" + error;\n                }\n            }\n            if (message.cRunOver != null && message.hasOwnProperty(\"cRunOver\")) {\n                if (properties.action === 1)\n                    return \"action: multiple values\";\n                properties.action = 1;\n                {\n                    let error = $root.NT.ClientRunOver.verify(message.cRunOver);\n                    if (error)\n                        return \"cRunOver.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a LobbyAction message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.LobbyAction\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.LobbyAction} LobbyAction\n         */\n        LobbyAction.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.LobbyAction)\n                return object;\n            let message = new $root.NT.LobbyAction();\n            if (object.cRoomCreate != null) {\n                if (typeof object.cRoomCreate !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.cRoomCreate: object expected\");\n                message.cRoomCreate = $root.NT.ClientRoomCreate.fromObject(object.cRoomCreate);\n            }\n            if (object.sRoomCreated != null) {\n                if (typeof object.sRoomCreated !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sRoomCreated: object expected\");\n                message.sRoomCreated = $root.NT.ServerRoomCreated.fromObject(object.sRoomCreated);\n            }\n            if (object.sRoomCreateFailed != null) {\n                if (typeof object.sRoomCreateFailed !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sRoomCreateFailed: object expected\");\n                message.sRoomCreateFailed = $root.NT.ServerRoomCreateFailed.fromObject(object.sRoomCreateFailed);\n            }\n            if (object.cRoomUpdate != null) {\n                if (typeof object.cRoomUpdate !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.cRoomUpdate: object expected\");\n                message.cRoomUpdate = $root.NT.ClientRoomUpdate.fromObject(object.cRoomUpdate);\n            }\n            if (object.sRoomUpdated != null) {\n                if (typeof object.sRoomUpdated !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sRoomUpdated: object expected\");\n                message.sRoomUpdated = $root.NT.ServerRoomUpdated.fromObject(object.sRoomUpdated);\n            }\n            if (object.sRoomUpdateFailed != null) {\n                if (typeof object.sRoomUpdateFailed !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sRoomUpdateFailed: object expected\");\n                message.sRoomUpdateFailed = $root.NT.ServerRoomUpdateFailed.fromObject(object.sRoomUpdateFailed);\n            }\n            if (object.cRoomFlagsUpdate != null) {\n                if (typeof object.cRoomFlagsUpdate !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.cRoomFlagsUpdate: object expected\");\n                message.cRoomFlagsUpdate = $root.NT.ClientRoomFlagsUpdate.fromObject(object.cRoomFlagsUpdate);\n            }\n            if (object.sRoomFlagsUpdated != null) {\n                if (typeof object.sRoomFlagsUpdated !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sRoomFlagsUpdated: object expected\");\n                message.sRoomFlagsUpdated = $root.NT.ServerRoomFlagsUpdated.fromObject(object.sRoomFlagsUpdated);\n            }\n            if (object.sRoomFlagsUpdateFailed != null) {\n                if (typeof object.sRoomFlagsUpdateFailed !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sRoomFlagsUpdateFailed: object expected\");\n                message.sRoomFlagsUpdateFailed = $root.NT.ServerRoomFlagsUpdateFailed.fromObject(object.sRoomFlagsUpdateFailed);\n            }\n            if (object.cRoomDelete != null) {\n                if (typeof object.cRoomDelete !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.cRoomDelete: object expected\");\n                message.cRoomDelete = $root.NT.ClientRoomDelete.fromObject(object.cRoomDelete);\n            }\n            if (object.sRoomDeleted != null) {\n                if (typeof object.sRoomDeleted !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sRoomDeleted: object expected\");\n                message.sRoomDeleted = $root.NT.ServerRoomDeleted.fromObject(object.sRoomDeleted);\n            }\n            if (object.cJoinRoom != null) {\n                if (typeof object.cJoinRoom !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.cJoinRoom: object expected\");\n                message.cJoinRoom = $root.NT.ClientJoinRoom.fromObject(object.cJoinRoom);\n            }\n            if (object.sJoinRoomSuccess != null) {\n                if (typeof object.sJoinRoomSuccess !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sJoinRoomSuccess: object expected\");\n                message.sJoinRoomSuccess = $root.NT.ServerJoinRoomSuccess.fromObject(object.sJoinRoomSuccess);\n            }\n            if (object.sJoinRoomFailed != null) {\n                if (typeof object.sJoinRoomFailed !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sJoinRoomFailed: object expected\");\n                message.sJoinRoomFailed = $root.NT.ServerJoinRoomFailed.fromObject(object.sJoinRoomFailed);\n            }\n            if (object.sUserJoinedRoom != null) {\n                if (typeof object.sUserJoinedRoom !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sUserJoinedRoom: object expected\");\n                message.sUserJoinedRoom = $root.NT.ServerUserJoinedRoom.fromObject(object.sUserJoinedRoom);\n            }\n            if (object.cLeaveRoom != null) {\n                if (typeof object.cLeaveRoom !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.cLeaveRoom: object expected\");\n                message.cLeaveRoom = $root.NT.ClientLeaveRoom.fromObject(object.cLeaveRoom);\n            }\n            if (object.sUserLeftRoom != null) {\n                if (typeof object.sUserLeftRoom !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sUserLeftRoom: object expected\");\n                message.sUserLeftRoom = $root.NT.ServerUserLeftRoom.fromObject(object.sUserLeftRoom);\n            }\n            if (object.cKickUser != null) {\n                if (typeof object.cKickUser !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.cKickUser: object expected\");\n                message.cKickUser = $root.NT.ClientKickUser.fromObject(object.cKickUser);\n            }\n            if (object.sUserKicked != null) {\n                if (typeof object.sUserKicked !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sUserKicked: object expected\");\n                message.sUserKicked = $root.NT.ServerUserKicked.fromObject(object.sUserKicked);\n            }\n            if (object.cBanUser != null) {\n                if (typeof object.cBanUser !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.cBanUser: object expected\");\n                message.cBanUser = $root.NT.ClientBanUser.fromObject(object.cBanUser);\n            }\n            if (object.sUserBanned != null) {\n                if (typeof object.sUserBanned !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sUserBanned: object expected\");\n                message.sUserBanned = $root.NT.ServerUserBanned.fromObject(object.sUserBanned);\n            }\n            if (object.cReadyState != null) {\n                if (typeof object.cReadyState !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.cReadyState: object expected\");\n                message.cReadyState = $root.NT.ClientReadyState.fromObject(object.cReadyState);\n            }\n            if (object.sUserReadyState != null) {\n                if (typeof object.sUserReadyState !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sUserReadyState: object expected\");\n                message.sUserReadyState = $root.NT.ServerUserReadyState.fromObject(object.sUserReadyState);\n            }\n            if (object.cStartRun != null) {\n                if (typeof object.cStartRun !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.cStartRun: object expected\");\n                message.cStartRun = $root.NT.ClientStartRun.fromObject(object.cStartRun);\n            }\n            if (object.sHostStart != null) {\n                if (typeof object.sHostStart !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sHostStart: object expected\");\n                message.sHostStart = $root.NT.ServerHostStart.fromObject(object.sHostStart);\n            }\n            if (object.cRequestRoomList != null) {\n                if (typeof object.cRequestRoomList !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.cRequestRoomList: object expected\");\n                message.cRequestRoomList = $root.NT.ClientRequestRoomList.fromObject(object.cRequestRoomList);\n            }\n            if (object.sRoomList != null) {\n                if (typeof object.sRoomList !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sRoomList: object expected\");\n                message.sRoomList = $root.NT.ServerRoomList.fromObject(object.sRoomList);\n            }\n            if (object.sDisconnected != null) {\n                if (typeof object.sDisconnected !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sDisconnected: object expected\");\n                message.sDisconnected = $root.NT.ServerDisconnected.fromObject(object.sDisconnected);\n            }\n            if (object.sRoomAddToList != null) {\n                if (typeof object.sRoomAddToList !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.sRoomAddToList: object expected\");\n                message.sRoomAddToList = $root.NT.ServerRoomAddToList.fromObject(object.sRoomAddToList);\n            }\n            if (object.cRunOver != null) {\n                if (typeof object.cRunOver !== \"object\")\n                    throw TypeError(\".NT.LobbyAction.cRunOver: object expected\");\n                message.cRunOver = $root.NT.ClientRunOver.fromObject(object.cRunOver);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a LobbyAction message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.LobbyAction\n         * @static\n         * @param {NT.LobbyAction} message LobbyAction\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        LobbyAction.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.cRoomCreate != null && message.hasOwnProperty(\"cRoomCreate\")) {\n                object.cRoomCreate = $root.NT.ClientRoomCreate.toObject(message.cRoomCreate, options);\n                if (options.oneofs)\n                    object.action = \"cRoomCreate\";\n            }\n            if (message.sRoomCreated != null && message.hasOwnProperty(\"sRoomCreated\")) {\n                object.sRoomCreated = $root.NT.ServerRoomCreated.toObject(message.sRoomCreated, options);\n                if (options.oneofs)\n                    object.action = \"sRoomCreated\";\n            }\n            if (message.sRoomCreateFailed != null && message.hasOwnProperty(\"sRoomCreateFailed\")) {\n                object.sRoomCreateFailed = $root.NT.ServerRoomCreateFailed.toObject(message.sRoomCreateFailed, options);\n                if (options.oneofs)\n                    object.action = \"sRoomCreateFailed\";\n            }\n            if (message.cRoomUpdate != null && message.hasOwnProperty(\"cRoomUpdate\")) {\n                object.cRoomUpdate = $root.NT.ClientRoomUpdate.toObject(message.cRoomUpdate, options);\n                if (options.oneofs)\n                    object.action = \"cRoomUpdate\";\n            }\n            if (message.sRoomUpdated != null && message.hasOwnProperty(\"sRoomUpdated\")) {\n                object.sRoomUpdated = $root.NT.ServerRoomUpdated.toObject(message.sRoomUpdated, options);\n                if (options.oneofs)\n                    object.action = \"sRoomUpdated\";\n            }\n            if (message.sRoomUpdateFailed != null && message.hasOwnProperty(\"sRoomUpdateFailed\")) {\n                object.sRoomUpdateFailed = $root.NT.ServerRoomUpdateFailed.toObject(message.sRoomUpdateFailed, options);\n                if (options.oneofs)\n                    object.action = \"sRoomUpdateFailed\";\n            }\n            if (message.cRoomFlagsUpdate != null && message.hasOwnProperty(\"cRoomFlagsUpdate\")) {\n                object.cRoomFlagsUpdate = $root.NT.ClientRoomFlagsUpdate.toObject(message.cRoomFlagsUpdate, options);\n                if (options.oneofs)\n                    object.action = \"cRoomFlagsUpdate\";\n            }\n            if (message.sRoomFlagsUpdated != null && message.hasOwnProperty(\"sRoomFlagsUpdated\")) {\n                object.sRoomFlagsUpdated = $root.NT.ServerRoomFlagsUpdated.toObject(message.sRoomFlagsUpdated, options);\n                if (options.oneofs)\n                    object.action = \"sRoomFlagsUpdated\";\n            }\n            if (message.sRoomFlagsUpdateFailed != null && message.hasOwnProperty(\"sRoomFlagsUpdateFailed\")) {\n                object.sRoomFlagsUpdateFailed = $root.NT.ServerRoomFlagsUpdateFailed.toObject(message.sRoomFlagsUpdateFailed, options);\n                if (options.oneofs)\n                    object.action = \"sRoomFlagsUpdateFailed\";\n            }\n            if (message.cRoomDelete != null && message.hasOwnProperty(\"cRoomDelete\")) {\n                object.cRoomDelete = $root.NT.ClientRoomDelete.toObject(message.cRoomDelete, options);\n                if (options.oneofs)\n                    object.action = \"cRoomDelete\";\n            }\n            if (message.sRoomDeleted != null && message.hasOwnProperty(\"sRoomDeleted\")) {\n                object.sRoomDeleted = $root.NT.ServerRoomDeleted.toObject(message.sRoomDeleted, options);\n                if (options.oneofs)\n                    object.action = \"sRoomDeleted\";\n            }\n            if (message.cJoinRoom != null && message.hasOwnProperty(\"cJoinRoom\")) {\n                object.cJoinRoom = $root.NT.ClientJoinRoom.toObject(message.cJoinRoom, options);\n                if (options.oneofs)\n                    object.action = \"cJoinRoom\";\n            }\n            if (message.sJoinRoomSuccess != null && message.hasOwnProperty(\"sJoinRoomSuccess\")) {\n                object.sJoinRoomSuccess = $root.NT.ServerJoinRoomSuccess.toObject(message.sJoinRoomSuccess, options);\n                if (options.oneofs)\n                    object.action = \"sJoinRoomSuccess\";\n            }\n            if (message.sJoinRoomFailed != null && message.hasOwnProperty(\"sJoinRoomFailed\")) {\n                object.sJoinRoomFailed = $root.NT.ServerJoinRoomFailed.toObject(message.sJoinRoomFailed, options);\n                if (options.oneofs)\n                    object.action = \"sJoinRoomFailed\";\n            }\n            if (message.sUserJoinedRoom != null && message.hasOwnProperty(\"sUserJoinedRoom\")) {\n                object.sUserJoinedRoom = $root.NT.ServerUserJoinedRoom.toObject(message.sUserJoinedRoom, options);\n                if (options.oneofs)\n                    object.action = \"sUserJoinedRoom\";\n            }\n            if (message.cLeaveRoom != null && message.hasOwnProperty(\"cLeaveRoom\")) {\n                object.cLeaveRoom = $root.NT.ClientLeaveRoom.toObject(message.cLeaveRoom, options);\n                if (options.oneofs)\n                    object.action = \"cLeaveRoom\";\n            }\n            if (message.sUserLeftRoom != null && message.hasOwnProperty(\"sUserLeftRoom\")) {\n                object.sUserLeftRoom = $root.NT.ServerUserLeftRoom.toObject(message.sUserLeftRoom, options);\n                if (options.oneofs)\n                    object.action = \"sUserLeftRoom\";\n            }\n            if (message.cKickUser != null && message.hasOwnProperty(\"cKickUser\")) {\n                object.cKickUser = $root.NT.ClientKickUser.toObject(message.cKickUser, options);\n                if (options.oneofs)\n                    object.action = \"cKickUser\";\n            }\n            if (message.sUserKicked != null && message.hasOwnProperty(\"sUserKicked\")) {\n                object.sUserKicked = $root.NT.ServerUserKicked.toObject(message.sUserKicked, options);\n                if (options.oneofs)\n                    object.action = \"sUserKicked\";\n            }\n            if (message.cBanUser != null && message.hasOwnProperty(\"cBanUser\")) {\n                object.cBanUser = $root.NT.ClientBanUser.toObject(message.cBanUser, options);\n                if (options.oneofs)\n                    object.action = \"cBanUser\";\n            }\n            if (message.sUserBanned != null && message.hasOwnProperty(\"sUserBanned\")) {\n                object.sUserBanned = $root.NT.ServerUserBanned.toObject(message.sUserBanned, options);\n                if (options.oneofs)\n                    object.action = \"sUserBanned\";\n            }\n            if (message.cReadyState != null && message.hasOwnProperty(\"cReadyState\")) {\n                object.cReadyState = $root.NT.ClientReadyState.toObject(message.cReadyState, options);\n                if (options.oneofs)\n                    object.action = \"cReadyState\";\n            }\n            if (message.sUserReadyState != null && message.hasOwnProperty(\"sUserReadyState\")) {\n                object.sUserReadyState = $root.NT.ServerUserReadyState.toObject(message.sUserReadyState, options);\n                if (options.oneofs)\n                    object.action = \"sUserReadyState\";\n            }\n            if (message.cStartRun != null && message.hasOwnProperty(\"cStartRun\")) {\n                object.cStartRun = $root.NT.ClientStartRun.toObject(message.cStartRun, options);\n                if (options.oneofs)\n                    object.action = \"cStartRun\";\n            }\n            if (message.sHostStart != null && message.hasOwnProperty(\"sHostStart\")) {\n                object.sHostStart = $root.NT.ServerHostStart.toObject(message.sHostStart, options);\n                if (options.oneofs)\n                    object.action = \"sHostStart\";\n            }\n            if (message.cRequestRoomList != null && message.hasOwnProperty(\"cRequestRoomList\")) {\n                object.cRequestRoomList = $root.NT.ClientRequestRoomList.toObject(message.cRequestRoomList, options);\n                if (options.oneofs)\n                    object.action = \"cRequestRoomList\";\n            }\n            if (message.sRoomList != null && message.hasOwnProperty(\"sRoomList\")) {\n                object.sRoomList = $root.NT.ServerRoomList.toObject(message.sRoomList, options);\n                if (options.oneofs)\n                    object.action = \"sRoomList\";\n            }\n            if (message.sDisconnected != null && message.hasOwnProperty(\"sDisconnected\")) {\n                object.sDisconnected = $root.NT.ServerDisconnected.toObject(message.sDisconnected, options);\n                if (options.oneofs)\n                    object.action = \"sDisconnected\";\n            }\n            if (message.sRoomAddToList != null && message.hasOwnProperty(\"sRoomAddToList\")) {\n                object.sRoomAddToList = $root.NT.ServerRoomAddToList.toObject(message.sRoomAddToList, options);\n                if (options.oneofs)\n                    object.action = \"sRoomAddToList\";\n            }\n            if (message.cRunOver != null && message.hasOwnProperty(\"cRunOver\")) {\n                object.cRunOver = $root.NT.ClientRunOver.toObject(message.cRunOver, options);\n                if (options.oneofs)\n                    object.action = \"cRunOver\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this LobbyAction to JSON.\n         * @function toJSON\n         * @memberof NT.LobbyAction\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        LobbyAction.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for LobbyAction\n         * @function getTypeUrl\n         * @memberof NT.LobbyAction\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        LobbyAction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.LobbyAction\";\n        };\n\n        return LobbyAction;\n    })();\n\n    NT.ClientRunOver = (function() {\n\n        /**\n         * Properties of a ClientRunOver.\n         * @memberof NT\n         * @interface IClientRunOver\n         * @property {boolean|null} [idk] ClientRunOver idk\n         */\n\n        /**\n         * Constructs a new ClientRunOver.\n         * @memberof NT\n         * @classdesc Represents a ClientRunOver.\n         * @implements IClientRunOver\n         * @constructor\n         * @param {NT.IClientRunOver=} [properties] Properties to set\n         */\n        function ClientRunOver(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientRunOver idk.\n         * @member {boolean|null|undefined} idk\n         * @memberof NT.ClientRunOver\n         * @instance\n         */\n        ClientRunOver.prototype.idk = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ClientRunOver _idk.\n         * @member {\"idk\"|undefined} _idk\n         * @memberof NT.ClientRunOver\n         * @instance\n         */\n        Object.defineProperty(ClientRunOver.prototype, \"_idk\", {\n            get: $util.oneOfGetter($oneOfFields = [\"idk\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ClientRunOver instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientRunOver\n         * @static\n         * @param {NT.IClientRunOver=} [properties] Properties to set\n         * @returns {NT.ClientRunOver} ClientRunOver instance\n         */\n        ClientRunOver.create = function create(properties) {\n            return new ClientRunOver(properties);\n        };\n\n        /**\n         * Encodes the specified ClientRunOver message. Does not implicitly {@link NT.ClientRunOver.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientRunOver\n         * @static\n         * @param {NT.IClientRunOver} message ClientRunOver message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRunOver.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.idk != null && Object.hasOwnProperty.call(message, \"idk\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.idk);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientRunOver message, length delimited. Does not implicitly {@link NT.ClientRunOver.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientRunOver\n         * @static\n         * @param {NT.IClientRunOver} message ClientRunOver message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRunOver.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientRunOver message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientRunOver\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientRunOver} ClientRunOver\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRunOver.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientRunOver();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.idk = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientRunOver message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientRunOver\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientRunOver} ClientRunOver\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRunOver.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientRunOver message.\n         * @function verify\n         * @memberof NT.ClientRunOver\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientRunOver.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.idk != null && message.hasOwnProperty(\"idk\")) {\n                properties._idk = 1;\n                if (typeof message.idk !== \"boolean\")\n                    return \"idk: boolean expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientRunOver message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientRunOver\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientRunOver} ClientRunOver\n         */\n        ClientRunOver.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientRunOver)\n                return object;\n            let message = new $root.NT.ClientRunOver();\n            if (object.idk != null)\n                message.idk = Boolean(object.idk);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientRunOver message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientRunOver\n         * @static\n         * @param {NT.ClientRunOver} message ClientRunOver\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientRunOver.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.idk != null && message.hasOwnProperty(\"idk\")) {\n                object.idk = message.idk;\n                if (options.oneofs)\n                    object._idk = \"idk\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientRunOver to JSON.\n         * @function toJSON\n         * @memberof NT.ClientRunOver\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientRunOver.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientRunOver\n         * @function getTypeUrl\n         * @memberof NT.ClientRunOver\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientRunOver.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientRunOver\";\n        };\n\n        return ClientRunOver;\n    })();\n\n    NT.ServerDisconnected = (function() {\n\n        /**\n         * Properties of a ServerDisconnected.\n         * @memberof NT\n         * @interface IServerDisconnected\n         * @property {string|null} [reason] ServerDisconnected reason\n         */\n\n        /**\n         * Constructs a new ServerDisconnected.\n         * @memberof NT\n         * @classdesc Represents a ServerDisconnected.\n         * @implements IServerDisconnected\n         * @constructor\n         * @param {NT.IServerDisconnected=} [properties] Properties to set\n         */\n        function ServerDisconnected(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerDisconnected reason.\n         * @member {string} reason\n         * @memberof NT.ServerDisconnected\n         * @instance\n         */\n        ServerDisconnected.prototype.reason = \"\";\n\n        /**\n         * Creates a new ServerDisconnected instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerDisconnected\n         * @static\n         * @param {NT.IServerDisconnected=} [properties] Properties to set\n         * @returns {NT.ServerDisconnected} ServerDisconnected instance\n         */\n        ServerDisconnected.create = function create(properties) {\n            return new ServerDisconnected(properties);\n        };\n\n        /**\n         * Encodes the specified ServerDisconnected message. Does not implicitly {@link NT.ServerDisconnected.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerDisconnected\n         * @static\n         * @param {NT.IServerDisconnected} message ServerDisconnected message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerDisconnected.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.reason != null && Object.hasOwnProperty.call(message, \"reason\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.reason);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerDisconnected message, length delimited. Does not implicitly {@link NT.ServerDisconnected.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerDisconnected\n         * @static\n         * @param {NT.IServerDisconnected} message ServerDisconnected message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerDisconnected.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerDisconnected message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerDisconnected\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerDisconnected} ServerDisconnected\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerDisconnected.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerDisconnected();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.reason = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerDisconnected message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerDisconnected\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerDisconnected} ServerDisconnected\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerDisconnected.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerDisconnected message.\n         * @function verify\n         * @memberof NT.ServerDisconnected\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerDisconnected.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                if (!$util.isString(message.reason))\n                    return \"reason: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerDisconnected message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerDisconnected\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerDisconnected} ServerDisconnected\n         */\n        ServerDisconnected.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerDisconnected)\n                return object;\n            let message = new $root.NT.ServerDisconnected();\n            if (object.reason != null)\n                message.reason = String(object.reason);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerDisconnected message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerDisconnected\n         * @static\n         * @param {NT.ServerDisconnected} message ServerDisconnected\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerDisconnected.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.reason = \"\";\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                object.reason = message.reason;\n            return object;\n        };\n\n        /**\n         * Converts this ServerDisconnected to JSON.\n         * @function toJSON\n         * @memberof NT.ServerDisconnected\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerDisconnected.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerDisconnected\n         * @function getTypeUrl\n         * @memberof NT.ServerDisconnected\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerDisconnected.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerDisconnected\";\n        };\n\n        return ServerDisconnected;\n    })();\n\n    NT.ClientRoomDelete = (function() {\n\n        /**\n         * Properties of a ClientRoomDelete.\n         * @memberof NT\n         * @interface IClientRoomDelete\n         * @property {string|null} [id] ClientRoomDelete id\n         */\n\n        /**\n         * Constructs a new ClientRoomDelete.\n         * @memberof NT\n         * @classdesc Represents a ClientRoomDelete.\n         * @implements IClientRoomDelete\n         * @constructor\n         * @param {NT.IClientRoomDelete=} [properties] Properties to set\n         */\n        function ClientRoomDelete(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientRoomDelete id.\n         * @member {string} id\n         * @memberof NT.ClientRoomDelete\n         * @instance\n         */\n        ClientRoomDelete.prototype.id = \"\";\n\n        /**\n         * Creates a new ClientRoomDelete instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientRoomDelete\n         * @static\n         * @param {NT.IClientRoomDelete=} [properties] Properties to set\n         * @returns {NT.ClientRoomDelete} ClientRoomDelete instance\n         */\n        ClientRoomDelete.create = function create(properties) {\n            return new ClientRoomDelete(properties);\n        };\n\n        /**\n         * Encodes the specified ClientRoomDelete message. Does not implicitly {@link NT.ClientRoomDelete.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientRoomDelete\n         * @static\n         * @param {NT.IClientRoomDelete} message ClientRoomDelete message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRoomDelete.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientRoomDelete message, length delimited. Does not implicitly {@link NT.ClientRoomDelete.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientRoomDelete\n         * @static\n         * @param {NT.IClientRoomDelete} message ClientRoomDelete message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRoomDelete.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientRoomDelete message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientRoomDelete\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientRoomDelete} ClientRoomDelete\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRoomDelete.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientRoomDelete();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientRoomDelete message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientRoomDelete\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientRoomDelete} ClientRoomDelete\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRoomDelete.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientRoomDelete message.\n         * @function verify\n         * @memberof NT.ClientRoomDelete\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientRoomDelete.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientRoomDelete message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientRoomDelete\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientRoomDelete} ClientRoomDelete\n         */\n        ClientRoomDelete.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientRoomDelete)\n                return object;\n            let message = new $root.NT.ClientRoomDelete();\n            if (object.id != null)\n                message.id = String(object.id);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientRoomDelete message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientRoomDelete\n         * @static\n         * @param {NT.ClientRoomDelete} message ClientRoomDelete\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientRoomDelete.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.id = \"\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            return object;\n        };\n\n        /**\n         * Converts this ClientRoomDelete to JSON.\n         * @function toJSON\n         * @memberof NT.ClientRoomDelete\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientRoomDelete.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientRoomDelete\n         * @function getTypeUrl\n         * @memberof NT.ClientRoomDelete\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientRoomDelete.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientRoomDelete\";\n        };\n\n        return ClientRoomDelete;\n    })();\n\n    NT.ServerRoomDeleted = (function() {\n\n        /**\n         * Properties of a ServerRoomDeleted.\n         * @memberof NT\n         * @interface IServerRoomDeleted\n         * @property {string|null} [id] ServerRoomDeleted id\n         */\n\n        /**\n         * Constructs a new ServerRoomDeleted.\n         * @memberof NT\n         * @classdesc Represents a ServerRoomDeleted.\n         * @implements IServerRoomDeleted\n         * @constructor\n         * @param {NT.IServerRoomDeleted=} [properties] Properties to set\n         */\n        function ServerRoomDeleted(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerRoomDeleted id.\n         * @member {string} id\n         * @memberof NT.ServerRoomDeleted\n         * @instance\n         */\n        ServerRoomDeleted.prototype.id = \"\";\n\n        /**\n         * Creates a new ServerRoomDeleted instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerRoomDeleted\n         * @static\n         * @param {NT.IServerRoomDeleted=} [properties] Properties to set\n         * @returns {NT.ServerRoomDeleted} ServerRoomDeleted instance\n         */\n        ServerRoomDeleted.create = function create(properties) {\n            return new ServerRoomDeleted(properties);\n        };\n\n        /**\n         * Encodes the specified ServerRoomDeleted message. Does not implicitly {@link NT.ServerRoomDeleted.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerRoomDeleted\n         * @static\n         * @param {NT.IServerRoomDeleted} message ServerRoomDeleted message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomDeleted.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerRoomDeleted message, length delimited. Does not implicitly {@link NT.ServerRoomDeleted.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerRoomDeleted\n         * @static\n         * @param {NT.IServerRoomDeleted} message ServerRoomDeleted message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomDeleted.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerRoomDeleted message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerRoomDeleted\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerRoomDeleted} ServerRoomDeleted\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomDeleted.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomDeleted();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerRoomDeleted message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerRoomDeleted\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerRoomDeleted} ServerRoomDeleted\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomDeleted.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerRoomDeleted message.\n         * @function verify\n         * @memberof NT.ServerRoomDeleted\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerRoomDeleted.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerRoomDeleted message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerRoomDeleted\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerRoomDeleted} ServerRoomDeleted\n         */\n        ServerRoomDeleted.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerRoomDeleted)\n                return object;\n            let message = new $root.NT.ServerRoomDeleted();\n            if (object.id != null)\n                message.id = String(object.id);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerRoomDeleted message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerRoomDeleted\n         * @static\n         * @param {NT.ServerRoomDeleted} message ServerRoomDeleted\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerRoomDeleted.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.id = \"\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            return object;\n        };\n\n        /**\n         * Converts this ServerRoomDeleted to JSON.\n         * @function toJSON\n         * @memberof NT.ServerRoomDeleted\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerRoomDeleted.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerRoomDeleted\n         * @function getTypeUrl\n         * @memberof NT.ServerRoomDeleted\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerRoomDeleted.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerRoomDeleted\";\n        };\n\n        return ServerRoomDeleted;\n    })();\n\n    NT.ClientRoomCreate = (function() {\n\n        /**\n         * Properties of a ClientRoomCreate.\n         * @memberof NT\n         * @interface IClientRoomCreate\n         * @property {string|null} [name] ClientRoomCreate name\n         * @property {number|null} [gamemode] ClientRoomCreate gamemode\n         * @property {number|null} [maxUsers] ClientRoomCreate maxUsers\n         * @property {string|null} [password] ClientRoomCreate password\n         */\n\n        /**\n         * Constructs a new ClientRoomCreate.\n         * @memberof NT\n         * @classdesc Represents a ClientRoomCreate.\n         * @implements IClientRoomCreate\n         * @constructor\n         * @param {NT.IClientRoomCreate=} [properties] Properties to set\n         */\n        function ClientRoomCreate(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientRoomCreate name.\n         * @member {string} name\n         * @memberof NT.ClientRoomCreate\n         * @instance\n         */\n        ClientRoomCreate.prototype.name = \"\";\n\n        /**\n         * ClientRoomCreate gamemode.\n         * @member {number} gamemode\n         * @memberof NT.ClientRoomCreate\n         * @instance\n         */\n        ClientRoomCreate.prototype.gamemode = 0;\n\n        /**\n         * ClientRoomCreate maxUsers.\n         * @member {number} maxUsers\n         * @memberof NT.ClientRoomCreate\n         * @instance\n         */\n        ClientRoomCreate.prototype.maxUsers = 0;\n\n        /**\n         * ClientRoomCreate password.\n         * @member {string|null|undefined} password\n         * @memberof NT.ClientRoomCreate\n         * @instance\n         */\n        ClientRoomCreate.prototype.password = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ClientRoomCreate _password.\n         * @member {\"password\"|undefined} _password\n         * @memberof NT.ClientRoomCreate\n         * @instance\n         */\n        Object.defineProperty(ClientRoomCreate.prototype, \"_password\", {\n            get: $util.oneOfGetter($oneOfFields = [\"password\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ClientRoomCreate instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientRoomCreate\n         * @static\n         * @param {NT.IClientRoomCreate=} [properties] Properties to set\n         * @returns {NT.ClientRoomCreate} ClientRoomCreate instance\n         */\n        ClientRoomCreate.create = function create(properties) {\n            return new ClientRoomCreate(properties);\n        };\n\n        /**\n         * Encodes the specified ClientRoomCreate message. Does not implicitly {@link NT.ClientRoomCreate.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientRoomCreate\n         * @static\n         * @param {NT.IClientRoomCreate} message ClientRoomCreate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRoomCreate.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.gamemode != null && Object.hasOwnProperty.call(message, \"gamemode\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gamemode);\n            if (message.maxUsers != null && Object.hasOwnProperty.call(message, \"maxUsers\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.maxUsers);\n            if (message.password != null && Object.hasOwnProperty.call(message, \"password\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.password);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientRoomCreate message, length delimited. Does not implicitly {@link NT.ClientRoomCreate.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientRoomCreate\n         * @static\n         * @param {NT.IClientRoomCreate} message ClientRoomCreate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRoomCreate.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientRoomCreate message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientRoomCreate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientRoomCreate} ClientRoomCreate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRoomCreate.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientRoomCreate();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.gamemode = reader.uint32();\n                        break;\n                    }\n                case 3: {\n                        message.maxUsers = reader.uint32();\n                        break;\n                    }\n                case 4: {\n                        message.password = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientRoomCreate message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientRoomCreate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientRoomCreate} ClientRoomCreate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRoomCreate.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientRoomCreate message.\n         * @function verify\n         * @memberof NT.ClientRoomCreate\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientRoomCreate.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.gamemode != null && message.hasOwnProperty(\"gamemode\"))\n                if (!$util.isInteger(message.gamemode))\n                    return \"gamemode: integer expected\";\n            if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\"))\n                if (!$util.isInteger(message.maxUsers))\n                    return \"maxUsers: integer expected\";\n            if (message.password != null && message.hasOwnProperty(\"password\")) {\n                properties._password = 1;\n                if (!$util.isString(message.password))\n                    return \"password: string expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientRoomCreate message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientRoomCreate\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientRoomCreate} ClientRoomCreate\n         */\n        ClientRoomCreate.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientRoomCreate)\n                return object;\n            let message = new $root.NT.ClientRoomCreate();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.gamemode != null)\n                message.gamemode = object.gamemode >>> 0;\n            if (object.maxUsers != null)\n                message.maxUsers = object.maxUsers >>> 0;\n            if (object.password != null)\n                message.password = String(object.password);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientRoomCreate message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientRoomCreate\n         * @static\n         * @param {NT.ClientRoomCreate} message ClientRoomCreate\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientRoomCreate.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.name = \"\";\n                object.gamemode = 0;\n                object.maxUsers = 0;\n            }\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.gamemode != null && message.hasOwnProperty(\"gamemode\"))\n                object.gamemode = message.gamemode;\n            if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\"))\n                object.maxUsers = message.maxUsers;\n            if (message.password != null && message.hasOwnProperty(\"password\")) {\n                object.password = message.password;\n                if (options.oneofs)\n                    object._password = \"password\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientRoomCreate to JSON.\n         * @function toJSON\n         * @memberof NT.ClientRoomCreate\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientRoomCreate.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientRoomCreate\n         * @function getTypeUrl\n         * @memberof NT.ClientRoomCreate\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientRoomCreate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientRoomCreate\";\n        };\n\n        return ClientRoomCreate;\n    })();\n\n    NT.ServerRoomCreated = (function() {\n\n        /**\n         * Properties of a ServerRoomCreated.\n         * @memberof NT\n         * @interface IServerRoomCreated\n         * @property {string|null} [id] ServerRoomCreated id\n         * @property {string|null} [name] ServerRoomCreated name\n         * @property {number|null} [gamemode] ServerRoomCreated gamemode\n         * @property {number|null} [maxUsers] ServerRoomCreated maxUsers\n         * @property {string|null} [password] ServerRoomCreated password\n         * @property {boolean|null} [locked] ServerRoomCreated locked\n         * @property {Array.<NT.ServerRoomCreated.IUser>|null} [users] ServerRoomCreated users\n         */\n\n        /**\n         * Constructs a new ServerRoomCreated.\n         * @memberof NT\n         * @classdesc Represents a ServerRoomCreated.\n         * @implements IServerRoomCreated\n         * @constructor\n         * @param {NT.IServerRoomCreated=} [properties] Properties to set\n         */\n        function ServerRoomCreated(properties) {\n            this.users = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerRoomCreated id.\n         * @member {string} id\n         * @memberof NT.ServerRoomCreated\n         * @instance\n         */\n        ServerRoomCreated.prototype.id = \"\";\n\n        /**\n         * ServerRoomCreated name.\n         * @member {string} name\n         * @memberof NT.ServerRoomCreated\n         * @instance\n         */\n        ServerRoomCreated.prototype.name = \"\";\n\n        /**\n         * ServerRoomCreated gamemode.\n         * @member {number} gamemode\n         * @memberof NT.ServerRoomCreated\n         * @instance\n         */\n        ServerRoomCreated.prototype.gamemode = 0;\n\n        /**\n         * ServerRoomCreated maxUsers.\n         * @member {number} maxUsers\n         * @memberof NT.ServerRoomCreated\n         * @instance\n         */\n        ServerRoomCreated.prototype.maxUsers = 0;\n\n        /**\n         * ServerRoomCreated password.\n         * @member {string|null|undefined} password\n         * @memberof NT.ServerRoomCreated\n         * @instance\n         */\n        ServerRoomCreated.prototype.password = null;\n\n        /**\n         * ServerRoomCreated locked.\n         * @member {boolean} locked\n         * @memberof NT.ServerRoomCreated\n         * @instance\n         */\n        ServerRoomCreated.prototype.locked = false;\n\n        /**\n         * ServerRoomCreated users.\n         * @member {Array.<NT.ServerRoomCreated.IUser>} users\n         * @memberof NT.ServerRoomCreated\n         * @instance\n         */\n        ServerRoomCreated.prototype.users = $util.emptyArray;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ServerRoomCreated _password.\n         * @member {\"password\"|undefined} _password\n         * @memberof NT.ServerRoomCreated\n         * @instance\n         */\n        Object.defineProperty(ServerRoomCreated.prototype, \"_password\", {\n            get: $util.oneOfGetter($oneOfFields = [\"password\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ServerRoomCreated instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerRoomCreated\n         * @static\n         * @param {NT.IServerRoomCreated=} [properties] Properties to set\n         * @returns {NT.ServerRoomCreated} ServerRoomCreated instance\n         */\n        ServerRoomCreated.create = function create(properties) {\n            return new ServerRoomCreated(properties);\n        };\n\n        /**\n         * Encodes the specified ServerRoomCreated message. Does not implicitly {@link NT.ServerRoomCreated.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerRoomCreated\n         * @static\n         * @param {NT.IServerRoomCreated} message ServerRoomCreated message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomCreated.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.gamemode != null && Object.hasOwnProperty.call(message, \"gamemode\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gamemode);\n            if (message.maxUsers != null && Object.hasOwnProperty.call(message, \"maxUsers\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.maxUsers);\n            if (message.password != null && Object.hasOwnProperty.call(message, \"password\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.password);\n            if (message.locked != null && Object.hasOwnProperty.call(message, \"locked\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.locked);\n            if (message.users != null && message.users.length)\n                for (let i = 0; i < message.users.length; ++i)\n                    $root.NT.ServerRoomCreated.User.encode(message.users[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerRoomCreated message, length delimited. Does not implicitly {@link NT.ServerRoomCreated.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerRoomCreated\n         * @static\n         * @param {NT.IServerRoomCreated} message ServerRoomCreated message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomCreated.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerRoomCreated message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerRoomCreated\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerRoomCreated} ServerRoomCreated\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomCreated.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomCreated();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.gamemode = reader.uint32();\n                        break;\n                    }\n                case 4: {\n                        message.maxUsers = reader.uint32();\n                        break;\n                    }\n                case 5: {\n                        message.password = reader.string();\n                        break;\n                    }\n                case 6: {\n                        message.locked = reader.bool();\n                        break;\n                    }\n                case 7: {\n                        if (!(message.users && message.users.length))\n                            message.users = [];\n                        message.users.push($root.NT.ServerRoomCreated.User.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerRoomCreated message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerRoomCreated\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerRoomCreated} ServerRoomCreated\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomCreated.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerRoomCreated message.\n         * @function verify\n         * @memberof NT.ServerRoomCreated\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerRoomCreated.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.gamemode != null && message.hasOwnProperty(\"gamemode\"))\n                if (!$util.isInteger(message.gamemode))\n                    return \"gamemode: integer expected\";\n            if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\"))\n                if (!$util.isInteger(message.maxUsers))\n                    return \"maxUsers: integer expected\";\n            if (message.password != null && message.hasOwnProperty(\"password\")) {\n                properties._password = 1;\n                if (!$util.isString(message.password))\n                    return \"password: string expected\";\n            }\n            if (message.locked != null && message.hasOwnProperty(\"locked\"))\n                if (typeof message.locked !== \"boolean\")\n                    return \"locked: boolean expected\";\n            if (message.users != null && message.hasOwnProperty(\"users\")) {\n                if (!Array.isArray(message.users))\n                    return \"users: array expected\";\n                for (let i = 0; i < message.users.length; ++i) {\n                    let error = $root.NT.ServerRoomCreated.User.verify(message.users[i]);\n                    if (error)\n                        return \"users.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerRoomCreated message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerRoomCreated\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerRoomCreated} ServerRoomCreated\n         */\n        ServerRoomCreated.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerRoomCreated)\n                return object;\n            let message = new $root.NT.ServerRoomCreated();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.gamemode != null)\n                message.gamemode = object.gamemode >>> 0;\n            if (object.maxUsers != null)\n                message.maxUsers = object.maxUsers >>> 0;\n            if (object.password != null)\n                message.password = String(object.password);\n            if (object.locked != null)\n                message.locked = Boolean(object.locked);\n            if (object.users) {\n                if (!Array.isArray(object.users))\n                    throw TypeError(\".NT.ServerRoomCreated.users: array expected\");\n                message.users = [];\n                for (let i = 0; i < object.users.length; ++i) {\n                    if (typeof object.users[i] !== \"object\")\n                        throw TypeError(\".NT.ServerRoomCreated.users: object expected\");\n                    message.users[i] = $root.NT.ServerRoomCreated.User.fromObject(object.users[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerRoomCreated message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerRoomCreated\n         * @static\n         * @param {NT.ServerRoomCreated} message ServerRoomCreated\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerRoomCreated.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.users = [];\n            if (options.defaults) {\n                object.id = \"\";\n                object.name = \"\";\n                object.gamemode = 0;\n                object.maxUsers = 0;\n                object.locked = false;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.gamemode != null && message.hasOwnProperty(\"gamemode\"))\n                object.gamemode = message.gamemode;\n            if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\"))\n                object.maxUsers = message.maxUsers;\n            if (message.password != null && message.hasOwnProperty(\"password\")) {\n                object.password = message.password;\n                if (options.oneofs)\n                    object._password = \"password\";\n            }\n            if (message.locked != null && message.hasOwnProperty(\"locked\"))\n                object.locked = message.locked;\n            if (message.users && message.users.length) {\n                object.users = [];\n                for (let j = 0; j < message.users.length; ++j)\n                    object.users[j] = $root.NT.ServerRoomCreated.User.toObject(message.users[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerRoomCreated to JSON.\n         * @function toJSON\n         * @memberof NT.ServerRoomCreated\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerRoomCreated.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerRoomCreated\n         * @function getTypeUrl\n         * @memberof NT.ServerRoomCreated\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerRoomCreated.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerRoomCreated\";\n        };\n\n        ServerRoomCreated.User = (function() {\n\n            /**\n             * Properties of a User.\n             * @memberof NT.ServerRoomCreated\n             * @interface IUser\n             * @property {string|null} [userId] User userId\n             * @property {string|null} [name] User name\n             * @property {boolean|null} [ready] User ready\n             * @property {boolean|null} [owner] User owner\n             */\n\n            /**\n             * Constructs a new User.\n             * @memberof NT.ServerRoomCreated\n             * @classdesc Represents a User.\n             * @implements IUser\n             * @constructor\n             * @param {NT.ServerRoomCreated.IUser=} [properties] Properties to set\n             */\n            function User(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * User userId.\n             * @member {string} userId\n             * @memberof NT.ServerRoomCreated.User\n             * @instance\n             */\n            User.prototype.userId = \"\";\n\n            /**\n             * User name.\n             * @member {string} name\n             * @memberof NT.ServerRoomCreated.User\n             * @instance\n             */\n            User.prototype.name = \"\";\n\n            /**\n             * User ready.\n             * @member {boolean} ready\n             * @memberof NT.ServerRoomCreated.User\n             * @instance\n             */\n            User.prototype.ready = false;\n\n            /**\n             * User owner.\n             * @member {boolean} owner\n             * @memberof NT.ServerRoomCreated.User\n             * @instance\n             */\n            User.prototype.owner = false;\n\n            /**\n             * Creates a new User instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerRoomCreated.User\n             * @static\n             * @param {NT.ServerRoomCreated.IUser=} [properties] Properties to set\n             * @returns {NT.ServerRoomCreated.User} User instance\n             */\n            User.create = function create(properties) {\n                return new User(properties);\n            };\n\n            /**\n             * Encodes the specified User message. Does not implicitly {@link NT.ServerRoomCreated.User.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerRoomCreated.User\n             * @static\n             * @param {NT.ServerRoomCreated.IUser} message User message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            User.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n                if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                if (message.ready != null && Object.hasOwnProperty.call(message, \"ready\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.ready);\n                if (message.owner != null && Object.hasOwnProperty.call(message, \"owner\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.owner);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified User message, length delimited. Does not implicitly {@link NT.ServerRoomCreated.User.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerRoomCreated.User\n             * @static\n             * @param {NT.ServerRoomCreated.IUser} message User message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            User.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a User message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerRoomCreated.User\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerRoomCreated.User} User\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            User.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomCreated.User();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.userId = reader.string();\n                            break;\n                        }\n                    case 2: {\n                            message.name = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.ready = reader.bool();\n                            break;\n                        }\n                    case 4: {\n                            message.owner = reader.bool();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a User message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerRoomCreated.User\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerRoomCreated.User} User\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            User.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a User message.\n             * @function verify\n             * @memberof NT.ServerRoomCreated.User\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            User.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                    if (!$util.isString(message.userId))\n                        return \"userId: string expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isString(message.name))\n                        return \"name: string expected\";\n                if (message.ready != null && message.hasOwnProperty(\"ready\"))\n                    if (typeof message.ready !== \"boolean\")\n                        return \"ready: boolean expected\";\n                if (message.owner != null && message.hasOwnProperty(\"owner\"))\n                    if (typeof message.owner !== \"boolean\")\n                        return \"owner: boolean expected\";\n                return null;\n            };\n\n            /**\n             * Creates a User message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerRoomCreated.User\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerRoomCreated.User} User\n             */\n            User.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerRoomCreated.User)\n                    return object;\n                let message = new $root.NT.ServerRoomCreated.User();\n                if (object.userId != null)\n                    message.userId = String(object.userId);\n                if (object.name != null)\n                    message.name = String(object.name);\n                if (object.ready != null)\n                    message.ready = Boolean(object.ready);\n                if (object.owner != null)\n                    message.owner = Boolean(object.owner);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a User message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerRoomCreated.User\n             * @static\n             * @param {NT.ServerRoomCreated.User} message User\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            User.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.userId = \"\";\n                    object.name = \"\";\n                    object.ready = false;\n                    object.owner = false;\n                }\n                if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                    object.userId = message.userId;\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    object.name = message.name;\n                if (message.ready != null && message.hasOwnProperty(\"ready\"))\n                    object.ready = message.ready;\n                if (message.owner != null && message.hasOwnProperty(\"owner\"))\n                    object.owner = message.owner;\n                return object;\n            };\n\n            /**\n             * Converts this User to JSON.\n             * @function toJSON\n             * @memberof NT.ServerRoomCreated.User\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            User.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for User\n             * @function getTypeUrl\n             * @memberof NT.ServerRoomCreated.User\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            User.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerRoomCreated.User\";\n            };\n\n            return User;\n        })();\n\n        return ServerRoomCreated;\n    })();\n\n    NT.ServerRoomCreateFailed = (function() {\n\n        /**\n         * Properties of a ServerRoomCreateFailed.\n         * @memberof NT\n         * @interface IServerRoomCreateFailed\n         * @property {string|null} [reason] ServerRoomCreateFailed reason\n         */\n\n        /**\n         * Constructs a new ServerRoomCreateFailed.\n         * @memberof NT\n         * @classdesc Represents a ServerRoomCreateFailed.\n         * @implements IServerRoomCreateFailed\n         * @constructor\n         * @param {NT.IServerRoomCreateFailed=} [properties] Properties to set\n         */\n        function ServerRoomCreateFailed(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerRoomCreateFailed reason.\n         * @member {string} reason\n         * @memberof NT.ServerRoomCreateFailed\n         * @instance\n         */\n        ServerRoomCreateFailed.prototype.reason = \"\";\n\n        /**\n         * Creates a new ServerRoomCreateFailed instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerRoomCreateFailed\n         * @static\n         * @param {NT.IServerRoomCreateFailed=} [properties] Properties to set\n         * @returns {NT.ServerRoomCreateFailed} ServerRoomCreateFailed instance\n         */\n        ServerRoomCreateFailed.create = function create(properties) {\n            return new ServerRoomCreateFailed(properties);\n        };\n\n        /**\n         * Encodes the specified ServerRoomCreateFailed message. Does not implicitly {@link NT.ServerRoomCreateFailed.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerRoomCreateFailed\n         * @static\n         * @param {NT.IServerRoomCreateFailed} message ServerRoomCreateFailed message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomCreateFailed.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.reason != null && Object.hasOwnProperty.call(message, \"reason\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.reason);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerRoomCreateFailed message, length delimited. Does not implicitly {@link NT.ServerRoomCreateFailed.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerRoomCreateFailed\n         * @static\n         * @param {NT.IServerRoomCreateFailed} message ServerRoomCreateFailed message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomCreateFailed.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerRoomCreateFailed message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerRoomCreateFailed\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerRoomCreateFailed} ServerRoomCreateFailed\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomCreateFailed.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomCreateFailed();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.reason = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerRoomCreateFailed message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerRoomCreateFailed\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerRoomCreateFailed} ServerRoomCreateFailed\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomCreateFailed.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerRoomCreateFailed message.\n         * @function verify\n         * @memberof NT.ServerRoomCreateFailed\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerRoomCreateFailed.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                if (!$util.isString(message.reason))\n                    return \"reason: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerRoomCreateFailed message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerRoomCreateFailed\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerRoomCreateFailed} ServerRoomCreateFailed\n         */\n        ServerRoomCreateFailed.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerRoomCreateFailed)\n                return object;\n            let message = new $root.NT.ServerRoomCreateFailed();\n            if (object.reason != null)\n                message.reason = String(object.reason);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerRoomCreateFailed message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerRoomCreateFailed\n         * @static\n         * @param {NT.ServerRoomCreateFailed} message ServerRoomCreateFailed\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerRoomCreateFailed.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.reason = \"\";\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                object.reason = message.reason;\n            return object;\n        };\n\n        /**\n         * Converts this ServerRoomCreateFailed to JSON.\n         * @function toJSON\n         * @memberof NT.ServerRoomCreateFailed\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerRoomCreateFailed.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerRoomCreateFailed\n         * @function getTypeUrl\n         * @memberof NT.ServerRoomCreateFailed\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerRoomCreateFailed.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerRoomCreateFailed\";\n        };\n\n        return ServerRoomCreateFailed;\n    })();\n\n    NT.ClientRoomUpdate = (function() {\n\n        /**\n         * Properties of a ClientRoomUpdate.\n         * @memberof NT\n         * @interface IClientRoomUpdate\n         * @property {string|null} [name] ClientRoomUpdate name\n         * @property {number|null} [gamemode] ClientRoomUpdate gamemode\n         * @property {number|null} [maxUsers] ClientRoomUpdate maxUsers\n         * @property {string|null} [password] ClientRoomUpdate password\n         * @property {boolean|null} [locked] ClientRoomUpdate locked\n         */\n\n        /**\n         * Constructs a new ClientRoomUpdate.\n         * @memberof NT\n         * @classdesc Represents a ClientRoomUpdate.\n         * @implements IClientRoomUpdate\n         * @constructor\n         * @param {NT.IClientRoomUpdate=} [properties] Properties to set\n         */\n        function ClientRoomUpdate(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientRoomUpdate name.\n         * @member {string|null|undefined} name\n         * @memberof NT.ClientRoomUpdate\n         * @instance\n         */\n        ClientRoomUpdate.prototype.name = null;\n\n        /**\n         * ClientRoomUpdate gamemode.\n         * @member {number|null|undefined} gamemode\n         * @memberof NT.ClientRoomUpdate\n         * @instance\n         */\n        ClientRoomUpdate.prototype.gamemode = null;\n\n        /**\n         * ClientRoomUpdate maxUsers.\n         * @member {number|null|undefined} maxUsers\n         * @memberof NT.ClientRoomUpdate\n         * @instance\n         */\n        ClientRoomUpdate.prototype.maxUsers = null;\n\n        /**\n         * ClientRoomUpdate password.\n         * @member {string|null|undefined} password\n         * @memberof NT.ClientRoomUpdate\n         * @instance\n         */\n        ClientRoomUpdate.prototype.password = null;\n\n        /**\n         * ClientRoomUpdate locked.\n         * @member {boolean|null|undefined} locked\n         * @memberof NT.ClientRoomUpdate\n         * @instance\n         */\n        ClientRoomUpdate.prototype.locked = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ClientRoomUpdate _name.\n         * @member {\"name\"|undefined} _name\n         * @memberof NT.ClientRoomUpdate\n         * @instance\n         */\n        Object.defineProperty(ClientRoomUpdate.prototype, \"_name\", {\n            get: $util.oneOfGetter($oneOfFields = [\"name\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ClientRoomUpdate _gamemode.\n         * @member {\"gamemode\"|undefined} _gamemode\n         * @memberof NT.ClientRoomUpdate\n         * @instance\n         */\n        Object.defineProperty(ClientRoomUpdate.prototype, \"_gamemode\", {\n            get: $util.oneOfGetter($oneOfFields = [\"gamemode\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ClientRoomUpdate _maxUsers.\n         * @member {\"maxUsers\"|undefined} _maxUsers\n         * @memberof NT.ClientRoomUpdate\n         * @instance\n         */\n        Object.defineProperty(ClientRoomUpdate.prototype, \"_maxUsers\", {\n            get: $util.oneOfGetter($oneOfFields = [\"maxUsers\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ClientRoomUpdate _password.\n         * @member {\"password\"|undefined} _password\n         * @memberof NT.ClientRoomUpdate\n         * @instance\n         */\n        Object.defineProperty(ClientRoomUpdate.prototype, \"_password\", {\n            get: $util.oneOfGetter($oneOfFields = [\"password\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ClientRoomUpdate _locked.\n         * @member {\"locked\"|undefined} _locked\n         * @memberof NT.ClientRoomUpdate\n         * @instance\n         */\n        Object.defineProperty(ClientRoomUpdate.prototype, \"_locked\", {\n            get: $util.oneOfGetter($oneOfFields = [\"locked\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ClientRoomUpdate instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientRoomUpdate\n         * @static\n         * @param {NT.IClientRoomUpdate=} [properties] Properties to set\n         * @returns {NT.ClientRoomUpdate} ClientRoomUpdate instance\n         */\n        ClientRoomUpdate.create = function create(properties) {\n            return new ClientRoomUpdate(properties);\n        };\n\n        /**\n         * Encodes the specified ClientRoomUpdate message. Does not implicitly {@link NT.ClientRoomUpdate.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientRoomUpdate\n         * @static\n         * @param {NT.IClientRoomUpdate} message ClientRoomUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRoomUpdate.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.gamemode != null && Object.hasOwnProperty.call(message, \"gamemode\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gamemode);\n            if (message.maxUsers != null && Object.hasOwnProperty.call(message, \"maxUsers\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.maxUsers);\n            if (message.password != null && Object.hasOwnProperty.call(message, \"password\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.password);\n            if (message.locked != null && Object.hasOwnProperty.call(message, \"locked\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.locked);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientRoomUpdate message, length delimited. Does not implicitly {@link NT.ClientRoomUpdate.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientRoomUpdate\n         * @static\n         * @param {NT.IClientRoomUpdate} message ClientRoomUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRoomUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientRoomUpdate message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientRoomUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientRoomUpdate} ClientRoomUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRoomUpdate.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientRoomUpdate();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.gamemode = reader.uint32();\n                        break;\n                    }\n                case 3: {\n                        message.maxUsers = reader.uint32();\n                        break;\n                    }\n                case 4: {\n                        message.password = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.locked = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientRoomUpdate message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientRoomUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientRoomUpdate} ClientRoomUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRoomUpdate.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientRoomUpdate message.\n         * @function verify\n         * @memberof NT.ClientRoomUpdate\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientRoomUpdate.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.name != null && message.hasOwnProperty(\"name\")) {\n                properties._name = 1;\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            }\n            if (message.gamemode != null && message.hasOwnProperty(\"gamemode\")) {\n                properties._gamemode = 1;\n                if (!$util.isInteger(message.gamemode))\n                    return \"gamemode: integer expected\";\n            }\n            if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\")) {\n                properties._maxUsers = 1;\n                if (!$util.isInteger(message.maxUsers))\n                    return \"maxUsers: integer expected\";\n            }\n            if (message.password != null && message.hasOwnProperty(\"password\")) {\n                properties._password = 1;\n                if (!$util.isString(message.password))\n                    return \"password: string expected\";\n            }\n            if (message.locked != null && message.hasOwnProperty(\"locked\")) {\n                properties._locked = 1;\n                if (typeof message.locked !== \"boolean\")\n                    return \"locked: boolean expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientRoomUpdate message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientRoomUpdate\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientRoomUpdate} ClientRoomUpdate\n         */\n        ClientRoomUpdate.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientRoomUpdate)\n                return object;\n            let message = new $root.NT.ClientRoomUpdate();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.gamemode != null)\n                message.gamemode = object.gamemode >>> 0;\n            if (object.maxUsers != null)\n                message.maxUsers = object.maxUsers >>> 0;\n            if (object.password != null)\n                message.password = String(object.password);\n            if (object.locked != null)\n                message.locked = Boolean(object.locked);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientRoomUpdate message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientRoomUpdate\n         * @static\n         * @param {NT.ClientRoomUpdate} message ClientRoomUpdate\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientRoomUpdate.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.name != null && message.hasOwnProperty(\"name\")) {\n                object.name = message.name;\n                if (options.oneofs)\n                    object._name = \"name\";\n            }\n            if (message.gamemode != null && message.hasOwnProperty(\"gamemode\")) {\n                object.gamemode = message.gamemode;\n                if (options.oneofs)\n                    object._gamemode = \"gamemode\";\n            }\n            if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\")) {\n                object.maxUsers = message.maxUsers;\n                if (options.oneofs)\n                    object._maxUsers = \"maxUsers\";\n            }\n            if (message.password != null && message.hasOwnProperty(\"password\")) {\n                object.password = message.password;\n                if (options.oneofs)\n                    object._password = \"password\";\n            }\n            if (message.locked != null && message.hasOwnProperty(\"locked\")) {\n                object.locked = message.locked;\n                if (options.oneofs)\n                    object._locked = \"locked\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientRoomUpdate to JSON.\n         * @function toJSON\n         * @memberof NT.ClientRoomUpdate\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientRoomUpdate.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientRoomUpdate\n         * @function getTypeUrl\n         * @memberof NT.ClientRoomUpdate\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientRoomUpdate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientRoomUpdate\";\n        };\n\n        return ClientRoomUpdate;\n    })();\n\n    NT.ServerRoomUpdated = (function() {\n\n        /**\n         * Properties of a ServerRoomUpdated.\n         * @memberof NT\n         * @interface IServerRoomUpdated\n         * @property {string|null} [name] ServerRoomUpdated name\n         * @property {number|null} [gamemode] ServerRoomUpdated gamemode\n         * @property {number|null} [maxUsers] ServerRoomUpdated maxUsers\n         * @property {string|null} [password] ServerRoomUpdated password\n         * @property {boolean|null} [locked] ServerRoomUpdated locked\n         */\n\n        /**\n         * Constructs a new ServerRoomUpdated.\n         * @memberof NT\n         * @classdesc Represents a ServerRoomUpdated.\n         * @implements IServerRoomUpdated\n         * @constructor\n         * @param {NT.IServerRoomUpdated=} [properties] Properties to set\n         */\n        function ServerRoomUpdated(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerRoomUpdated name.\n         * @member {string|null|undefined} name\n         * @memberof NT.ServerRoomUpdated\n         * @instance\n         */\n        ServerRoomUpdated.prototype.name = null;\n\n        /**\n         * ServerRoomUpdated gamemode.\n         * @member {number|null|undefined} gamemode\n         * @memberof NT.ServerRoomUpdated\n         * @instance\n         */\n        ServerRoomUpdated.prototype.gamemode = null;\n\n        /**\n         * ServerRoomUpdated maxUsers.\n         * @member {number|null|undefined} maxUsers\n         * @memberof NT.ServerRoomUpdated\n         * @instance\n         */\n        ServerRoomUpdated.prototype.maxUsers = null;\n\n        /**\n         * ServerRoomUpdated password.\n         * @member {string|null|undefined} password\n         * @memberof NT.ServerRoomUpdated\n         * @instance\n         */\n        ServerRoomUpdated.prototype.password = null;\n\n        /**\n         * ServerRoomUpdated locked.\n         * @member {boolean|null|undefined} locked\n         * @memberof NT.ServerRoomUpdated\n         * @instance\n         */\n        ServerRoomUpdated.prototype.locked = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ServerRoomUpdated _name.\n         * @member {\"name\"|undefined} _name\n         * @memberof NT.ServerRoomUpdated\n         * @instance\n         */\n        Object.defineProperty(ServerRoomUpdated.prototype, \"_name\", {\n            get: $util.oneOfGetter($oneOfFields = [\"name\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ServerRoomUpdated _gamemode.\n         * @member {\"gamemode\"|undefined} _gamemode\n         * @memberof NT.ServerRoomUpdated\n         * @instance\n         */\n        Object.defineProperty(ServerRoomUpdated.prototype, \"_gamemode\", {\n            get: $util.oneOfGetter($oneOfFields = [\"gamemode\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ServerRoomUpdated _maxUsers.\n         * @member {\"maxUsers\"|undefined} _maxUsers\n         * @memberof NT.ServerRoomUpdated\n         * @instance\n         */\n        Object.defineProperty(ServerRoomUpdated.prototype, \"_maxUsers\", {\n            get: $util.oneOfGetter($oneOfFields = [\"maxUsers\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ServerRoomUpdated _password.\n         * @member {\"password\"|undefined} _password\n         * @memberof NT.ServerRoomUpdated\n         * @instance\n         */\n        Object.defineProperty(ServerRoomUpdated.prototype, \"_password\", {\n            get: $util.oneOfGetter($oneOfFields = [\"password\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ServerRoomUpdated _locked.\n         * @member {\"locked\"|undefined} _locked\n         * @memberof NT.ServerRoomUpdated\n         * @instance\n         */\n        Object.defineProperty(ServerRoomUpdated.prototype, \"_locked\", {\n            get: $util.oneOfGetter($oneOfFields = [\"locked\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ServerRoomUpdated instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerRoomUpdated\n         * @static\n         * @param {NT.IServerRoomUpdated=} [properties] Properties to set\n         * @returns {NT.ServerRoomUpdated} ServerRoomUpdated instance\n         */\n        ServerRoomUpdated.create = function create(properties) {\n            return new ServerRoomUpdated(properties);\n        };\n\n        /**\n         * Encodes the specified ServerRoomUpdated message. Does not implicitly {@link NT.ServerRoomUpdated.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerRoomUpdated\n         * @static\n         * @param {NT.IServerRoomUpdated} message ServerRoomUpdated message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomUpdated.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n            if (message.gamemode != null && Object.hasOwnProperty.call(message, \"gamemode\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.gamemode);\n            if (message.maxUsers != null && Object.hasOwnProperty.call(message, \"maxUsers\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.maxUsers);\n            if (message.password != null && Object.hasOwnProperty.call(message, \"password\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.password);\n            if (message.locked != null && Object.hasOwnProperty.call(message, \"locked\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.locked);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerRoomUpdated message, length delimited. Does not implicitly {@link NT.ServerRoomUpdated.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerRoomUpdated\n         * @static\n         * @param {NT.IServerRoomUpdated} message ServerRoomUpdated message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomUpdated.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerRoomUpdated message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerRoomUpdated\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerRoomUpdated} ServerRoomUpdated\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomUpdated.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomUpdated();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.gamemode = reader.uint32();\n                        break;\n                    }\n                case 3: {\n                        message.maxUsers = reader.uint32();\n                        break;\n                    }\n                case 4: {\n                        message.password = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.locked = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerRoomUpdated message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerRoomUpdated\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerRoomUpdated} ServerRoomUpdated\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomUpdated.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerRoomUpdated message.\n         * @function verify\n         * @memberof NT.ServerRoomUpdated\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerRoomUpdated.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.name != null && message.hasOwnProperty(\"name\")) {\n                properties._name = 1;\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            }\n            if (message.gamemode != null && message.hasOwnProperty(\"gamemode\")) {\n                properties._gamemode = 1;\n                if (!$util.isInteger(message.gamemode))\n                    return \"gamemode: integer expected\";\n            }\n            if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\")) {\n                properties._maxUsers = 1;\n                if (!$util.isInteger(message.maxUsers))\n                    return \"maxUsers: integer expected\";\n            }\n            if (message.password != null && message.hasOwnProperty(\"password\")) {\n                properties._password = 1;\n                if (!$util.isString(message.password))\n                    return \"password: string expected\";\n            }\n            if (message.locked != null && message.hasOwnProperty(\"locked\")) {\n                properties._locked = 1;\n                if (typeof message.locked !== \"boolean\")\n                    return \"locked: boolean expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerRoomUpdated message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerRoomUpdated\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerRoomUpdated} ServerRoomUpdated\n         */\n        ServerRoomUpdated.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerRoomUpdated)\n                return object;\n            let message = new $root.NT.ServerRoomUpdated();\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.gamemode != null)\n                message.gamemode = object.gamemode >>> 0;\n            if (object.maxUsers != null)\n                message.maxUsers = object.maxUsers >>> 0;\n            if (object.password != null)\n                message.password = String(object.password);\n            if (object.locked != null)\n                message.locked = Boolean(object.locked);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerRoomUpdated message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerRoomUpdated\n         * @static\n         * @param {NT.ServerRoomUpdated} message ServerRoomUpdated\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerRoomUpdated.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.name != null && message.hasOwnProperty(\"name\")) {\n                object.name = message.name;\n                if (options.oneofs)\n                    object._name = \"name\";\n            }\n            if (message.gamemode != null && message.hasOwnProperty(\"gamemode\")) {\n                object.gamemode = message.gamemode;\n                if (options.oneofs)\n                    object._gamemode = \"gamemode\";\n            }\n            if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\")) {\n                object.maxUsers = message.maxUsers;\n                if (options.oneofs)\n                    object._maxUsers = \"maxUsers\";\n            }\n            if (message.password != null && message.hasOwnProperty(\"password\")) {\n                object.password = message.password;\n                if (options.oneofs)\n                    object._password = \"password\";\n            }\n            if (message.locked != null && message.hasOwnProperty(\"locked\")) {\n                object.locked = message.locked;\n                if (options.oneofs)\n                    object._locked = \"locked\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerRoomUpdated to JSON.\n         * @function toJSON\n         * @memberof NT.ServerRoomUpdated\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerRoomUpdated.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerRoomUpdated\n         * @function getTypeUrl\n         * @memberof NT.ServerRoomUpdated\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerRoomUpdated.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerRoomUpdated\";\n        };\n\n        return ServerRoomUpdated;\n    })();\n\n    NT.ServerRoomUpdateFailed = (function() {\n\n        /**\n         * Properties of a ServerRoomUpdateFailed.\n         * @memberof NT\n         * @interface IServerRoomUpdateFailed\n         * @property {string|null} [reason] ServerRoomUpdateFailed reason\n         */\n\n        /**\n         * Constructs a new ServerRoomUpdateFailed.\n         * @memberof NT\n         * @classdesc Represents a ServerRoomUpdateFailed.\n         * @implements IServerRoomUpdateFailed\n         * @constructor\n         * @param {NT.IServerRoomUpdateFailed=} [properties] Properties to set\n         */\n        function ServerRoomUpdateFailed(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerRoomUpdateFailed reason.\n         * @member {string} reason\n         * @memberof NT.ServerRoomUpdateFailed\n         * @instance\n         */\n        ServerRoomUpdateFailed.prototype.reason = \"\";\n\n        /**\n         * Creates a new ServerRoomUpdateFailed instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerRoomUpdateFailed\n         * @static\n         * @param {NT.IServerRoomUpdateFailed=} [properties] Properties to set\n         * @returns {NT.ServerRoomUpdateFailed} ServerRoomUpdateFailed instance\n         */\n        ServerRoomUpdateFailed.create = function create(properties) {\n            return new ServerRoomUpdateFailed(properties);\n        };\n\n        /**\n         * Encodes the specified ServerRoomUpdateFailed message. Does not implicitly {@link NT.ServerRoomUpdateFailed.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerRoomUpdateFailed\n         * @static\n         * @param {NT.IServerRoomUpdateFailed} message ServerRoomUpdateFailed message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomUpdateFailed.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.reason != null && Object.hasOwnProperty.call(message, \"reason\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.reason);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerRoomUpdateFailed message, length delimited. Does not implicitly {@link NT.ServerRoomUpdateFailed.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerRoomUpdateFailed\n         * @static\n         * @param {NT.IServerRoomUpdateFailed} message ServerRoomUpdateFailed message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomUpdateFailed.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerRoomUpdateFailed message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerRoomUpdateFailed\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerRoomUpdateFailed} ServerRoomUpdateFailed\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomUpdateFailed.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomUpdateFailed();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.reason = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerRoomUpdateFailed message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerRoomUpdateFailed\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerRoomUpdateFailed} ServerRoomUpdateFailed\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomUpdateFailed.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerRoomUpdateFailed message.\n         * @function verify\n         * @memberof NT.ServerRoomUpdateFailed\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerRoomUpdateFailed.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                if (!$util.isString(message.reason))\n                    return \"reason: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerRoomUpdateFailed message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerRoomUpdateFailed\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerRoomUpdateFailed} ServerRoomUpdateFailed\n         */\n        ServerRoomUpdateFailed.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerRoomUpdateFailed)\n                return object;\n            let message = new $root.NT.ServerRoomUpdateFailed();\n            if (object.reason != null)\n                message.reason = String(object.reason);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerRoomUpdateFailed message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerRoomUpdateFailed\n         * @static\n         * @param {NT.ServerRoomUpdateFailed} message ServerRoomUpdateFailed\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerRoomUpdateFailed.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.reason = \"\";\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                object.reason = message.reason;\n            return object;\n        };\n\n        /**\n         * Converts this ServerRoomUpdateFailed to JSON.\n         * @function toJSON\n         * @memberof NT.ServerRoomUpdateFailed\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerRoomUpdateFailed.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerRoomUpdateFailed\n         * @function getTypeUrl\n         * @memberof NT.ServerRoomUpdateFailed\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerRoomUpdateFailed.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerRoomUpdateFailed\";\n        };\n\n        return ServerRoomUpdateFailed;\n    })();\n\n    NT.ClientRoomFlagsUpdate = (function() {\n\n        /**\n         * Properties of a ClientRoomFlagsUpdate.\n         * @memberof NT\n         * @interface IClientRoomFlagsUpdate\n         * @property {Array.<NT.ClientRoomFlagsUpdate.IGameFlag>|null} [flags] ClientRoomFlagsUpdate flags\n         */\n\n        /**\n         * Constructs a new ClientRoomFlagsUpdate.\n         * @memberof NT\n         * @classdesc Represents a ClientRoomFlagsUpdate.\n         * @implements IClientRoomFlagsUpdate\n         * @constructor\n         * @param {NT.IClientRoomFlagsUpdate=} [properties] Properties to set\n         */\n        function ClientRoomFlagsUpdate(properties) {\n            this.flags = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientRoomFlagsUpdate flags.\n         * @member {Array.<NT.ClientRoomFlagsUpdate.IGameFlag>} flags\n         * @memberof NT.ClientRoomFlagsUpdate\n         * @instance\n         */\n        ClientRoomFlagsUpdate.prototype.flags = $util.emptyArray;\n\n        /**\n         * Creates a new ClientRoomFlagsUpdate instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientRoomFlagsUpdate\n         * @static\n         * @param {NT.IClientRoomFlagsUpdate=} [properties] Properties to set\n         * @returns {NT.ClientRoomFlagsUpdate} ClientRoomFlagsUpdate instance\n         */\n        ClientRoomFlagsUpdate.create = function create(properties) {\n            return new ClientRoomFlagsUpdate(properties);\n        };\n\n        /**\n         * Encodes the specified ClientRoomFlagsUpdate message. Does not implicitly {@link NT.ClientRoomFlagsUpdate.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientRoomFlagsUpdate\n         * @static\n         * @param {NT.IClientRoomFlagsUpdate} message ClientRoomFlagsUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRoomFlagsUpdate.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.flags != null && message.flags.length)\n                for (let i = 0; i < message.flags.length; ++i)\n                    $root.NT.ClientRoomFlagsUpdate.GameFlag.encode(message.flags[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientRoomFlagsUpdate message, length delimited. Does not implicitly {@link NT.ClientRoomFlagsUpdate.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientRoomFlagsUpdate\n         * @static\n         * @param {NT.IClientRoomFlagsUpdate} message ClientRoomFlagsUpdate message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRoomFlagsUpdate.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientRoomFlagsUpdate message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientRoomFlagsUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientRoomFlagsUpdate} ClientRoomFlagsUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRoomFlagsUpdate.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientRoomFlagsUpdate();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.flags && message.flags.length))\n                            message.flags = [];\n                        message.flags.push($root.NT.ClientRoomFlagsUpdate.GameFlag.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientRoomFlagsUpdate message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientRoomFlagsUpdate\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientRoomFlagsUpdate} ClientRoomFlagsUpdate\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRoomFlagsUpdate.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientRoomFlagsUpdate message.\n         * @function verify\n         * @memberof NT.ClientRoomFlagsUpdate\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientRoomFlagsUpdate.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.flags != null && message.hasOwnProperty(\"flags\")) {\n                if (!Array.isArray(message.flags))\n                    return \"flags: array expected\";\n                for (let i = 0; i < message.flags.length; ++i) {\n                    let error = $root.NT.ClientRoomFlagsUpdate.GameFlag.verify(message.flags[i]);\n                    if (error)\n                        return \"flags.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientRoomFlagsUpdate message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientRoomFlagsUpdate\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientRoomFlagsUpdate} ClientRoomFlagsUpdate\n         */\n        ClientRoomFlagsUpdate.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientRoomFlagsUpdate)\n                return object;\n            let message = new $root.NT.ClientRoomFlagsUpdate();\n            if (object.flags) {\n                if (!Array.isArray(object.flags))\n                    throw TypeError(\".NT.ClientRoomFlagsUpdate.flags: array expected\");\n                message.flags = [];\n                for (let i = 0; i < object.flags.length; ++i) {\n                    if (typeof object.flags[i] !== \"object\")\n                        throw TypeError(\".NT.ClientRoomFlagsUpdate.flags: object expected\");\n                    message.flags[i] = $root.NT.ClientRoomFlagsUpdate.GameFlag.fromObject(object.flags[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientRoomFlagsUpdate message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientRoomFlagsUpdate\n         * @static\n         * @param {NT.ClientRoomFlagsUpdate} message ClientRoomFlagsUpdate\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientRoomFlagsUpdate.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.flags = [];\n            if (message.flags && message.flags.length) {\n                object.flags = [];\n                for (let j = 0; j < message.flags.length; ++j)\n                    object.flags[j] = $root.NT.ClientRoomFlagsUpdate.GameFlag.toObject(message.flags[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientRoomFlagsUpdate to JSON.\n         * @function toJSON\n         * @memberof NT.ClientRoomFlagsUpdate\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientRoomFlagsUpdate.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientRoomFlagsUpdate\n         * @function getTypeUrl\n         * @memberof NT.ClientRoomFlagsUpdate\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientRoomFlagsUpdate.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientRoomFlagsUpdate\";\n        };\n\n        ClientRoomFlagsUpdate.GameFlag = (function() {\n\n            /**\n             * Properties of a GameFlag.\n             * @memberof NT.ClientRoomFlagsUpdate\n             * @interface IGameFlag\n             * @property {string|null} [flag] GameFlag flag\n             * @property {number|null} [intVal] GameFlag intVal\n             * @property {string|null} [strVal] GameFlag strVal\n             * @property {number|null} [floatVal] GameFlag floatVal\n             * @property {boolean|null} [boolVal] GameFlag boolVal\n             * @property {number|null} [uIntVal] GameFlag uIntVal\n             */\n\n            /**\n             * Constructs a new GameFlag.\n             * @memberof NT.ClientRoomFlagsUpdate\n             * @classdesc Represents a GameFlag.\n             * @implements IGameFlag\n             * @constructor\n             * @param {NT.ClientRoomFlagsUpdate.IGameFlag=} [properties] Properties to set\n             */\n            function GameFlag(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * GameFlag flag.\n             * @member {string} flag\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @instance\n             */\n            GameFlag.prototype.flag = \"\";\n\n            /**\n             * GameFlag intVal.\n             * @member {number|null|undefined} intVal\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @instance\n             */\n            GameFlag.prototype.intVal = null;\n\n            /**\n             * GameFlag strVal.\n             * @member {string|null|undefined} strVal\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @instance\n             */\n            GameFlag.prototype.strVal = null;\n\n            /**\n             * GameFlag floatVal.\n             * @member {number|null|undefined} floatVal\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @instance\n             */\n            GameFlag.prototype.floatVal = null;\n\n            /**\n             * GameFlag boolVal.\n             * @member {boolean|null|undefined} boolVal\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @instance\n             */\n            GameFlag.prototype.boolVal = null;\n\n            /**\n             * GameFlag uIntVal.\n             * @member {number|null|undefined} uIntVal\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @instance\n             */\n            GameFlag.prototype.uIntVal = null;\n\n            // OneOf field names bound to virtual getters and setters\n            let $oneOfFields;\n\n            /**\n             * GameFlag _intVal.\n             * @member {\"intVal\"|undefined} _intVal\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @instance\n             */\n            Object.defineProperty(GameFlag.prototype, \"_intVal\", {\n                get: $util.oneOfGetter($oneOfFields = [\"intVal\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * GameFlag _strVal.\n             * @member {\"strVal\"|undefined} _strVal\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @instance\n             */\n            Object.defineProperty(GameFlag.prototype, \"_strVal\", {\n                get: $util.oneOfGetter($oneOfFields = [\"strVal\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * GameFlag _floatVal.\n             * @member {\"floatVal\"|undefined} _floatVal\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @instance\n             */\n            Object.defineProperty(GameFlag.prototype, \"_floatVal\", {\n                get: $util.oneOfGetter($oneOfFields = [\"floatVal\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * GameFlag _boolVal.\n             * @member {\"boolVal\"|undefined} _boolVal\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @instance\n             */\n            Object.defineProperty(GameFlag.prototype, \"_boolVal\", {\n                get: $util.oneOfGetter($oneOfFields = [\"boolVal\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * GameFlag _uIntVal.\n             * @member {\"uIntVal\"|undefined} _uIntVal\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @instance\n             */\n            Object.defineProperty(GameFlag.prototype, \"_uIntVal\", {\n                get: $util.oneOfGetter($oneOfFields = [\"uIntVal\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new GameFlag instance using the specified properties.\n             * @function create\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @static\n             * @param {NT.ClientRoomFlagsUpdate.IGameFlag=} [properties] Properties to set\n             * @returns {NT.ClientRoomFlagsUpdate.GameFlag} GameFlag instance\n             */\n            GameFlag.create = function create(properties) {\n                return new GameFlag(properties);\n            };\n\n            /**\n             * Encodes the specified GameFlag message. Does not implicitly {@link NT.ClientRoomFlagsUpdate.GameFlag.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @static\n             * @param {NT.ClientRoomFlagsUpdate.IGameFlag} message GameFlag message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            GameFlag.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.flag != null && Object.hasOwnProperty.call(message, \"flag\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.flag);\n                if (message.intVal != null && Object.hasOwnProperty.call(message, \"intVal\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.intVal);\n                if (message.strVal != null && Object.hasOwnProperty.call(message, \"strVal\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.strVal);\n                if (message.floatVal != null && Object.hasOwnProperty.call(message, \"floatVal\"))\n                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.floatVal);\n                if (message.boolVal != null && Object.hasOwnProperty.call(message, \"boolVal\"))\n                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.boolVal);\n                if (message.uIntVal != null && Object.hasOwnProperty.call(message, \"uIntVal\"))\n                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.uIntVal);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified GameFlag message, length delimited. Does not implicitly {@link NT.ClientRoomFlagsUpdate.GameFlag.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @static\n             * @param {NT.ClientRoomFlagsUpdate.IGameFlag} message GameFlag message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            GameFlag.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a GameFlag message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ClientRoomFlagsUpdate.GameFlag} GameFlag\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            GameFlag.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientRoomFlagsUpdate.GameFlag();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.flag = reader.string();\n                            break;\n                        }\n                    case 2: {\n                            message.intVal = reader.int32();\n                            break;\n                        }\n                    case 3: {\n                            message.strVal = reader.string();\n                            break;\n                        }\n                    case 4: {\n                            message.floatVal = reader.float();\n                            break;\n                        }\n                    case 5: {\n                            message.boolVal = reader.bool();\n                            break;\n                        }\n                    case 6: {\n                            message.uIntVal = reader.uint32();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a GameFlag message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ClientRoomFlagsUpdate.GameFlag} GameFlag\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            GameFlag.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a GameFlag message.\n             * @function verify\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            GameFlag.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                let properties = {};\n                if (message.flag != null && message.hasOwnProperty(\"flag\"))\n                    if (!$util.isString(message.flag))\n                        return \"flag: string expected\";\n                if (message.intVal != null && message.hasOwnProperty(\"intVal\")) {\n                    properties._intVal = 1;\n                    if (!$util.isInteger(message.intVal))\n                        return \"intVal: integer expected\";\n                }\n                if (message.strVal != null && message.hasOwnProperty(\"strVal\")) {\n                    properties._strVal = 1;\n                    if (!$util.isString(message.strVal))\n                        return \"strVal: string expected\";\n                }\n                if (message.floatVal != null && message.hasOwnProperty(\"floatVal\")) {\n                    properties._floatVal = 1;\n                    if (typeof message.floatVal !== \"number\")\n                        return \"floatVal: number expected\";\n                }\n                if (message.boolVal != null && message.hasOwnProperty(\"boolVal\")) {\n                    properties._boolVal = 1;\n                    if (typeof message.boolVal !== \"boolean\")\n                        return \"boolVal: boolean expected\";\n                }\n                if (message.uIntVal != null && message.hasOwnProperty(\"uIntVal\")) {\n                    properties._uIntVal = 1;\n                    if (!$util.isInteger(message.uIntVal))\n                        return \"uIntVal: integer expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a GameFlag message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ClientRoomFlagsUpdate.GameFlag} GameFlag\n             */\n            GameFlag.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ClientRoomFlagsUpdate.GameFlag)\n                    return object;\n                let message = new $root.NT.ClientRoomFlagsUpdate.GameFlag();\n                if (object.flag != null)\n                    message.flag = String(object.flag);\n                if (object.intVal != null)\n                    message.intVal = object.intVal | 0;\n                if (object.strVal != null)\n                    message.strVal = String(object.strVal);\n                if (object.floatVal != null)\n                    message.floatVal = Number(object.floatVal);\n                if (object.boolVal != null)\n                    message.boolVal = Boolean(object.boolVal);\n                if (object.uIntVal != null)\n                    message.uIntVal = object.uIntVal >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a GameFlag message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @static\n             * @param {NT.ClientRoomFlagsUpdate.GameFlag} message GameFlag\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            GameFlag.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults)\n                    object.flag = \"\";\n                if (message.flag != null && message.hasOwnProperty(\"flag\"))\n                    object.flag = message.flag;\n                if (message.intVal != null && message.hasOwnProperty(\"intVal\")) {\n                    object.intVal = message.intVal;\n                    if (options.oneofs)\n                        object._intVal = \"intVal\";\n                }\n                if (message.strVal != null && message.hasOwnProperty(\"strVal\")) {\n                    object.strVal = message.strVal;\n                    if (options.oneofs)\n                        object._strVal = \"strVal\";\n                }\n                if (message.floatVal != null && message.hasOwnProperty(\"floatVal\")) {\n                    object.floatVal = options.json && !isFinite(message.floatVal) ? String(message.floatVal) : message.floatVal;\n                    if (options.oneofs)\n                        object._floatVal = \"floatVal\";\n                }\n                if (message.boolVal != null && message.hasOwnProperty(\"boolVal\")) {\n                    object.boolVal = message.boolVal;\n                    if (options.oneofs)\n                        object._boolVal = \"boolVal\";\n                }\n                if (message.uIntVal != null && message.hasOwnProperty(\"uIntVal\")) {\n                    object.uIntVal = message.uIntVal;\n                    if (options.oneofs)\n                        object._uIntVal = \"uIntVal\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this GameFlag to JSON.\n             * @function toJSON\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            GameFlag.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for GameFlag\n             * @function getTypeUrl\n             * @memberof NT.ClientRoomFlagsUpdate.GameFlag\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            GameFlag.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ClientRoomFlagsUpdate.GameFlag\";\n            };\n\n            return GameFlag;\n        })();\n\n        return ClientRoomFlagsUpdate;\n    })();\n\n    NT.ServerRoomFlagsUpdated = (function() {\n\n        /**\n         * Properties of a ServerRoomFlagsUpdated.\n         * @memberof NT\n         * @interface IServerRoomFlagsUpdated\n         * @property {Array.<NT.ServerRoomFlagsUpdated.IGameFlag>|null} [flags] ServerRoomFlagsUpdated flags\n         */\n\n        /**\n         * Constructs a new ServerRoomFlagsUpdated.\n         * @memberof NT\n         * @classdesc Represents a ServerRoomFlagsUpdated.\n         * @implements IServerRoomFlagsUpdated\n         * @constructor\n         * @param {NT.IServerRoomFlagsUpdated=} [properties] Properties to set\n         */\n        function ServerRoomFlagsUpdated(properties) {\n            this.flags = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerRoomFlagsUpdated flags.\n         * @member {Array.<NT.ServerRoomFlagsUpdated.IGameFlag>} flags\n         * @memberof NT.ServerRoomFlagsUpdated\n         * @instance\n         */\n        ServerRoomFlagsUpdated.prototype.flags = $util.emptyArray;\n\n        /**\n         * Creates a new ServerRoomFlagsUpdated instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerRoomFlagsUpdated\n         * @static\n         * @param {NT.IServerRoomFlagsUpdated=} [properties] Properties to set\n         * @returns {NT.ServerRoomFlagsUpdated} ServerRoomFlagsUpdated instance\n         */\n        ServerRoomFlagsUpdated.create = function create(properties) {\n            return new ServerRoomFlagsUpdated(properties);\n        };\n\n        /**\n         * Encodes the specified ServerRoomFlagsUpdated message. Does not implicitly {@link NT.ServerRoomFlagsUpdated.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerRoomFlagsUpdated\n         * @static\n         * @param {NT.IServerRoomFlagsUpdated} message ServerRoomFlagsUpdated message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomFlagsUpdated.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.flags != null && message.flags.length)\n                for (let i = 0; i < message.flags.length; ++i)\n                    $root.NT.ServerRoomFlagsUpdated.GameFlag.encode(message.flags[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerRoomFlagsUpdated message, length delimited. Does not implicitly {@link NT.ServerRoomFlagsUpdated.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerRoomFlagsUpdated\n         * @static\n         * @param {NT.IServerRoomFlagsUpdated} message ServerRoomFlagsUpdated message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomFlagsUpdated.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerRoomFlagsUpdated message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerRoomFlagsUpdated\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerRoomFlagsUpdated} ServerRoomFlagsUpdated\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomFlagsUpdated.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomFlagsUpdated();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.flags && message.flags.length))\n                            message.flags = [];\n                        message.flags.push($root.NT.ServerRoomFlagsUpdated.GameFlag.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerRoomFlagsUpdated message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerRoomFlagsUpdated\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerRoomFlagsUpdated} ServerRoomFlagsUpdated\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomFlagsUpdated.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerRoomFlagsUpdated message.\n         * @function verify\n         * @memberof NT.ServerRoomFlagsUpdated\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerRoomFlagsUpdated.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.flags != null && message.hasOwnProperty(\"flags\")) {\n                if (!Array.isArray(message.flags))\n                    return \"flags: array expected\";\n                for (let i = 0; i < message.flags.length; ++i) {\n                    let error = $root.NT.ServerRoomFlagsUpdated.GameFlag.verify(message.flags[i]);\n                    if (error)\n                        return \"flags.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerRoomFlagsUpdated message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerRoomFlagsUpdated\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerRoomFlagsUpdated} ServerRoomFlagsUpdated\n         */\n        ServerRoomFlagsUpdated.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerRoomFlagsUpdated)\n                return object;\n            let message = new $root.NT.ServerRoomFlagsUpdated();\n            if (object.flags) {\n                if (!Array.isArray(object.flags))\n                    throw TypeError(\".NT.ServerRoomFlagsUpdated.flags: array expected\");\n                message.flags = [];\n                for (let i = 0; i < object.flags.length; ++i) {\n                    if (typeof object.flags[i] !== \"object\")\n                        throw TypeError(\".NT.ServerRoomFlagsUpdated.flags: object expected\");\n                    message.flags[i] = $root.NT.ServerRoomFlagsUpdated.GameFlag.fromObject(object.flags[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerRoomFlagsUpdated message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerRoomFlagsUpdated\n         * @static\n         * @param {NT.ServerRoomFlagsUpdated} message ServerRoomFlagsUpdated\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerRoomFlagsUpdated.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.flags = [];\n            if (message.flags && message.flags.length) {\n                object.flags = [];\n                for (let j = 0; j < message.flags.length; ++j)\n                    object.flags[j] = $root.NT.ServerRoomFlagsUpdated.GameFlag.toObject(message.flags[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerRoomFlagsUpdated to JSON.\n         * @function toJSON\n         * @memberof NT.ServerRoomFlagsUpdated\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerRoomFlagsUpdated.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerRoomFlagsUpdated\n         * @function getTypeUrl\n         * @memberof NT.ServerRoomFlagsUpdated\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerRoomFlagsUpdated.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerRoomFlagsUpdated\";\n        };\n\n        ServerRoomFlagsUpdated.GameFlag = (function() {\n\n            /**\n             * Properties of a GameFlag.\n             * @memberof NT.ServerRoomFlagsUpdated\n             * @interface IGameFlag\n             * @property {string|null} [flag] GameFlag flag\n             * @property {number|null} [intVal] GameFlag intVal\n             * @property {string|null} [strVal] GameFlag strVal\n             * @property {number|null} [floatVal] GameFlag floatVal\n             * @property {boolean|null} [boolVal] GameFlag boolVal\n             * @property {number|null} [uIntVal] GameFlag uIntVal\n             */\n\n            /**\n             * Constructs a new GameFlag.\n             * @memberof NT.ServerRoomFlagsUpdated\n             * @classdesc Represents a GameFlag.\n             * @implements IGameFlag\n             * @constructor\n             * @param {NT.ServerRoomFlagsUpdated.IGameFlag=} [properties] Properties to set\n             */\n            function GameFlag(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * GameFlag flag.\n             * @member {string} flag\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @instance\n             */\n            GameFlag.prototype.flag = \"\";\n\n            /**\n             * GameFlag intVal.\n             * @member {number|null|undefined} intVal\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @instance\n             */\n            GameFlag.prototype.intVal = null;\n\n            /**\n             * GameFlag strVal.\n             * @member {string|null|undefined} strVal\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @instance\n             */\n            GameFlag.prototype.strVal = null;\n\n            /**\n             * GameFlag floatVal.\n             * @member {number|null|undefined} floatVal\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @instance\n             */\n            GameFlag.prototype.floatVal = null;\n\n            /**\n             * GameFlag boolVal.\n             * @member {boolean|null|undefined} boolVal\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @instance\n             */\n            GameFlag.prototype.boolVal = null;\n\n            /**\n             * GameFlag uIntVal.\n             * @member {number|null|undefined} uIntVal\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @instance\n             */\n            GameFlag.prototype.uIntVal = null;\n\n            // OneOf field names bound to virtual getters and setters\n            let $oneOfFields;\n\n            /**\n             * GameFlag _intVal.\n             * @member {\"intVal\"|undefined} _intVal\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @instance\n             */\n            Object.defineProperty(GameFlag.prototype, \"_intVal\", {\n                get: $util.oneOfGetter($oneOfFields = [\"intVal\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * GameFlag _strVal.\n             * @member {\"strVal\"|undefined} _strVal\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @instance\n             */\n            Object.defineProperty(GameFlag.prototype, \"_strVal\", {\n                get: $util.oneOfGetter($oneOfFields = [\"strVal\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * GameFlag _floatVal.\n             * @member {\"floatVal\"|undefined} _floatVal\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @instance\n             */\n            Object.defineProperty(GameFlag.prototype, \"_floatVal\", {\n                get: $util.oneOfGetter($oneOfFields = [\"floatVal\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * GameFlag _boolVal.\n             * @member {\"boolVal\"|undefined} _boolVal\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @instance\n             */\n            Object.defineProperty(GameFlag.prototype, \"_boolVal\", {\n                get: $util.oneOfGetter($oneOfFields = [\"boolVal\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * GameFlag _uIntVal.\n             * @member {\"uIntVal\"|undefined} _uIntVal\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @instance\n             */\n            Object.defineProperty(GameFlag.prototype, \"_uIntVal\", {\n                get: $util.oneOfGetter($oneOfFields = [\"uIntVal\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new GameFlag instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @static\n             * @param {NT.ServerRoomFlagsUpdated.IGameFlag=} [properties] Properties to set\n             * @returns {NT.ServerRoomFlagsUpdated.GameFlag} GameFlag instance\n             */\n            GameFlag.create = function create(properties) {\n                return new GameFlag(properties);\n            };\n\n            /**\n             * Encodes the specified GameFlag message. Does not implicitly {@link NT.ServerRoomFlagsUpdated.GameFlag.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @static\n             * @param {NT.ServerRoomFlagsUpdated.IGameFlag} message GameFlag message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            GameFlag.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.flag != null && Object.hasOwnProperty.call(message, \"flag\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.flag);\n                if (message.intVal != null && Object.hasOwnProperty.call(message, \"intVal\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.intVal);\n                if (message.strVal != null && Object.hasOwnProperty.call(message, \"strVal\"))\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.strVal);\n                if (message.floatVal != null && Object.hasOwnProperty.call(message, \"floatVal\"))\n                    writer.uint32(/* id 4, wireType 5 =*/37).float(message.floatVal);\n                if (message.boolVal != null && Object.hasOwnProperty.call(message, \"boolVal\"))\n                    writer.uint32(/* id 5, wireType 0 =*/40).bool(message.boolVal);\n                if (message.uIntVal != null && Object.hasOwnProperty.call(message, \"uIntVal\"))\n                    writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.uIntVal);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified GameFlag message, length delimited. Does not implicitly {@link NT.ServerRoomFlagsUpdated.GameFlag.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @static\n             * @param {NT.ServerRoomFlagsUpdated.IGameFlag} message GameFlag message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            GameFlag.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a GameFlag message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerRoomFlagsUpdated.GameFlag} GameFlag\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            GameFlag.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomFlagsUpdated.GameFlag();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.flag = reader.string();\n                            break;\n                        }\n                    case 2: {\n                            message.intVal = reader.int32();\n                            break;\n                        }\n                    case 3: {\n                            message.strVal = reader.string();\n                            break;\n                        }\n                    case 4: {\n                            message.floatVal = reader.float();\n                            break;\n                        }\n                    case 5: {\n                            message.boolVal = reader.bool();\n                            break;\n                        }\n                    case 6: {\n                            message.uIntVal = reader.uint32();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a GameFlag message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerRoomFlagsUpdated.GameFlag} GameFlag\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            GameFlag.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a GameFlag message.\n             * @function verify\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            GameFlag.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                let properties = {};\n                if (message.flag != null && message.hasOwnProperty(\"flag\"))\n                    if (!$util.isString(message.flag))\n                        return \"flag: string expected\";\n                if (message.intVal != null && message.hasOwnProperty(\"intVal\")) {\n                    properties._intVal = 1;\n                    if (!$util.isInteger(message.intVal))\n                        return \"intVal: integer expected\";\n                }\n                if (message.strVal != null && message.hasOwnProperty(\"strVal\")) {\n                    properties._strVal = 1;\n                    if (!$util.isString(message.strVal))\n                        return \"strVal: string expected\";\n                }\n                if (message.floatVal != null && message.hasOwnProperty(\"floatVal\")) {\n                    properties._floatVal = 1;\n                    if (typeof message.floatVal !== \"number\")\n                        return \"floatVal: number expected\";\n                }\n                if (message.boolVal != null && message.hasOwnProperty(\"boolVal\")) {\n                    properties._boolVal = 1;\n                    if (typeof message.boolVal !== \"boolean\")\n                        return \"boolVal: boolean expected\";\n                }\n                if (message.uIntVal != null && message.hasOwnProperty(\"uIntVal\")) {\n                    properties._uIntVal = 1;\n                    if (!$util.isInteger(message.uIntVal))\n                        return \"uIntVal: integer expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a GameFlag message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerRoomFlagsUpdated.GameFlag} GameFlag\n             */\n            GameFlag.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerRoomFlagsUpdated.GameFlag)\n                    return object;\n                let message = new $root.NT.ServerRoomFlagsUpdated.GameFlag();\n                if (object.flag != null)\n                    message.flag = String(object.flag);\n                if (object.intVal != null)\n                    message.intVal = object.intVal | 0;\n                if (object.strVal != null)\n                    message.strVal = String(object.strVal);\n                if (object.floatVal != null)\n                    message.floatVal = Number(object.floatVal);\n                if (object.boolVal != null)\n                    message.boolVal = Boolean(object.boolVal);\n                if (object.uIntVal != null)\n                    message.uIntVal = object.uIntVal >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a GameFlag message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @static\n             * @param {NT.ServerRoomFlagsUpdated.GameFlag} message GameFlag\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            GameFlag.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults)\n                    object.flag = \"\";\n                if (message.flag != null && message.hasOwnProperty(\"flag\"))\n                    object.flag = message.flag;\n                if (message.intVal != null && message.hasOwnProperty(\"intVal\")) {\n                    object.intVal = message.intVal;\n                    if (options.oneofs)\n                        object._intVal = \"intVal\";\n                }\n                if (message.strVal != null && message.hasOwnProperty(\"strVal\")) {\n                    object.strVal = message.strVal;\n                    if (options.oneofs)\n                        object._strVal = \"strVal\";\n                }\n                if (message.floatVal != null && message.hasOwnProperty(\"floatVal\")) {\n                    object.floatVal = options.json && !isFinite(message.floatVal) ? String(message.floatVal) : message.floatVal;\n                    if (options.oneofs)\n                        object._floatVal = \"floatVal\";\n                }\n                if (message.boolVal != null && message.hasOwnProperty(\"boolVal\")) {\n                    object.boolVal = message.boolVal;\n                    if (options.oneofs)\n                        object._boolVal = \"boolVal\";\n                }\n                if (message.uIntVal != null && message.hasOwnProperty(\"uIntVal\")) {\n                    object.uIntVal = message.uIntVal;\n                    if (options.oneofs)\n                        object._uIntVal = \"uIntVal\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this GameFlag to JSON.\n             * @function toJSON\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            GameFlag.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for GameFlag\n             * @function getTypeUrl\n             * @memberof NT.ServerRoomFlagsUpdated.GameFlag\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            GameFlag.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerRoomFlagsUpdated.GameFlag\";\n            };\n\n            return GameFlag;\n        })();\n\n        return ServerRoomFlagsUpdated;\n    })();\n\n    NT.ServerRoomFlagsUpdateFailed = (function() {\n\n        /**\n         * Properties of a ServerRoomFlagsUpdateFailed.\n         * @memberof NT\n         * @interface IServerRoomFlagsUpdateFailed\n         * @property {string|null} [reason] ServerRoomFlagsUpdateFailed reason\n         */\n\n        /**\n         * Constructs a new ServerRoomFlagsUpdateFailed.\n         * @memberof NT\n         * @classdesc Represents a ServerRoomFlagsUpdateFailed.\n         * @implements IServerRoomFlagsUpdateFailed\n         * @constructor\n         * @param {NT.IServerRoomFlagsUpdateFailed=} [properties] Properties to set\n         */\n        function ServerRoomFlagsUpdateFailed(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerRoomFlagsUpdateFailed reason.\n         * @member {string} reason\n         * @memberof NT.ServerRoomFlagsUpdateFailed\n         * @instance\n         */\n        ServerRoomFlagsUpdateFailed.prototype.reason = \"\";\n\n        /**\n         * Creates a new ServerRoomFlagsUpdateFailed instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerRoomFlagsUpdateFailed\n         * @static\n         * @param {NT.IServerRoomFlagsUpdateFailed=} [properties] Properties to set\n         * @returns {NT.ServerRoomFlagsUpdateFailed} ServerRoomFlagsUpdateFailed instance\n         */\n        ServerRoomFlagsUpdateFailed.create = function create(properties) {\n            return new ServerRoomFlagsUpdateFailed(properties);\n        };\n\n        /**\n         * Encodes the specified ServerRoomFlagsUpdateFailed message. Does not implicitly {@link NT.ServerRoomFlagsUpdateFailed.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerRoomFlagsUpdateFailed\n         * @static\n         * @param {NT.IServerRoomFlagsUpdateFailed} message ServerRoomFlagsUpdateFailed message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomFlagsUpdateFailed.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.reason != null && Object.hasOwnProperty.call(message, \"reason\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.reason);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerRoomFlagsUpdateFailed message, length delimited. Does not implicitly {@link NT.ServerRoomFlagsUpdateFailed.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerRoomFlagsUpdateFailed\n         * @static\n         * @param {NT.IServerRoomFlagsUpdateFailed} message ServerRoomFlagsUpdateFailed message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomFlagsUpdateFailed.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerRoomFlagsUpdateFailed message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerRoomFlagsUpdateFailed\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerRoomFlagsUpdateFailed} ServerRoomFlagsUpdateFailed\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomFlagsUpdateFailed.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomFlagsUpdateFailed();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.reason = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerRoomFlagsUpdateFailed message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerRoomFlagsUpdateFailed\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerRoomFlagsUpdateFailed} ServerRoomFlagsUpdateFailed\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomFlagsUpdateFailed.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerRoomFlagsUpdateFailed message.\n         * @function verify\n         * @memberof NT.ServerRoomFlagsUpdateFailed\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerRoomFlagsUpdateFailed.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                if (!$util.isString(message.reason))\n                    return \"reason: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerRoomFlagsUpdateFailed message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerRoomFlagsUpdateFailed\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerRoomFlagsUpdateFailed} ServerRoomFlagsUpdateFailed\n         */\n        ServerRoomFlagsUpdateFailed.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerRoomFlagsUpdateFailed)\n                return object;\n            let message = new $root.NT.ServerRoomFlagsUpdateFailed();\n            if (object.reason != null)\n                message.reason = String(object.reason);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerRoomFlagsUpdateFailed message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerRoomFlagsUpdateFailed\n         * @static\n         * @param {NT.ServerRoomFlagsUpdateFailed} message ServerRoomFlagsUpdateFailed\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerRoomFlagsUpdateFailed.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.reason = \"\";\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                object.reason = message.reason;\n            return object;\n        };\n\n        /**\n         * Converts this ServerRoomFlagsUpdateFailed to JSON.\n         * @function toJSON\n         * @memberof NT.ServerRoomFlagsUpdateFailed\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerRoomFlagsUpdateFailed.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerRoomFlagsUpdateFailed\n         * @function getTypeUrl\n         * @memberof NT.ServerRoomFlagsUpdateFailed\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerRoomFlagsUpdateFailed.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerRoomFlagsUpdateFailed\";\n        };\n\n        return ServerRoomFlagsUpdateFailed;\n    })();\n\n    NT.ClientJoinRoom = (function() {\n\n        /**\n         * Properties of a ClientJoinRoom.\n         * @memberof NT\n         * @interface IClientJoinRoom\n         * @property {string|null} [id] ClientJoinRoom id\n         * @property {string|null} [password] ClientJoinRoom password\n         */\n\n        /**\n         * Constructs a new ClientJoinRoom.\n         * @memberof NT\n         * @classdesc Represents a ClientJoinRoom.\n         * @implements IClientJoinRoom\n         * @constructor\n         * @param {NT.IClientJoinRoom=} [properties] Properties to set\n         */\n        function ClientJoinRoom(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientJoinRoom id.\n         * @member {string} id\n         * @memberof NT.ClientJoinRoom\n         * @instance\n         */\n        ClientJoinRoom.prototype.id = \"\";\n\n        /**\n         * ClientJoinRoom password.\n         * @member {string|null|undefined} password\n         * @memberof NT.ClientJoinRoom\n         * @instance\n         */\n        ClientJoinRoom.prototype.password = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ClientJoinRoom _password.\n         * @member {\"password\"|undefined} _password\n         * @memberof NT.ClientJoinRoom\n         * @instance\n         */\n        Object.defineProperty(ClientJoinRoom.prototype, \"_password\", {\n            get: $util.oneOfGetter($oneOfFields = [\"password\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ClientJoinRoom instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientJoinRoom\n         * @static\n         * @param {NT.IClientJoinRoom=} [properties] Properties to set\n         * @returns {NT.ClientJoinRoom} ClientJoinRoom instance\n         */\n        ClientJoinRoom.create = function create(properties) {\n            return new ClientJoinRoom(properties);\n        };\n\n        /**\n         * Encodes the specified ClientJoinRoom message. Does not implicitly {@link NT.ClientJoinRoom.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientJoinRoom\n         * @static\n         * @param {NT.IClientJoinRoom} message ClientJoinRoom message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientJoinRoom.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.password != null && Object.hasOwnProperty.call(message, \"password\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.password);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientJoinRoom message, length delimited. Does not implicitly {@link NT.ClientJoinRoom.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientJoinRoom\n         * @static\n         * @param {NT.IClientJoinRoom} message ClientJoinRoom message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientJoinRoom.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientJoinRoom message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientJoinRoom\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientJoinRoom} ClientJoinRoom\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientJoinRoom.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientJoinRoom();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.password = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientJoinRoom message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientJoinRoom\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientJoinRoom} ClientJoinRoom\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientJoinRoom.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientJoinRoom message.\n         * @function verify\n         * @memberof NT.ClientJoinRoom\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientJoinRoom.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.password != null && message.hasOwnProperty(\"password\")) {\n                properties._password = 1;\n                if (!$util.isString(message.password))\n                    return \"password: string expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientJoinRoom message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientJoinRoom\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientJoinRoom} ClientJoinRoom\n         */\n        ClientJoinRoom.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientJoinRoom)\n                return object;\n            let message = new $root.NT.ClientJoinRoom();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.password != null)\n                message.password = String(object.password);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientJoinRoom message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientJoinRoom\n         * @static\n         * @param {NT.ClientJoinRoom} message ClientJoinRoom\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientJoinRoom.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.id = \"\";\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.password != null && message.hasOwnProperty(\"password\")) {\n                object.password = message.password;\n                if (options.oneofs)\n                    object._password = \"password\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientJoinRoom to JSON.\n         * @function toJSON\n         * @memberof NT.ClientJoinRoom\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientJoinRoom.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientJoinRoom\n         * @function getTypeUrl\n         * @memberof NT.ClientJoinRoom\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientJoinRoom.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientJoinRoom\";\n        };\n\n        return ClientJoinRoom;\n    })();\n\n    NT.ServerJoinRoomSuccess = (function() {\n\n        /**\n         * Properties of a ServerJoinRoomSuccess.\n         * @memberof NT\n         * @interface IServerJoinRoomSuccess\n         * @property {string|null} [id] ServerJoinRoomSuccess id\n         * @property {string|null} [name] ServerJoinRoomSuccess name\n         * @property {number|null} [gamemode] ServerJoinRoomSuccess gamemode\n         * @property {number|null} [maxUsers] ServerJoinRoomSuccess maxUsers\n         * @property {string|null} [password] ServerJoinRoomSuccess password\n         * @property {boolean|null} [locked] ServerJoinRoomSuccess locked\n         * @property {Array.<NT.ServerJoinRoomSuccess.IUser>|null} [users] ServerJoinRoomSuccess users\n         */\n\n        /**\n         * Constructs a new ServerJoinRoomSuccess.\n         * @memberof NT\n         * @classdesc Represents a ServerJoinRoomSuccess.\n         * @implements IServerJoinRoomSuccess\n         * @constructor\n         * @param {NT.IServerJoinRoomSuccess=} [properties] Properties to set\n         */\n        function ServerJoinRoomSuccess(properties) {\n            this.users = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerJoinRoomSuccess id.\n         * @member {string} id\n         * @memberof NT.ServerJoinRoomSuccess\n         * @instance\n         */\n        ServerJoinRoomSuccess.prototype.id = \"\";\n\n        /**\n         * ServerJoinRoomSuccess name.\n         * @member {string} name\n         * @memberof NT.ServerJoinRoomSuccess\n         * @instance\n         */\n        ServerJoinRoomSuccess.prototype.name = \"\";\n\n        /**\n         * ServerJoinRoomSuccess gamemode.\n         * @member {number} gamemode\n         * @memberof NT.ServerJoinRoomSuccess\n         * @instance\n         */\n        ServerJoinRoomSuccess.prototype.gamemode = 0;\n\n        /**\n         * ServerJoinRoomSuccess maxUsers.\n         * @member {number} maxUsers\n         * @memberof NT.ServerJoinRoomSuccess\n         * @instance\n         */\n        ServerJoinRoomSuccess.prototype.maxUsers = 0;\n\n        /**\n         * ServerJoinRoomSuccess password.\n         * @member {string|null|undefined} password\n         * @memberof NT.ServerJoinRoomSuccess\n         * @instance\n         */\n        ServerJoinRoomSuccess.prototype.password = null;\n\n        /**\n         * ServerJoinRoomSuccess locked.\n         * @member {boolean} locked\n         * @memberof NT.ServerJoinRoomSuccess\n         * @instance\n         */\n        ServerJoinRoomSuccess.prototype.locked = false;\n\n        /**\n         * ServerJoinRoomSuccess users.\n         * @member {Array.<NT.ServerJoinRoomSuccess.IUser>} users\n         * @memberof NT.ServerJoinRoomSuccess\n         * @instance\n         */\n        ServerJoinRoomSuccess.prototype.users = $util.emptyArray;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ServerJoinRoomSuccess _password.\n         * @member {\"password\"|undefined} _password\n         * @memberof NT.ServerJoinRoomSuccess\n         * @instance\n         */\n        Object.defineProperty(ServerJoinRoomSuccess.prototype, \"_password\", {\n            get: $util.oneOfGetter($oneOfFields = [\"password\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ServerJoinRoomSuccess instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerJoinRoomSuccess\n         * @static\n         * @param {NT.IServerJoinRoomSuccess=} [properties] Properties to set\n         * @returns {NT.ServerJoinRoomSuccess} ServerJoinRoomSuccess instance\n         */\n        ServerJoinRoomSuccess.create = function create(properties) {\n            return new ServerJoinRoomSuccess(properties);\n        };\n\n        /**\n         * Encodes the specified ServerJoinRoomSuccess message. Does not implicitly {@link NT.ServerJoinRoomSuccess.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerJoinRoomSuccess\n         * @static\n         * @param {NT.IServerJoinRoomSuccess} message ServerJoinRoomSuccess message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerJoinRoomSuccess.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            if (message.gamemode != null && Object.hasOwnProperty.call(message, \"gamemode\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gamemode);\n            if (message.maxUsers != null && Object.hasOwnProperty.call(message, \"maxUsers\"))\n                writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.maxUsers);\n            if (message.password != null && Object.hasOwnProperty.call(message, \"password\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.password);\n            if (message.locked != null && Object.hasOwnProperty.call(message, \"locked\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.locked);\n            if (message.users != null && message.users.length)\n                for (let i = 0; i < message.users.length; ++i)\n                    $root.NT.ServerJoinRoomSuccess.User.encode(message.users[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerJoinRoomSuccess message, length delimited. Does not implicitly {@link NT.ServerJoinRoomSuccess.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerJoinRoomSuccess\n         * @static\n         * @param {NT.IServerJoinRoomSuccess} message ServerJoinRoomSuccess message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerJoinRoomSuccess.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerJoinRoomSuccess message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerJoinRoomSuccess\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerJoinRoomSuccess} ServerJoinRoomSuccess\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerJoinRoomSuccess.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerJoinRoomSuccess();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.id = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                case 3: {\n                        message.gamemode = reader.uint32();\n                        break;\n                    }\n                case 4: {\n                        message.maxUsers = reader.uint32();\n                        break;\n                    }\n                case 5: {\n                        message.password = reader.string();\n                        break;\n                    }\n                case 6: {\n                        message.locked = reader.bool();\n                        break;\n                    }\n                case 7: {\n                        if (!(message.users && message.users.length))\n                            message.users = [];\n                        message.users.push($root.NT.ServerJoinRoomSuccess.User.decode(reader, reader.uint32()));\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerJoinRoomSuccess message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerJoinRoomSuccess\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerJoinRoomSuccess} ServerJoinRoomSuccess\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerJoinRoomSuccess.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerJoinRoomSuccess message.\n         * @function verify\n         * @memberof NT.ServerJoinRoomSuccess\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerJoinRoomSuccess.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                if (!$util.isString(message.id))\n                    return \"id: string expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            if (message.gamemode != null && message.hasOwnProperty(\"gamemode\"))\n                if (!$util.isInteger(message.gamemode))\n                    return \"gamemode: integer expected\";\n            if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\"))\n                if (!$util.isInteger(message.maxUsers))\n                    return \"maxUsers: integer expected\";\n            if (message.password != null && message.hasOwnProperty(\"password\")) {\n                properties._password = 1;\n                if (!$util.isString(message.password))\n                    return \"password: string expected\";\n            }\n            if (message.locked != null && message.hasOwnProperty(\"locked\"))\n                if (typeof message.locked !== \"boolean\")\n                    return \"locked: boolean expected\";\n            if (message.users != null && message.hasOwnProperty(\"users\")) {\n                if (!Array.isArray(message.users))\n                    return \"users: array expected\";\n                for (let i = 0; i < message.users.length; ++i) {\n                    let error = $root.NT.ServerJoinRoomSuccess.User.verify(message.users[i]);\n                    if (error)\n                        return \"users.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerJoinRoomSuccess message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerJoinRoomSuccess\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerJoinRoomSuccess} ServerJoinRoomSuccess\n         */\n        ServerJoinRoomSuccess.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerJoinRoomSuccess)\n                return object;\n            let message = new $root.NT.ServerJoinRoomSuccess();\n            if (object.id != null)\n                message.id = String(object.id);\n            if (object.name != null)\n                message.name = String(object.name);\n            if (object.gamemode != null)\n                message.gamemode = object.gamemode >>> 0;\n            if (object.maxUsers != null)\n                message.maxUsers = object.maxUsers >>> 0;\n            if (object.password != null)\n                message.password = String(object.password);\n            if (object.locked != null)\n                message.locked = Boolean(object.locked);\n            if (object.users) {\n                if (!Array.isArray(object.users))\n                    throw TypeError(\".NT.ServerJoinRoomSuccess.users: array expected\");\n                message.users = [];\n                for (let i = 0; i < object.users.length; ++i) {\n                    if (typeof object.users[i] !== \"object\")\n                        throw TypeError(\".NT.ServerJoinRoomSuccess.users: object expected\");\n                    message.users[i] = $root.NT.ServerJoinRoomSuccess.User.fromObject(object.users[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerJoinRoomSuccess message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerJoinRoomSuccess\n         * @static\n         * @param {NT.ServerJoinRoomSuccess} message ServerJoinRoomSuccess\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerJoinRoomSuccess.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.users = [];\n            if (options.defaults) {\n                object.id = \"\";\n                object.name = \"\";\n                object.gamemode = 0;\n                object.maxUsers = 0;\n                object.locked = false;\n            }\n            if (message.id != null && message.hasOwnProperty(\"id\"))\n                object.id = message.id;\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            if (message.gamemode != null && message.hasOwnProperty(\"gamemode\"))\n                object.gamemode = message.gamemode;\n            if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\"))\n                object.maxUsers = message.maxUsers;\n            if (message.password != null && message.hasOwnProperty(\"password\")) {\n                object.password = message.password;\n                if (options.oneofs)\n                    object._password = \"password\";\n            }\n            if (message.locked != null && message.hasOwnProperty(\"locked\"))\n                object.locked = message.locked;\n            if (message.users && message.users.length) {\n                object.users = [];\n                for (let j = 0; j < message.users.length; ++j)\n                    object.users[j] = $root.NT.ServerJoinRoomSuccess.User.toObject(message.users[j], options);\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerJoinRoomSuccess to JSON.\n         * @function toJSON\n         * @memberof NT.ServerJoinRoomSuccess\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerJoinRoomSuccess.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerJoinRoomSuccess\n         * @function getTypeUrl\n         * @memberof NT.ServerJoinRoomSuccess\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerJoinRoomSuccess.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerJoinRoomSuccess\";\n        };\n\n        ServerJoinRoomSuccess.User = (function() {\n\n            /**\n             * Properties of a User.\n             * @memberof NT.ServerJoinRoomSuccess\n             * @interface IUser\n             * @property {string|null} [userId] User userId\n             * @property {string|null} [name] User name\n             * @property {boolean|null} [ready] User ready\n             * @property {boolean|null} [owner] User owner\n             */\n\n            /**\n             * Constructs a new User.\n             * @memberof NT.ServerJoinRoomSuccess\n             * @classdesc Represents a User.\n             * @implements IUser\n             * @constructor\n             * @param {NT.ServerJoinRoomSuccess.IUser=} [properties] Properties to set\n             */\n            function User(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * User userId.\n             * @member {string} userId\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @instance\n             */\n            User.prototype.userId = \"\";\n\n            /**\n             * User name.\n             * @member {string} name\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @instance\n             */\n            User.prototype.name = \"\";\n\n            /**\n             * User ready.\n             * @member {boolean} ready\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @instance\n             */\n            User.prototype.ready = false;\n\n            /**\n             * User owner.\n             * @member {boolean} owner\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @instance\n             */\n            User.prototype.owner = false;\n\n            /**\n             * Creates a new User instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @static\n             * @param {NT.ServerJoinRoomSuccess.IUser=} [properties] Properties to set\n             * @returns {NT.ServerJoinRoomSuccess.User} User instance\n             */\n            User.create = function create(properties) {\n                return new User(properties);\n            };\n\n            /**\n             * Encodes the specified User message. Does not implicitly {@link NT.ServerJoinRoomSuccess.User.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @static\n             * @param {NT.ServerJoinRoomSuccess.IUser} message User message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            User.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n                if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                if (message.ready != null && Object.hasOwnProperty.call(message, \"ready\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).bool(message.ready);\n                if (message.owner != null && Object.hasOwnProperty.call(message, \"owner\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).bool(message.owner);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified User message, length delimited. Does not implicitly {@link NT.ServerJoinRoomSuccess.User.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @static\n             * @param {NT.ServerJoinRoomSuccess.IUser} message User message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            User.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a User message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerJoinRoomSuccess.User} User\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            User.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerJoinRoomSuccess.User();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.userId = reader.string();\n                            break;\n                        }\n                    case 2: {\n                            message.name = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.ready = reader.bool();\n                            break;\n                        }\n                    case 4: {\n                            message.owner = reader.bool();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a User message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerJoinRoomSuccess.User} User\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            User.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a User message.\n             * @function verify\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            User.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                    if (!$util.isString(message.userId))\n                        return \"userId: string expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isString(message.name))\n                        return \"name: string expected\";\n                if (message.ready != null && message.hasOwnProperty(\"ready\"))\n                    if (typeof message.ready !== \"boolean\")\n                        return \"ready: boolean expected\";\n                if (message.owner != null && message.hasOwnProperty(\"owner\"))\n                    if (typeof message.owner !== \"boolean\")\n                        return \"owner: boolean expected\";\n                return null;\n            };\n\n            /**\n             * Creates a User message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerJoinRoomSuccess.User} User\n             */\n            User.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerJoinRoomSuccess.User)\n                    return object;\n                let message = new $root.NT.ServerJoinRoomSuccess.User();\n                if (object.userId != null)\n                    message.userId = String(object.userId);\n                if (object.name != null)\n                    message.name = String(object.name);\n                if (object.ready != null)\n                    message.ready = Boolean(object.ready);\n                if (object.owner != null)\n                    message.owner = Boolean(object.owner);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a User message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @static\n             * @param {NT.ServerJoinRoomSuccess.User} message User\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            User.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.userId = \"\";\n                    object.name = \"\";\n                    object.ready = false;\n                    object.owner = false;\n                }\n                if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                    object.userId = message.userId;\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    object.name = message.name;\n                if (message.ready != null && message.hasOwnProperty(\"ready\"))\n                    object.ready = message.ready;\n                if (message.owner != null && message.hasOwnProperty(\"owner\"))\n                    object.owner = message.owner;\n                return object;\n            };\n\n            /**\n             * Converts this User to JSON.\n             * @function toJSON\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            User.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for User\n             * @function getTypeUrl\n             * @memberof NT.ServerJoinRoomSuccess.User\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            User.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerJoinRoomSuccess.User\";\n            };\n\n            return User;\n        })();\n\n        return ServerJoinRoomSuccess;\n    })();\n\n    NT.ServerJoinRoomFailed = (function() {\n\n        /**\n         * Properties of a ServerJoinRoomFailed.\n         * @memberof NT\n         * @interface IServerJoinRoomFailed\n         * @property {string|null} [reason] ServerJoinRoomFailed reason\n         */\n\n        /**\n         * Constructs a new ServerJoinRoomFailed.\n         * @memberof NT\n         * @classdesc Represents a ServerJoinRoomFailed.\n         * @implements IServerJoinRoomFailed\n         * @constructor\n         * @param {NT.IServerJoinRoomFailed=} [properties] Properties to set\n         */\n        function ServerJoinRoomFailed(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerJoinRoomFailed reason.\n         * @member {string} reason\n         * @memberof NT.ServerJoinRoomFailed\n         * @instance\n         */\n        ServerJoinRoomFailed.prototype.reason = \"\";\n\n        /**\n         * Creates a new ServerJoinRoomFailed instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerJoinRoomFailed\n         * @static\n         * @param {NT.IServerJoinRoomFailed=} [properties] Properties to set\n         * @returns {NT.ServerJoinRoomFailed} ServerJoinRoomFailed instance\n         */\n        ServerJoinRoomFailed.create = function create(properties) {\n            return new ServerJoinRoomFailed(properties);\n        };\n\n        /**\n         * Encodes the specified ServerJoinRoomFailed message. Does not implicitly {@link NT.ServerJoinRoomFailed.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerJoinRoomFailed\n         * @static\n         * @param {NT.IServerJoinRoomFailed} message ServerJoinRoomFailed message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerJoinRoomFailed.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.reason != null && Object.hasOwnProperty.call(message, \"reason\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.reason);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerJoinRoomFailed message, length delimited. Does not implicitly {@link NT.ServerJoinRoomFailed.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerJoinRoomFailed\n         * @static\n         * @param {NT.IServerJoinRoomFailed} message ServerJoinRoomFailed message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerJoinRoomFailed.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerJoinRoomFailed message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerJoinRoomFailed\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerJoinRoomFailed} ServerJoinRoomFailed\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerJoinRoomFailed.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerJoinRoomFailed();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.reason = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerJoinRoomFailed message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerJoinRoomFailed\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerJoinRoomFailed} ServerJoinRoomFailed\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerJoinRoomFailed.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerJoinRoomFailed message.\n         * @function verify\n         * @memberof NT.ServerJoinRoomFailed\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerJoinRoomFailed.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                if (!$util.isString(message.reason))\n                    return \"reason: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerJoinRoomFailed message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerJoinRoomFailed\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerJoinRoomFailed} ServerJoinRoomFailed\n         */\n        ServerJoinRoomFailed.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerJoinRoomFailed)\n                return object;\n            let message = new $root.NT.ServerJoinRoomFailed();\n            if (object.reason != null)\n                message.reason = String(object.reason);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerJoinRoomFailed message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerJoinRoomFailed\n         * @static\n         * @param {NT.ServerJoinRoomFailed} message ServerJoinRoomFailed\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerJoinRoomFailed.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.reason = \"\";\n            if (message.reason != null && message.hasOwnProperty(\"reason\"))\n                object.reason = message.reason;\n            return object;\n        };\n\n        /**\n         * Converts this ServerJoinRoomFailed to JSON.\n         * @function toJSON\n         * @memberof NT.ServerJoinRoomFailed\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerJoinRoomFailed.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerJoinRoomFailed\n         * @function getTypeUrl\n         * @memberof NT.ServerJoinRoomFailed\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerJoinRoomFailed.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerJoinRoomFailed\";\n        };\n\n        return ServerJoinRoomFailed;\n    })();\n\n    NT.ServerUserJoinedRoom = (function() {\n\n        /**\n         * Properties of a ServerUserJoinedRoom.\n         * @memberof NT\n         * @interface IServerUserJoinedRoom\n         * @property {string|null} [userId] ServerUserJoinedRoom userId\n         * @property {string|null} [name] ServerUserJoinedRoom name\n         */\n\n        /**\n         * Constructs a new ServerUserJoinedRoom.\n         * @memberof NT\n         * @classdesc Represents a ServerUserJoinedRoom.\n         * @implements IServerUserJoinedRoom\n         * @constructor\n         * @param {NT.IServerUserJoinedRoom=} [properties] Properties to set\n         */\n        function ServerUserJoinedRoom(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerUserJoinedRoom userId.\n         * @member {string} userId\n         * @memberof NT.ServerUserJoinedRoom\n         * @instance\n         */\n        ServerUserJoinedRoom.prototype.userId = \"\";\n\n        /**\n         * ServerUserJoinedRoom name.\n         * @member {string} name\n         * @memberof NT.ServerUserJoinedRoom\n         * @instance\n         */\n        ServerUserJoinedRoom.prototype.name = \"\";\n\n        /**\n         * Creates a new ServerUserJoinedRoom instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerUserJoinedRoom\n         * @static\n         * @param {NT.IServerUserJoinedRoom=} [properties] Properties to set\n         * @returns {NT.ServerUserJoinedRoom} ServerUserJoinedRoom instance\n         */\n        ServerUserJoinedRoom.create = function create(properties) {\n            return new ServerUserJoinedRoom(properties);\n        };\n\n        /**\n         * Encodes the specified ServerUserJoinedRoom message. Does not implicitly {@link NT.ServerUserJoinedRoom.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerUserJoinedRoom\n         * @static\n         * @param {NT.IServerUserJoinedRoom} message ServerUserJoinedRoom message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerUserJoinedRoom.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerUserJoinedRoom message, length delimited. Does not implicitly {@link NT.ServerUserJoinedRoom.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerUserJoinedRoom\n         * @static\n         * @param {NT.IServerUserJoinedRoom} message ServerUserJoinedRoom message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerUserJoinedRoom.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerUserJoinedRoom message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerUserJoinedRoom\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerUserJoinedRoom} ServerUserJoinedRoom\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerUserJoinedRoom.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerUserJoinedRoom();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.name = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerUserJoinedRoom message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerUserJoinedRoom\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerUserJoinedRoom} ServerUserJoinedRoom\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerUserJoinedRoom.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerUserJoinedRoom message.\n         * @function verify\n         * @memberof NT.ServerUserJoinedRoom\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerUserJoinedRoom.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                if (!$util.isString(message.name))\n                    return \"name: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerUserJoinedRoom message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerUserJoinedRoom\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerUserJoinedRoom} ServerUserJoinedRoom\n         */\n        ServerUserJoinedRoom.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerUserJoinedRoom)\n                return object;\n            let message = new $root.NT.ServerUserJoinedRoom();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.name != null)\n                message.name = String(object.name);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerUserJoinedRoom message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerUserJoinedRoom\n         * @static\n         * @param {NT.ServerUserJoinedRoom} message ServerUserJoinedRoom\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerUserJoinedRoom.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.userId = \"\";\n                object.name = \"\";\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.name != null && message.hasOwnProperty(\"name\"))\n                object.name = message.name;\n            return object;\n        };\n\n        /**\n         * Converts this ServerUserJoinedRoom to JSON.\n         * @function toJSON\n         * @memberof NT.ServerUserJoinedRoom\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerUserJoinedRoom.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerUserJoinedRoom\n         * @function getTypeUrl\n         * @memberof NT.ServerUserJoinedRoom\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerUserJoinedRoom.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerUserJoinedRoom\";\n        };\n\n        return ServerUserJoinedRoom;\n    })();\n\n    NT.ClientLeaveRoom = (function() {\n\n        /**\n         * Properties of a ClientLeaveRoom.\n         * @memberof NT\n         * @interface IClientLeaveRoom\n         * @property {string|null} [userId] ClientLeaveRoom userId\n         */\n\n        /**\n         * Constructs a new ClientLeaveRoom.\n         * @memberof NT\n         * @classdesc Represents a ClientLeaveRoom.\n         * @implements IClientLeaveRoom\n         * @constructor\n         * @param {NT.IClientLeaveRoom=} [properties] Properties to set\n         */\n        function ClientLeaveRoom(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientLeaveRoom userId.\n         * @member {string} userId\n         * @memberof NT.ClientLeaveRoom\n         * @instance\n         */\n        ClientLeaveRoom.prototype.userId = \"\";\n\n        /**\n         * Creates a new ClientLeaveRoom instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientLeaveRoom\n         * @static\n         * @param {NT.IClientLeaveRoom=} [properties] Properties to set\n         * @returns {NT.ClientLeaveRoom} ClientLeaveRoom instance\n         */\n        ClientLeaveRoom.create = function create(properties) {\n            return new ClientLeaveRoom(properties);\n        };\n\n        /**\n         * Encodes the specified ClientLeaveRoom message. Does not implicitly {@link NT.ClientLeaveRoom.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientLeaveRoom\n         * @static\n         * @param {NT.IClientLeaveRoom} message ClientLeaveRoom message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientLeaveRoom.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientLeaveRoom message, length delimited. Does not implicitly {@link NT.ClientLeaveRoom.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientLeaveRoom\n         * @static\n         * @param {NT.IClientLeaveRoom} message ClientLeaveRoom message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientLeaveRoom.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientLeaveRoom message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientLeaveRoom\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientLeaveRoom} ClientLeaveRoom\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientLeaveRoom.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientLeaveRoom();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientLeaveRoom message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientLeaveRoom\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientLeaveRoom} ClientLeaveRoom\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientLeaveRoom.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientLeaveRoom message.\n         * @function verify\n         * @memberof NT.ClientLeaveRoom\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientLeaveRoom.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientLeaveRoom message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientLeaveRoom\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientLeaveRoom} ClientLeaveRoom\n         */\n        ClientLeaveRoom.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientLeaveRoom)\n                return object;\n            let message = new $root.NT.ClientLeaveRoom();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientLeaveRoom message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientLeaveRoom\n         * @static\n         * @param {NT.ClientLeaveRoom} message ClientLeaveRoom\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientLeaveRoom.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.userId = \"\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            return object;\n        };\n\n        /**\n         * Converts this ClientLeaveRoom to JSON.\n         * @function toJSON\n         * @memberof NT.ClientLeaveRoom\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientLeaveRoom.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientLeaveRoom\n         * @function getTypeUrl\n         * @memberof NT.ClientLeaveRoom\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientLeaveRoom.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientLeaveRoom\";\n        };\n\n        return ClientLeaveRoom;\n    })();\n\n    NT.ServerUserLeftRoom = (function() {\n\n        /**\n         * Properties of a ServerUserLeftRoom.\n         * @memberof NT\n         * @interface IServerUserLeftRoom\n         * @property {string|null} [userId] ServerUserLeftRoom userId\n         */\n\n        /**\n         * Constructs a new ServerUserLeftRoom.\n         * @memberof NT\n         * @classdesc Represents a ServerUserLeftRoom.\n         * @implements IServerUserLeftRoom\n         * @constructor\n         * @param {NT.IServerUserLeftRoom=} [properties] Properties to set\n         */\n        function ServerUserLeftRoom(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerUserLeftRoom userId.\n         * @member {string} userId\n         * @memberof NT.ServerUserLeftRoom\n         * @instance\n         */\n        ServerUserLeftRoom.prototype.userId = \"\";\n\n        /**\n         * Creates a new ServerUserLeftRoom instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerUserLeftRoom\n         * @static\n         * @param {NT.IServerUserLeftRoom=} [properties] Properties to set\n         * @returns {NT.ServerUserLeftRoom} ServerUserLeftRoom instance\n         */\n        ServerUserLeftRoom.create = function create(properties) {\n            return new ServerUserLeftRoom(properties);\n        };\n\n        /**\n         * Encodes the specified ServerUserLeftRoom message. Does not implicitly {@link NT.ServerUserLeftRoom.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerUserLeftRoom\n         * @static\n         * @param {NT.IServerUserLeftRoom} message ServerUserLeftRoom message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerUserLeftRoom.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerUserLeftRoom message, length delimited. Does not implicitly {@link NT.ServerUserLeftRoom.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerUserLeftRoom\n         * @static\n         * @param {NT.IServerUserLeftRoom} message ServerUserLeftRoom message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerUserLeftRoom.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerUserLeftRoom message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerUserLeftRoom\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerUserLeftRoom} ServerUserLeftRoom\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerUserLeftRoom.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerUserLeftRoom();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerUserLeftRoom message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerUserLeftRoom\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerUserLeftRoom} ServerUserLeftRoom\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerUserLeftRoom.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerUserLeftRoom message.\n         * @function verify\n         * @memberof NT.ServerUserLeftRoom\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerUserLeftRoom.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerUserLeftRoom message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerUserLeftRoom\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerUserLeftRoom} ServerUserLeftRoom\n         */\n        ServerUserLeftRoom.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerUserLeftRoom)\n                return object;\n            let message = new $root.NT.ServerUserLeftRoom();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerUserLeftRoom message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerUserLeftRoom\n         * @static\n         * @param {NT.ServerUserLeftRoom} message ServerUserLeftRoom\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerUserLeftRoom.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.userId = \"\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            return object;\n        };\n\n        /**\n         * Converts this ServerUserLeftRoom to JSON.\n         * @function toJSON\n         * @memberof NT.ServerUserLeftRoom\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerUserLeftRoom.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerUserLeftRoom\n         * @function getTypeUrl\n         * @memberof NT.ServerUserLeftRoom\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerUserLeftRoom.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerUserLeftRoom\";\n        };\n\n        return ServerUserLeftRoom;\n    })();\n\n    NT.ClientKickUser = (function() {\n\n        /**\n         * Properties of a ClientKickUser.\n         * @memberof NT\n         * @interface IClientKickUser\n         * @property {string|null} [userId] ClientKickUser userId\n         */\n\n        /**\n         * Constructs a new ClientKickUser.\n         * @memberof NT\n         * @classdesc Represents a ClientKickUser.\n         * @implements IClientKickUser\n         * @constructor\n         * @param {NT.IClientKickUser=} [properties] Properties to set\n         */\n        function ClientKickUser(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientKickUser userId.\n         * @member {string} userId\n         * @memberof NT.ClientKickUser\n         * @instance\n         */\n        ClientKickUser.prototype.userId = \"\";\n\n        /**\n         * Creates a new ClientKickUser instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientKickUser\n         * @static\n         * @param {NT.IClientKickUser=} [properties] Properties to set\n         * @returns {NT.ClientKickUser} ClientKickUser instance\n         */\n        ClientKickUser.create = function create(properties) {\n            return new ClientKickUser(properties);\n        };\n\n        /**\n         * Encodes the specified ClientKickUser message. Does not implicitly {@link NT.ClientKickUser.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientKickUser\n         * @static\n         * @param {NT.IClientKickUser} message ClientKickUser message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientKickUser.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientKickUser message, length delimited. Does not implicitly {@link NT.ClientKickUser.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientKickUser\n         * @static\n         * @param {NT.IClientKickUser} message ClientKickUser message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientKickUser.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientKickUser message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientKickUser\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientKickUser} ClientKickUser\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientKickUser.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientKickUser();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientKickUser message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientKickUser\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientKickUser} ClientKickUser\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientKickUser.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientKickUser message.\n         * @function verify\n         * @memberof NT.ClientKickUser\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientKickUser.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientKickUser message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientKickUser\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientKickUser} ClientKickUser\n         */\n        ClientKickUser.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientKickUser)\n                return object;\n            let message = new $root.NT.ClientKickUser();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientKickUser message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientKickUser\n         * @static\n         * @param {NT.ClientKickUser} message ClientKickUser\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientKickUser.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.userId = \"\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            return object;\n        };\n\n        /**\n         * Converts this ClientKickUser to JSON.\n         * @function toJSON\n         * @memberof NT.ClientKickUser\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientKickUser.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientKickUser\n         * @function getTypeUrl\n         * @memberof NT.ClientKickUser\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientKickUser.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientKickUser\";\n        };\n\n        return ClientKickUser;\n    })();\n\n    NT.ServerUserKicked = (function() {\n\n        /**\n         * Properties of a ServerUserKicked.\n         * @memberof NT\n         * @interface IServerUserKicked\n         * @property {string|null} [userId] ServerUserKicked userId\n         */\n\n        /**\n         * Constructs a new ServerUserKicked.\n         * @memberof NT\n         * @classdesc Represents a ServerUserKicked.\n         * @implements IServerUserKicked\n         * @constructor\n         * @param {NT.IServerUserKicked=} [properties] Properties to set\n         */\n        function ServerUserKicked(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerUserKicked userId.\n         * @member {string} userId\n         * @memberof NT.ServerUserKicked\n         * @instance\n         */\n        ServerUserKicked.prototype.userId = \"\";\n\n        /**\n         * Creates a new ServerUserKicked instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerUserKicked\n         * @static\n         * @param {NT.IServerUserKicked=} [properties] Properties to set\n         * @returns {NT.ServerUserKicked} ServerUserKicked instance\n         */\n        ServerUserKicked.create = function create(properties) {\n            return new ServerUserKicked(properties);\n        };\n\n        /**\n         * Encodes the specified ServerUserKicked message. Does not implicitly {@link NT.ServerUserKicked.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerUserKicked\n         * @static\n         * @param {NT.IServerUserKicked} message ServerUserKicked message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerUserKicked.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerUserKicked message, length delimited. Does not implicitly {@link NT.ServerUserKicked.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerUserKicked\n         * @static\n         * @param {NT.IServerUserKicked} message ServerUserKicked message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerUserKicked.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerUserKicked message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerUserKicked\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerUserKicked} ServerUserKicked\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerUserKicked.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerUserKicked();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerUserKicked message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerUserKicked\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerUserKicked} ServerUserKicked\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerUserKicked.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerUserKicked message.\n         * @function verify\n         * @memberof NT.ServerUserKicked\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerUserKicked.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerUserKicked message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerUserKicked\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerUserKicked} ServerUserKicked\n         */\n        ServerUserKicked.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerUserKicked)\n                return object;\n            let message = new $root.NT.ServerUserKicked();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerUserKicked message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerUserKicked\n         * @static\n         * @param {NT.ServerUserKicked} message ServerUserKicked\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerUserKicked.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.userId = \"\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            return object;\n        };\n\n        /**\n         * Converts this ServerUserKicked to JSON.\n         * @function toJSON\n         * @memberof NT.ServerUserKicked\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerUserKicked.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerUserKicked\n         * @function getTypeUrl\n         * @memberof NT.ServerUserKicked\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerUserKicked.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerUserKicked\";\n        };\n\n        return ServerUserKicked;\n    })();\n\n    NT.ClientBanUser = (function() {\n\n        /**\n         * Properties of a ClientBanUser.\n         * @memberof NT\n         * @interface IClientBanUser\n         * @property {string|null} [userId] ClientBanUser userId\n         */\n\n        /**\n         * Constructs a new ClientBanUser.\n         * @memberof NT\n         * @classdesc Represents a ClientBanUser.\n         * @implements IClientBanUser\n         * @constructor\n         * @param {NT.IClientBanUser=} [properties] Properties to set\n         */\n        function ClientBanUser(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientBanUser userId.\n         * @member {string} userId\n         * @memberof NT.ClientBanUser\n         * @instance\n         */\n        ClientBanUser.prototype.userId = \"\";\n\n        /**\n         * Creates a new ClientBanUser instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientBanUser\n         * @static\n         * @param {NT.IClientBanUser=} [properties] Properties to set\n         * @returns {NT.ClientBanUser} ClientBanUser instance\n         */\n        ClientBanUser.create = function create(properties) {\n            return new ClientBanUser(properties);\n        };\n\n        /**\n         * Encodes the specified ClientBanUser message. Does not implicitly {@link NT.ClientBanUser.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientBanUser\n         * @static\n         * @param {NT.IClientBanUser} message ClientBanUser message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientBanUser.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientBanUser message, length delimited. Does not implicitly {@link NT.ClientBanUser.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientBanUser\n         * @static\n         * @param {NT.IClientBanUser} message ClientBanUser message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientBanUser.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientBanUser message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientBanUser\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientBanUser} ClientBanUser\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientBanUser.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientBanUser();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientBanUser message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientBanUser\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientBanUser} ClientBanUser\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientBanUser.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientBanUser message.\n         * @function verify\n         * @memberof NT.ClientBanUser\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientBanUser.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientBanUser message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientBanUser\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientBanUser} ClientBanUser\n         */\n        ClientBanUser.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientBanUser)\n                return object;\n            let message = new $root.NT.ClientBanUser();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientBanUser message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientBanUser\n         * @static\n         * @param {NT.ClientBanUser} message ClientBanUser\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientBanUser.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.userId = \"\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            return object;\n        };\n\n        /**\n         * Converts this ClientBanUser to JSON.\n         * @function toJSON\n         * @memberof NT.ClientBanUser\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientBanUser.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientBanUser\n         * @function getTypeUrl\n         * @memberof NT.ClientBanUser\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientBanUser.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientBanUser\";\n        };\n\n        return ClientBanUser;\n    })();\n\n    NT.ServerUserBanned = (function() {\n\n        /**\n         * Properties of a ServerUserBanned.\n         * @memberof NT\n         * @interface IServerUserBanned\n         * @property {string|null} [userId] ServerUserBanned userId\n         */\n\n        /**\n         * Constructs a new ServerUserBanned.\n         * @memberof NT\n         * @classdesc Represents a ServerUserBanned.\n         * @implements IServerUserBanned\n         * @constructor\n         * @param {NT.IServerUserBanned=} [properties] Properties to set\n         */\n        function ServerUserBanned(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerUserBanned userId.\n         * @member {string} userId\n         * @memberof NT.ServerUserBanned\n         * @instance\n         */\n        ServerUserBanned.prototype.userId = \"\";\n\n        /**\n         * Creates a new ServerUserBanned instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerUserBanned\n         * @static\n         * @param {NT.IServerUserBanned=} [properties] Properties to set\n         * @returns {NT.ServerUserBanned} ServerUserBanned instance\n         */\n        ServerUserBanned.create = function create(properties) {\n            return new ServerUserBanned(properties);\n        };\n\n        /**\n         * Encodes the specified ServerUserBanned message. Does not implicitly {@link NT.ServerUserBanned.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerUserBanned\n         * @static\n         * @param {NT.IServerUserBanned} message ServerUserBanned message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerUserBanned.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerUserBanned message, length delimited. Does not implicitly {@link NT.ServerUserBanned.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerUserBanned\n         * @static\n         * @param {NT.IServerUserBanned} message ServerUserBanned message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerUserBanned.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerUserBanned message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerUserBanned\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerUserBanned} ServerUserBanned\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerUserBanned.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerUserBanned();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerUserBanned message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerUserBanned\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerUserBanned} ServerUserBanned\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerUserBanned.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerUserBanned message.\n         * @function verify\n         * @memberof NT.ServerUserBanned\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerUserBanned.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerUserBanned message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerUserBanned\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerUserBanned} ServerUserBanned\n         */\n        ServerUserBanned.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerUserBanned)\n                return object;\n            let message = new $root.NT.ServerUserBanned();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerUserBanned message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerUserBanned\n         * @static\n         * @param {NT.ServerUserBanned} message ServerUserBanned\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerUserBanned.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.userId = \"\";\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            return object;\n        };\n\n        /**\n         * Converts this ServerUserBanned to JSON.\n         * @function toJSON\n         * @memberof NT.ServerUserBanned\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerUserBanned.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerUserBanned\n         * @function getTypeUrl\n         * @memberof NT.ServerUserBanned\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerUserBanned.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerUserBanned\";\n        };\n\n        return ServerUserBanned;\n    })();\n\n    NT.ClientReadyState = (function() {\n\n        /**\n         * Properties of a ClientReadyState.\n         * @memberof NT\n         * @interface IClientReadyState\n         * @property {boolean|null} [ready] ClientReadyState ready\n         * @property {string|null} [seed] ClientReadyState seed\n         * @property {Array.<string>|null} [mods] ClientReadyState mods\n         * @property {string|null} [version] ClientReadyState version\n         * @property {boolean|null} [beta] ClientReadyState beta\n         */\n\n        /**\n         * Constructs a new ClientReadyState.\n         * @memberof NT\n         * @classdesc Represents a ClientReadyState.\n         * @implements IClientReadyState\n         * @constructor\n         * @param {NT.IClientReadyState=} [properties] Properties to set\n         */\n        function ClientReadyState(properties) {\n            this.mods = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientReadyState ready.\n         * @member {boolean} ready\n         * @memberof NT.ClientReadyState\n         * @instance\n         */\n        ClientReadyState.prototype.ready = false;\n\n        /**\n         * ClientReadyState seed.\n         * @member {string|null|undefined} seed\n         * @memberof NT.ClientReadyState\n         * @instance\n         */\n        ClientReadyState.prototype.seed = null;\n\n        /**\n         * ClientReadyState mods.\n         * @member {Array.<string>} mods\n         * @memberof NT.ClientReadyState\n         * @instance\n         */\n        ClientReadyState.prototype.mods = $util.emptyArray;\n\n        /**\n         * ClientReadyState version.\n         * @member {string|null|undefined} version\n         * @memberof NT.ClientReadyState\n         * @instance\n         */\n        ClientReadyState.prototype.version = null;\n\n        /**\n         * ClientReadyState beta.\n         * @member {boolean|null|undefined} beta\n         * @memberof NT.ClientReadyState\n         * @instance\n         */\n        ClientReadyState.prototype.beta = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ClientReadyState _seed.\n         * @member {\"seed\"|undefined} _seed\n         * @memberof NT.ClientReadyState\n         * @instance\n         */\n        Object.defineProperty(ClientReadyState.prototype, \"_seed\", {\n            get: $util.oneOfGetter($oneOfFields = [\"seed\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ClientReadyState _version.\n         * @member {\"version\"|undefined} _version\n         * @memberof NT.ClientReadyState\n         * @instance\n         */\n        Object.defineProperty(ClientReadyState.prototype, \"_version\", {\n            get: $util.oneOfGetter($oneOfFields = [\"version\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ClientReadyState _beta.\n         * @member {\"beta\"|undefined} _beta\n         * @memberof NT.ClientReadyState\n         * @instance\n         */\n        Object.defineProperty(ClientReadyState.prototype, \"_beta\", {\n            get: $util.oneOfGetter($oneOfFields = [\"beta\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ClientReadyState instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientReadyState\n         * @static\n         * @param {NT.IClientReadyState=} [properties] Properties to set\n         * @returns {NT.ClientReadyState} ClientReadyState instance\n         */\n        ClientReadyState.create = function create(properties) {\n            return new ClientReadyState(properties);\n        };\n\n        /**\n         * Encodes the specified ClientReadyState message. Does not implicitly {@link NT.ClientReadyState.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientReadyState\n         * @static\n         * @param {NT.IClientReadyState} message ClientReadyState message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientReadyState.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.ready != null && Object.hasOwnProperty.call(message, \"ready\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.ready);\n            if (message.seed != null && Object.hasOwnProperty.call(message, \"seed\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.seed);\n            if (message.mods != null && message.mods.length)\n                for (let i = 0; i < message.mods.length; ++i)\n                    writer.uint32(/* id 3, wireType 2 =*/26).string(message.mods[i]);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.version);\n            if (message.beta != null && Object.hasOwnProperty.call(message, \"beta\"))\n                writer.uint32(/* id 5, wireType 0 =*/40).bool(message.beta);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientReadyState message, length delimited. Does not implicitly {@link NT.ClientReadyState.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientReadyState\n         * @static\n         * @param {NT.IClientReadyState} message ClientReadyState message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientReadyState.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientReadyState message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientReadyState\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientReadyState} ClientReadyState\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientReadyState.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientReadyState();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.ready = reader.bool();\n                        break;\n                    }\n                case 2: {\n                        message.seed = reader.string();\n                        break;\n                    }\n                case 3: {\n                        if (!(message.mods && message.mods.length))\n                            message.mods = [];\n                        message.mods.push(reader.string());\n                        break;\n                    }\n                case 4: {\n                        message.version = reader.string();\n                        break;\n                    }\n                case 5: {\n                        message.beta = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientReadyState message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientReadyState\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientReadyState} ClientReadyState\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientReadyState.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientReadyState message.\n         * @function verify\n         * @memberof NT.ClientReadyState\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientReadyState.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.ready != null && message.hasOwnProperty(\"ready\"))\n                if (typeof message.ready !== \"boolean\")\n                    return \"ready: boolean expected\";\n            if (message.seed != null && message.hasOwnProperty(\"seed\")) {\n                properties._seed = 1;\n                if (!$util.isString(message.seed))\n                    return \"seed: string expected\";\n            }\n            if (message.mods != null && message.hasOwnProperty(\"mods\")) {\n                if (!Array.isArray(message.mods))\n                    return \"mods: array expected\";\n                for (let i = 0; i < message.mods.length; ++i)\n                    if (!$util.isString(message.mods[i]))\n                        return \"mods: string[] expected\";\n            }\n            if (message.version != null && message.hasOwnProperty(\"version\")) {\n                properties._version = 1;\n                if (!$util.isString(message.version))\n                    return \"version: string expected\";\n            }\n            if (message.beta != null && message.hasOwnProperty(\"beta\")) {\n                properties._beta = 1;\n                if (typeof message.beta !== \"boolean\")\n                    return \"beta: boolean expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ClientReadyState message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientReadyState\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientReadyState} ClientReadyState\n         */\n        ClientReadyState.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientReadyState)\n                return object;\n            let message = new $root.NT.ClientReadyState();\n            if (object.ready != null)\n                message.ready = Boolean(object.ready);\n            if (object.seed != null)\n                message.seed = String(object.seed);\n            if (object.mods) {\n                if (!Array.isArray(object.mods))\n                    throw TypeError(\".NT.ClientReadyState.mods: array expected\");\n                message.mods = [];\n                for (let i = 0; i < object.mods.length; ++i)\n                    message.mods[i] = String(object.mods[i]);\n            }\n            if (object.version != null)\n                message.version = String(object.version);\n            if (object.beta != null)\n                message.beta = Boolean(object.beta);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientReadyState message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientReadyState\n         * @static\n         * @param {NT.ClientReadyState} message ClientReadyState\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientReadyState.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.mods = [];\n            if (options.defaults)\n                object.ready = false;\n            if (message.ready != null && message.hasOwnProperty(\"ready\"))\n                object.ready = message.ready;\n            if (message.seed != null && message.hasOwnProperty(\"seed\")) {\n                object.seed = message.seed;\n                if (options.oneofs)\n                    object._seed = \"seed\";\n            }\n            if (message.mods && message.mods.length) {\n                object.mods = [];\n                for (let j = 0; j < message.mods.length; ++j)\n                    object.mods[j] = message.mods[j];\n            }\n            if (message.version != null && message.hasOwnProperty(\"version\")) {\n                object.version = message.version;\n                if (options.oneofs)\n                    object._version = \"version\";\n            }\n            if (message.beta != null && message.hasOwnProperty(\"beta\")) {\n                object.beta = message.beta;\n                if (options.oneofs)\n                    object._beta = \"beta\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ClientReadyState to JSON.\n         * @function toJSON\n         * @memberof NT.ClientReadyState\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientReadyState.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientReadyState\n         * @function getTypeUrl\n         * @memberof NT.ClientReadyState\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientReadyState.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientReadyState\";\n        };\n\n        return ClientReadyState;\n    })();\n\n    NT.ServerUserReadyState = (function() {\n\n        /**\n         * Properties of a ServerUserReadyState.\n         * @memberof NT\n         * @interface IServerUserReadyState\n         * @property {string|null} [userId] ServerUserReadyState userId\n         * @property {boolean|null} [ready] ServerUserReadyState ready\n         * @property {string|null} [seed] ServerUserReadyState seed\n         * @property {Array.<string>|null} [mods] ServerUserReadyState mods\n         * @property {string|null} [version] ServerUserReadyState version\n         * @property {boolean|null} [beta] ServerUserReadyState beta\n         */\n\n        /**\n         * Constructs a new ServerUserReadyState.\n         * @memberof NT\n         * @classdesc Represents a ServerUserReadyState.\n         * @implements IServerUserReadyState\n         * @constructor\n         * @param {NT.IServerUserReadyState=} [properties] Properties to set\n         */\n        function ServerUserReadyState(properties) {\n            this.mods = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerUserReadyState userId.\n         * @member {string} userId\n         * @memberof NT.ServerUserReadyState\n         * @instance\n         */\n        ServerUserReadyState.prototype.userId = \"\";\n\n        /**\n         * ServerUserReadyState ready.\n         * @member {boolean} ready\n         * @memberof NT.ServerUserReadyState\n         * @instance\n         */\n        ServerUserReadyState.prototype.ready = false;\n\n        /**\n         * ServerUserReadyState seed.\n         * @member {string|null|undefined} seed\n         * @memberof NT.ServerUserReadyState\n         * @instance\n         */\n        ServerUserReadyState.prototype.seed = null;\n\n        /**\n         * ServerUserReadyState mods.\n         * @member {Array.<string>} mods\n         * @memberof NT.ServerUserReadyState\n         * @instance\n         */\n        ServerUserReadyState.prototype.mods = $util.emptyArray;\n\n        /**\n         * ServerUserReadyState version.\n         * @member {string|null|undefined} version\n         * @memberof NT.ServerUserReadyState\n         * @instance\n         */\n        ServerUserReadyState.prototype.version = null;\n\n        /**\n         * ServerUserReadyState beta.\n         * @member {boolean|null|undefined} beta\n         * @memberof NT.ServerUserReadyState\n         * @instance\n         */\n        ServerUserReadyState.prototype.beta = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ServerUserReadyState _seed.\n         * @member {\"seed\"|undefined} _seed\n         * @memberof NT.ServerUserReadyState\n         * @instance\n         */\n        Object.defineProperty(ServerUserReadyState.prototype, \"_seed\", {\n            get: $util.oneOfGetter($oneOfFields = [\"seed\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ServerUserReadyState _version.\n         * @member {\"version\"|undefined} _version\n         * @memberof NT.ServerUserReadyState\n         * @instance\n         */\n        Object.defineProperty(ServerUserReadyState.prototype, \"_version\", {\n            get: $util.oneOfGetter($oneOfFields = [\"version\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * ServerUserReadyState _beta.\n         * @member {\"beta\"|undefined} _beta\n         * @memberof NT.ServerUserReadyState\n         * @instance\n         */\n        Object.defineProperty(ServerUserReadyState.prototype, \"_beta\", {\n            get: $util.oneOfGetter($oneOfFields = [\"beta\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ServerUserReadyState instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerUserReadyState\n         * @static\n         * @param {NT.IServerUserReadyState=} [properties] Properties to set\n         * @returns {NT.ServerUserReadyState} ServerUserReadyState instance\n         */\n        ServerUserReadyState.create = function create(properties) {\n            return new ServerUserReadyState(properties);\n        };\n\n        /**\n         * Encodes the specified ServerUserReadyState message. Does not implicitly {@link NT.ServerUserReadyState.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerUserReadyState\n         * @static\n         * @param {NT.IServerUserReadyState} message ServerUserReadyState message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerUserReadyState.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.userId != null && Object.hasOwnProperty.call(message, \"userId\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.userId);\n            if (message.ready != null && Object.hasOwnProperty.call(message, \"ready\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).bool(message.ready);\n            if (message.seed != null && Object.hasOwnProperty.call(message, \"seed\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.seed);\n            if (message.mods != null && message.mods.length)\n                for (let i = 0; i < message.mods.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).string(message.mods[i]);\n            if (message.version != null && Object.hasOwnProperty.call(message, \"version\"))\n                writer.uint32(/* id 5, wireType 2 =*/42).string(message.version);\n            if (message.beta != null && Object.hasOwnProperty.call(message, \"beta\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).bool(message.beta);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerUserReadyState message, length delimited. Does not implicitly {@link NT.ServerUserReadyState.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerUserReadyState\n         * @static\n         * @param {NT.IServerUserReadyState} message ServerUserReadyState message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerUserReadyState.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerUserReadyState message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerUserReadyState\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerUserReadyState} ServerUserReadyState\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerUserReadyState.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerUserReadyState();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.userId = reader.string();\n                        break;\n                    }\n                case 2: {\n                        message.ready = reader.bool();\n                        break;\n                    }\n                case 3: {\n                        message.seed = reader.string();\n                        break;\n                    }\n                case 4: {\n                        if (!(message.mods && message.mods.length))\n                            message.mods = [];\n                        message.mods.push(reader.string());\n                        break;\n                    }\n                case 5: {\n                        message.version = reader.string();\n                        break;\n                    }\n                case 6: {\n                        message.beta = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerUserReadyState message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerUserReadyState\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerUserReadyState} ServerUserReadyState\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerUserReadyState.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerUserReadyState message.\n         * @function verify\n         * @memberof NT.ServerUserReadyState\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerUserReadyState.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                if (!$util.isString(message.userId))\n                    return \"userId: string expected\";\n            if (message.ready != null && message.hasOwnProperty(\"ready\"))\n                if (typeof message.ready !== \"boolean\")\n                    return \"ready: boolean expected\";\n            if (message.seed != null && message.hasOwnProperty(\"seed\")) {\n                properties._seed = 1;\n                if (!$util.isString(message.seed))\n                    return \"seed: string expected\";\n            }\n            if (message.mods != null && message.hasOwnProperty(\"mods\")) {\n                if (!Array.isArray(message.mods))\n                    return \"mods: array expected\";\n                for (let i = 0; i < message.mods.length; ++i)\n                    if (!$util.isString(message.mods[i]))\n                        return \"mods: string[] expected\";\n            }\n            if (message.version != null && message.hasOwnProperty(\"version\")) {\n                properties._version = 1;\n                if (!$util.isString(message.version))\n                    return \"version: string expected\";\n            }\n            if (message.beta != null && message.hasOwnProperty(\"beta\")) {\n                properties._beta = 1;\n                if (typeof message.beta !== \"boolean\")\n                    return \"beta: boolean expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerUserReadyState message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerUserReadyState\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerUserReadyState} ServerUserReadyState\n         */\n        ServerUserReadyState.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerUserReadyState)\n                return object;\n            let message = new $root.NT.ServerUserReadyState();\n            if (object.userId != null)\n                message.userId = String(object.userId);\n            if (object.ready != null)\n                message.ready = Boolean(object.ready);\n            if (object.seed != null)\n                message.seed = String(object.seed);\n            if (object.mods) {\n                if (!Array.isArray(object.mods))\n                    throw TypeError(\".NT.ServerUserReadyState.mods: array expected\");\n                message.mods = [];\n                for (let i = 0; i < object.mods.length; ++i)\n                    message.mods[i] = String(object.mods[i]);\n            }\n            if (object.version != null)\n                message.version = String(object.version);\n            if (object.beta != null)\n                message.beta = Boolean(object.beta);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerUserReadyState message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerUserReadyState\n         * @static\n         * @param {NT.ServerUserReadyState} message ServerUserReadyState\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerUserReadyState.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.mods = [];\n            if (options.defaults) {\n                object.userId = \"\";\n                object.ready = false;\n            }\n            if (message.userId != null && message.hasOwnProperty(\"userId\"))\n                object.userId = message.userId;\n            if (message.ready != null && message.hasOwnProperty(\"ready\"))\n                object.ready = message.ready;\n            if (message.seed != null && message.hasOwnProperty(\"seed\")) {\n                object.seed = message.seed;\n                if (options.oneofs)\n                    object._seed = \"seed\";\n            }\n            if (message.mods && message.mods.length) {\n                object.mods = [];\n                for (let j = 0; j < message.mods.length; ++j)\n                    object.mods[j] = message.mods[j];\n            }\n            if (message.version != null && message.hasOwnProperty(\"version\")) {\n                object.version = message.version;\n                if (options.oneofs)\n                    object._version = \"version\";\n            }\n            if (message.beta != null && message.hasOwnProperty(\"beta\")) {\n                object.beta = message.beta;\n                if (options.oneofs)\n                    object._beta = \"beta\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerUserReadyState to JSON.\n         * @function toJSON\n         * @memberof NT.ServerUserReadyState\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerUserReadyState.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerUserReadyState\n         * @function getTypeUrl\n         * @memberof NT.ServerUserReadyState\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerUserReadyState.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerUserReadyState\";\n        };\n\n        return ServerUserReadyState;\n    })();\n\n    NT.ClientStartRun = (function() {\n\n        /**\n         * Properties of a ClientStartRun.\n         * @memberof NT\n         * @interface IClientStartRun\n         * @property {boolean|null} [forced] ClientStartRun forced\n         */\n\n        /**\n         * Constructs a new ClientStartRun.\n         * @memberof NT\n         * @classdesc Represents a ClientStartRun.\n         * @implements IClientStartRun\n         * @constructor\n         * @param {NT.IClientStartRun=} [properties] Properties to set\n         */\n        function ClientStartRun(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientStartRun forced.\n         * @member {boolean} forced\n         * @memberof NT.ClientStartRun\n         * @instance\n         */\n        ClientStartRun.prototype.forced = false;\n\n        /**\n         * Creates a new ClientStartRun instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientStartRun\n         * @static\n         * @param {NT.IClientStartRun=} [properties] Properties to set\n         * @returns {NT.ClientStartRun} ClientStartRun instance\n         */\n        ClientStartRun.create = function create(properties) {\n            return new ClientStartRun(properties);\n        };\n\n        /**\n         * Encodes the specified ClientStartRun message. Does not implicitly {@link NT.ClientStartRun.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientStartRun\n         * @static\n         * @param {NT.IClientStartRun} message ClientStartRun message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientStartRun.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.forced != null && Object.hasOwnProperty.call(message, \"forced\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.forced);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientStartRun message, length delimited. Does not implicitly {@link NT.ClientStartRun.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientStartRun\n         * @static\n         * @param {NT.IClientStartRun} message ClientStartRun message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientStartRun.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientStartRun message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientStartRun\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientStartRun} ClientStartRun\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientStartRun.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientStartRun();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.forced = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientStartRun message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientStartRun\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientStartRun} ClientStartRun\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientStartRun.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientStartRun message.\n         * @function verify\n         * @memberof NT.ClientStartRun\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientStartRun.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.forced != null && message.hasOwnProperty(\"forced\"))\n                if (typeof message.forced !== \"boolean\")\n                    return \"forced: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientStartRun message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientStartRun\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientStartRun} ClientStartRun\n         */\n        ClientStartRun.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientStartRun)\n                return object;\n            let message = new $root.NT.ClientStartRun();\n            if (object.forced != null)\n                message.forced = Boolean(object.forced);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientStartRun message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientStartRun\n         * @static\n         * @param {NT.ClientStartRun} message ClientStartRun\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientStartRun.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.forced = false;\n            if (message.forced != null && message.hasOwnProperty(\"forced\"))\n                object.forced = message.forced;\n            return object;\n        };\n\n        /**\n         * Converts this ClientStartRun to JSON.\n         * @function toJSON\n         * @memberof NT.ClientStartRun\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientStartRun.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientStartRun\n         * @function getTypeUrl\n         * @memberof NT.ClientStartRun\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientStartRun.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientStartRun\";\n        };\n\n        return ClientStartRun;\n    })();\n\n    NT.ServerHostStart = (function() {\n\n        /**\n         * Properties of a ServerHostStart.\n         * @memberof NT\n         * @interface IServerHostStart\n         * @property {boolean|null} [forced] ServerHostStart forced\n         */\n\n        /**\n         * Constructs a new ServerHostStart.\n         * @memberof NT\n         * @classdesc Represents a ServerHostStart.\n         * @implements IServerHostStart\n         * @constructor\n         * @param {NT.IServerHostStart=} [properties] Properties to set\n         */\n        function ServerHostStart(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerHostStart forced.\n         * @member {boolean} forced\n         * @memberof NT.ServerHostStart\n         * @instance\n         */\n        ServerHostStart.prototype.forced = false;\n\n        /**\n         * Creates a new ServerHostStart instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerHostStart\n         * @static\n         * @param {NT.IServerHostStart=} [properties] Properties to set\n         * @returns {NT.ServerHostStart} ServerHostStart instance\n         */\n        ServerHostStart.create = function create(properties) {\n            return new ServerHostStart(properties);\n        };\n\n        /**\n         * Encodes the specified ServerHostStart message. Does not implicitly {@link NT.ServerHostStart.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerHostStart\n         * @static\n         * @param {NT.IServerHostStart} message ServerHostStart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerHostStart.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.forced != null && Object.hasOwnProperty.call(message, \"forced\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).bool(message.forced);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerHostStart message, length delimited. Does not implicitly {@link NT.ServerHostStart.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerHostStart\n         * @static\n         * @param {NT.IServerHostStart} message ServerHostStart message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerHostStart.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerHostStart message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerHostStart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerHostStart} ServerHostStart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerHostStart.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerHostStart();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.forced = reader.bool();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerHostStart message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerHostStart\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerHostStart} ServerHostStart\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerHostStart.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerHostStart message.\n         * @function verify\n         * @memberof NT.ServerHostStart\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerHostStart.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.forced != null && message.hasOwnProperty(\"forced\"))\n                if (typeof message.forced !== \"boolean\")\n                    return \"forced: boolean expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ServerHostStart message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerHostStart\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerHostStart} ServerHostStart\n         */\n        ServerHostStart.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerHostStart)\n                return object;\n            let message = new $root.NT.ServerHostStart();\n            if (object.forced != null)\n                message.forced = Boolean(object.forced);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerHostStart message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerHostStart\n         * @static\n         * @param {NT.ServerHostStart} message ServerHostStart\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerHostStart.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.forced = false;\n            if (message.forced != null && message.hasOwnProperty(\"forced\"))\n                object.forced = message.forced;\n            return object;\n        };\n\n        /**\n         * Converts this ServerHostStart to JSON.\n         * @function toJSON\n         * @memberof NT.ServerHostStart\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerHostStart.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerHostStart\n         * @function getTypeUrl\n         * @memberof NT.ServerHostStart\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerHostStart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerHostStart\";\n        };\n\n        return ServerHostStart;\n    })();\n\n    NT.ClientRequestRoomList = (function() {\n\n        /**\n         * Properties of a ClientRequestRoomList.\n         * @memberof NT\n         * @interface IClientRequestRoomList\n         * @property {number|null} [page] ClientRequestRoomList page\n         */\n\n        /**\n         * Constructs a new ClientRequestRoomList.\n         * @memberof NT\n         * @classdesc Represents a ClientRequestRoomList.\n         * @implements IClientRequestRoomList\n         * @constructor\n         * @param {NT.IClientRequestRoomList=} [properties] Properties to set\n         */\n        function ClientRequestRoomList(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ClientRequestRoomList page.\n         * @member {number} page\n         * @memberof NT.ClientRequestRoomList\n         * @instance\n         */\n        ClientRequestRoomList.prototype.page = 0;\n\n        /**\n         * Creates a new ClientRequestRoomList instance using the specified properties.\n         * @function create\n         * @memberof NT.ClientRequestRoomList\n         * @static\n         * @param {NT.IClientRequestRoomList=} [properties] Properties to set\n         * @returns {NT.ClientRequestRoomList} ClientRequestRoomList instance\n         */\n        ClientRequestRoomList.create = function create(properties) {\n            return new ClientRequestRoomList(properties);\n        };\n\n        /**\n         * Encodes the specified ClientRequestRoomList message. Does not implicitly {@link NT.ClientRequestRoomList.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ClientRequestRoomList\n         * @static\n         * @param {NT.IClientRequestRoomList} message ClientRequestRoomList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRequestRoomList.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.page != null && Object.hasOwnProperty.call(message, \"page\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.page);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ClientRequestRoomList message, length delimited. Does not implicitly {@link NT.ClientRequestRoomList.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ClientRequestRoomList\n         * @static\n         * @param {NT.IClientRequestRoomList} message ClientRequestRoomList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ClientRequestRoomList.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ClientRequestRoomList message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ClientRequestRoomList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ClientRequestRoomList} ClientRequestRoomList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRequestRoomList.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ClientRequestRoomList();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.page = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ClientRequestRoomList message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ClientRequestRoomList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ClientRequestRoomList} ClientRequestRoomList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ClientRequestRoomList.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ClientRequestRoomList message.\n         * @function verify\n         * @memberof NT.ClientRequestRoomList\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ClientRequestRoomList.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.page != null && message.hasOwnProperty(\"page\"))\n                if (!$util.isInteger(message.page))\n                    return \"page: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a ClientRequestRoomList message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ClientRequestRoomList\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ClientRequestRoomList} ClientRequestRoomList\n         */\n        ClientRequestRoomList.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ClientRequestRoomList)\n                return object;\n            let message = new $root.NT.ClientRequestRoomList();\n            if (object.page != null)\n                message.page = object.page >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ClientRequestRoomList message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ClientRequestRoomList\n         * @static\n         * @param {NT.ClientRequestRoomList} message ClientRequestRoomList\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ClientRequestRoomList.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.page = 0;\n            if (message.page != null && message.hasOwnProperty(\"page\"))\n                object.page = message.page;\n            return object;\n        };\n\n        /**\n         * Converts this ClientRequestRoomList to JSON.\n         * @function toJSON\n         * @memberof NT.ClientRequestRoomList\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ClientRequestRoomList.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ClientRequestRoomList\n         * @function getTypeUrl\n         * @memberof NT.ClientRequestRoomList\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ClientRequestRoomList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ClientRequestRoomList\";\n        };\n\n        return ClientRequestRoomList;\n    })();\n\n    NT.ServerRoomList = (function() {\n\n        /**\n         * Properties of a ServerRoomList.\n         * @memberof NT\n         * @interface IServerRoomList\n         * @property {Array.<NT.ServerRoomList.IRoom>|null} [rooms] ServerRoomList rooms\n         * @property {number|null} [pages] ServerRoomList pages\n         */\n\n        /**\n         * Constructs a new ServerRoomList.\n         * @memberof NT\n         * @classdesc Represents a ServerRoomList.\n         * @implements IServerRoomList\n         * @constructor\n         * @param {NT.IServerRoomList=} [properties] Properties to set\n         */\n        function ServerRoomList(properties) {\n            this.rooms = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerRoomList rooms.\n         * @member {Array.<NT.ServerRoomList.IRoom>} rooms\n         * @memberof NT.ServerRoomList\n         * @instance\n         */\n        ServerRoomList.prototype.rooms = $util.emptyArray;\n\n        /**\n         * ServerRoomList pages.\n         * @member {number|null|undefined} pages\n         * @memberof NT.ServerRoomList\n         * @instance\n         */\n        ServerRoomList.prototype.pages = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * ServerRoomList _pages.\n         * @member {\"pages\"|undefined} _pages\n         * @memberof NT.ServerRoomList\n         * @instance\n         */\n        Object.defineProperty(ServerRoomList.prototype, \"_pages\", {\n            get: $util.oneOfGetter($oneOfFields = [\"pages\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new ServerRoomList instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerRoomList\n         * @static\n         * @param {NT.IServerRoomList=} [properties] Properties to set\n         * @returns {NT.ServerRoomList} ServerRoomList instance\n         */\n        ServerRoomList.create = function create(properties) {\n            return new ServerRoomList(properties);\n        };\n\n        /**\n         * Encodes the specified ServerRoomList message. Does not implicitly {@link NT.ServerRoomList.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerRoomList\n         * @static\n         * @param {NT.IServerRoomList} message ServerRoomList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomList.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.rooms != null && message.rooms.length)\n                for (let i = 0; i < message.rooms.length; ++i)\n                    $root.NT.ServerRoomList.Room.encode(message.rooms[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.pages != null && Object.hasOwnProperty.call(message, \"pages\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.pages);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerRoomList message, length delimited. Does not implicitly {@link NT.ServerRoomList.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerRoomList\n         * @static\n         * @param {NT.IServerRoomList} message ServerRoomList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomList.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerRoomList message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerRoomList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerRoomList} ServerRoomList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomList.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomList();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        if (!(message.rooms && message.rooms.length))\n                            message.rooms = [];\n                        message.rooms.push($root.NT.ServerRoomList.Room.decode(reader, reader.uint32()));\n                        break;\n                    }\n                case 2: {\n                        message.pages = reader.uint32();\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerRoomList message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerRoomList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerRoomList} ServerRoomList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomList.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerRoomList message.\n         * @function verify\n         * @memberof NT.ServerRoomList\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerRoomList.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.rooms != null && message.hasOwnProperty(\"rooms\")) {\n                if (!Array.isArray(message.rooms))\n                    return \"rooms: array expected\";\n                for (let i = 0; i < message.rooms.length; ++i) {\n                    let error = $root.NT.ServerRoomList.Room.verify(message.rooms[i]);\n                    if (error)\n                        return \"rooms.\" + error;\n                }\n            }\n            if (message.pages != null && message.hasOwnProperty(\"pages\")) {\n                properties._pages = 1;\n                if (!$util.isInteger(message.pages))\n                    return \"pages: integer expected\";\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerRoomList message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerRoomList\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerRoomList} ServerRoomList\n         */\n        ServerRoomList.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerRoomList)\n                return object;\n            let message = new $root.NT.ServerRoomList();\n            if (object.rooms) {\n                if (!Array.isArray(object.rooms))\n                    throw TypeError(\".NT.ServerRoomList.rooms: array expected\");\n                message.rooms = [];\n                for (let i = 0; i < object.rooms.length; ++i) {\n                    if (typeof object.rooms[i] !== \"object\")\n                        throw TypeError(\".NT.ServerRoomList.rooms: object expected\");\n                    message.rooms[i] = $root.NT.ServerRoomList.Room.fromObject(object.rooms[i]);\n                }\n            }\n            if (object.pages != null)\n                message.pages = object.pages >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerRoomList message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerRoomList\n         * @static\n         * @param {NT.ServerRoomList} message ServerRoomList\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerRoomList.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.rooms = [];\n            if (message.rooms && message.rooms.length) {\n                object.rooms = [];\n                for (let j = 0; j < message.rooms.length; ++j)\n                    object.rooms[j] = $root.NT.ServerRoomList.Room.toObject(message.rooms[j], options);\n            }\n            if (message.pages != null && message.hasOwnProperty(\"pages\")) {\n                object.pages = message.pages;\n                if (options.oneofs)\n                    object._pages = \"pages\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this ServerRoomList to JSON.\n         * @function toJSON\n         * @memberof NT.ServerRoomList\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerRoomList.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerRoomList\n         * @function getTypeUrl\n         * @memberof NT.ServerRoomList\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerRoomList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerRoomList\";\n        };\n\n        ServerRoomList.Room = (function() {\n\n            /**\n             * Properties of a Room.\n             * @memberof NT.ServerRoomList\n             * @interface IRoom\n             * @property {string|null} [id] Room id\n             * @property {string|null} [name] Room name\n             * @property {number|null} [gamemode] Room gamemode\n             * @property {number|null} [curUsers] Room curUsers\n             * @property {number|null} [maxUsers] Room maxUsers\n             * @property {boolean|null} [\"protected\"] Room protected\n             * @property {string|null} [owner] Room owner\n             * @property {boolean|null} [locked] Room locked\n             */\n\n            /**\n             * Constructs a new Room.\n             * @memberof NT.ServerRoomList\n             * @classdesc Represents a Room.\n             * @implements IRoom\n             * @constructor\n             * @param {NT.ServerRoomList.IRoom=} [properties] Properties to set\n             */\n            function Room(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Room id.\n             * @member {string} id\n             * @memberof NT.ServerRoomList.Room\n             * @instance\n             */\n            Room.prototype.id = \"\";\n\n            /**\n             * Room name.\n             * @member {string} name\n             * @memberof NT.ServerRoomList.Room\n             * @instance\n             */\n            Room.prototype.name = \"\";\n\n            /**\n             * Room gamemode.\n             * @member {number} gamemode\n             * @memberof NT.ServerRoomList.Room\n             * @instance\n             */\n            Room.prototype.gamemode = 0;\n\n            /**\n             * Room curUsers.\n             * @member {number} curUsers\n             * @memberof NT.ServerRoomList.Room\n             * @instance\n             */\n            Room.prototype.curUsers = 0;\n\n            /**\n             * Room maxUsers.\n             * @member {number} maxUsers\n             * @memberof NT.ServerRoomList.Room\n             * @instance\n             */\n            Room.prototype.maxUsers = 0;\n\n            /**\n             * Room protected.\n             * @member {boolean} protected\n             * @memberof NT.ServerRoomList.Room\n             * @instance\n             */\n            Room.prototype[\"protected\"] = false;\n\n            /**\n             * Room owner.\n             * @member {string} owner\n             * @memberof NT.ServerRoomList.Room\n             * @instance\n             */\n            Room.prototype.owner = \"\";\n\n            /**\n             * Room locked.\n             * @member {boolean} locked\n             * @memberof NT.ServerRoomList.Room\n             * @instance\n             */\n            Room.prototype.locked = false;\n\n            /**\n             * Creates a new Room instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerRoomList.Room\n             * @static\n             * @param {NT.ServerRoomList.IRoom=} [properties] Properties to set\n             * @returns {NT.ServerRoomList.Room} Room instance\n             */\n            Room.create = function create(properties) {\n                return new Room(properties);\n            };\n\n            /**\n             * Encodes the specified Room message. Does not implicitly {@link NT.ServerRoomList.Room.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerRoomList.Room\n             * @static\n             * @param {NT.ServerRoomList.IRoom} message Room message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Room.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                if (message.gamemode != null && Object.hasOwnProperty.call(message, \"gamemode\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gamemode);\n                if (message.curUsers != null && Object.hasOwnProperty.call(message, \"curUsers\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.curUsers);\n                if (message.maxUsers != null && Object.hasOwnProperty.call(message, \"maxUsers\"))\n                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.maxUsers);\n                if (message[\"protected\"] != null && Object.hasOwnProperty.call(message, \"protected\"))\n                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message[\"protected\"]);\n                if (message.owner != null && Object.hasOwnProperty.call(message, \"owner\"))\n                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.owner);\n                if (message.locked != null && Object.hasOwnProperty.call(message, \"locked\"))\n                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.locked);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Room message, length delimited. Does not implicitly {@link NT.ServerRoomList.Room.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerRoomList.Room\n             * @static\n             * @param {NT.ServerRoomList.IRoom} message Room message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Room.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Room message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerRoomList.Room\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerRoomList.Room} Room\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Room.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomList.Room();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.id = reader.string();\n                            break;\n                        }\n                    case 2: {\n                            message.name = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.gamemode = reader.uint32();\n                            break;\n                        }\n                    case 4: {\n                            message.curUsers = reader.uint32();\n                            break;\n                        }\n                    case 5: {\n                            message.maxUsers = reader.uint32();\n                            break;\n                        }\n                    case 6: {\n                            message[\"protected\"] = reader.bool();\n                            break;\n                        }\n                    case 7: {\n                            message.owner = reader.string();\n                            break;\n                        }\n                    case 8: {\n                            message.locked = reader.bool();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Room message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerRoomList.Room\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerRoomList.Room} Room\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Room.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Room message.\n             * @function verify\n             * @memberof NT.ServerRoomList.Room\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Room.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isString(message.id))\n                        return \"id: string expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isString(message.name))\n                        return \"name: string expected\";\n                if (message.gamemode != null && message.hasOwnProperty(\"gamemode\"))\n                    if (!$util.isInteger(message.gamemode))\n                        return \"gamemode: integer expected\";\n                if (message.curUsers != null && message.hasOwnProperty(\"curUsers\"))\n                    if (!$util.isInteger(message.curUsers))\n                        return \"curUsers: integer expected\";\n                if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\"))\n                    if (!$util.isInteger(message.maxUsers))\n                        return \"maxUsers: integer expected\";\n                if (message[\"protected\"] != null && message.hasOwnProperty(\"protected\"))\n                    if (typeof message[\"protected\"] !== \"boolean\")\n                        return \"protected: boolean expected\";\n                if (message.owner != null && message.hasOwnProperty(\"owner\"))\n                    if (!$util.isString(message.owner))\n                        return \"owner: string expected\";\n                if (message.locked != null && message.hasOwnProperty(\"locked\"))\n                    if (typeof message.locked !== \"boolean\")\n                        return \"locked: boolean expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Room message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerRoomList.Room\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerRoomList.Room} Room\n             */\n            Room.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerRoomList.Room)\n                    return object;\n                let message = new $root.NT.ServerRoomList.Room();\n                if (object.id != null)\n                    message.id = String(object.id);\n                if (object.name != null)\n                    message.name = String(object.name);\n                if (object.gamemode != null)\n                    message.gamemode = object.gamemode >>> 0;\n                if (object.curUsers != null)\n                    message.curUsers = object.curUsers >>> 0;\n                if (object.maxUsers != null)\n                    message.maxUsers = object.maxUsers >>> 0;\n                if (object[\"protected\"] != null)\n                    message[\"protected\"] = Boolean(object[\"protected\"]);\n                if (object.owner != null)\n                    message.owner = String(object.owner);\n                if (object.locked != null)\n                    message.locked = Boolean(object.locked);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Room message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerRoomList.Room\n             * @static\n             * @param {NT.ServerRoomList.Room} message Room\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Room.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.id = \"\";\n                    object.name = \"\";\n                    object.gamemode = 0;\n                    object.curUsers = 0;\n                    object.maxUsers = 0;\n                    object[\"protected\"] = false;\n                    object.owner = \"\";\n                    object.locked = false;\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    object.name = message.name;\n                if (message.gamemode != null && message.hasOwnProperty(\"gamemode\"))\n                    object.gamemode = message.gamemode;\n                if (message.curUsers != null && message.hasOwnProperty(\"curUsers\"))\n                    object.curUsers = message.curUsers;\n                if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\"))\n                    object.maxUsers = message.maxUsers;\n                if (message[\"protected\"] != null && message.hasOwnProperty(\"protected\"))\n                    object[\"protected\"] = message[\"protected\"];\n                if (message.owner != null && message.hasOwnProperty(\"owner\"))\n                    object.owner = message.owner;\n                if (message.locked != null && message.hasOwnProperty(\"locked\"))\n                    object.locked = message.locked;\n                return object;\n            };\n\n            /**\n             * Converts this Room to JSON.\n             * @function toJSON\n             * @memberof NT.ServerRoomList.Room\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Room.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Room\n             * @function getTypeUrl\n             * @memberof NT.ServerRoomList.Room\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Room.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerRoomList.Room\";\n            };\n\n            return Room;\n        })();\n\n        return ServerRoomList;\n    })();\n\n    NT.ServerRoomAddToList = (function() {\n\n        /**\n         * Properties of a ServerRoomAddToList.\n         * @memberof NT\n         * @interface IServerRoomAddToList\n         * @property {NT.ServerRoomAddToList.IRoom|null} [room] ServerRoomAddToList room\n         */\n\n        /**\n         * Constructs a new ServerRoomAddToList.\n         * @memberof NT\n         * @classdesc Represents a ServerRoomAddToList.\n         * @implements IServerRoomAddToList\n         * @constructor\n         * @param {NT.IServerRoomAddToList=} [properties] Properties to set\n         */\n        function ServerRoomAddToList(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * ServerRoomAddToList room.\n         * @member {NT.ServerRoomAddToList.IRoom|null|undefined} room\n         * @memberof NT.ServerRoomAddToList\n         * @instance\n         */\n        ServerRoomAddToList.prototype.room = null;\n\n        /**\n         * Creates a new ServerRoomAddToList instance using the specified properties.\n         * @function create\n         * @memberof NT.ServerRoomAddToList\n         * @static\n         * @param {NT.IServerRoomAddToList=} [properties] Properties to set\n         * @returns {NT.ServerRoomAddToList} ServerRoomAddToList instance\n         */\n        ServerRoomAddToList.create = function create(properties) {\n            return new ServerRoomAddToList(properties);\n        };\n\n        /**\n         * Encodes the specified ServerRoomAddToList message. Does not implicitly {@link NT.ServerRoomAddToList.verify|verify} messages.\n         * @function encode\n         * @memberof NT.ServerRoomAddToList\n         * @static\n         * @param {NT.IServerRoomAddToList} message ServerRoomAddToList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomAddToList.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.room != null && Object.hasOwnProperty.call(message, \"room\"))\n                $root.NT.ServerRoomAddToList.Room.encode(message.room, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified ServerRoomAddToList message, length delimited. Does not implicitly {@link NT.ServerRoomAddToList.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof NT.ServerRoomAddToList\n         * @static\n         * @param {NT.IServerRoomAddToList} message ServerRoomAddToList message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        ServerRoomAddToList.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a ServerRoomAddToList message from the specified reader or buffer.\n         * @function decode\n         * @memberof NT.ServerRoomAddToList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {NT.ServerRoomAddToList} ServerRoomAddToList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomAddToList.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomAddToList();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1: {\n                        message.room = $root.NT.ServerRoomAddToList.Room.decode(reader, reader.uint32());\n                        break;\n                    }\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a ServerRoomAddToList message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof NT.ServerRoomAddToList\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {NT.ServerRoomAddToList} ServerRoomAddToList\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        ServerRoomAddToList.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a ServerRoomAddToList message.\n         * @function verify\n         * @memberof NT.ServerRoomAddToList\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        ServerRoomAddToList.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.room != null && message.hasOwnProperty(\"room\")) {\n                let error = $root.NT.ServerRoomAddToList.Room.verify(message.room);\n                if (error)\n                    return \"room.\" + error;\n            }\n            return null;\n        };\n\n        /**\n         * Creates a ServerRoomAddToList message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof NT.ServerRoomAddToList\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {NT.ServerRoomAddToList} ServerRoomAddToList\n         */\n        ServerRoomAddToList.fromObject = function fromObject(object) {\n            if (object instanceof $root.NT.ServerRoomAddToList)\n                return object;\n            let message = new $root.NT.ServerRoomAddToList();\n            if (object.room != null) {\n                if (typeof object.room !== \"object\")\n                    throw TypeError(\".NT.ServerRoomAddToList.room: object expected\");\n                message.room = $root.NT.ServerRoomAddToList.Room.fromObject(object.room);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a ServerRoomAddToList message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof NT.ServerRoomAddToList\n         * @static\n         * @param {NT.ServerRoomAddToList} message ServerRoomAddToList\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        ServerRoomAddToList.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults)\n                object.room = null;\n            if (message.room != null && message.hasOwnProperty(\"room\"))\n                object.room = $root.NT.ServerRoomAddToList.Room.toObject(message.room, options);\n            return object;\n        };\n\n        /**\n         * Converts this ServerRoomAddToList to JSON.\n         * @function toJSON\n         * @memberof NT.ServerRoomAddToList\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        ServerRoomAddToList.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Gets the default type url for ServerRoomAddToList\n         * @function getTypeUrl\n         * @memberof NT.ServerRoomAddToList\n         * @static\n         * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n         * @returns {string} The default type url\n         */\n        ServerRoomAddToList.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n            if (typeUrlPrefix === undefined) {\n                typeUrlPrefix = \"type.googleapis.com\";\n            }\n            return typeUrlPrefix + \"/NT.ServerRoomAddToList\";\n        };\n\n        ServerRoomAddToList.Room = (function() {\n\n            /**\n             * Properties of a Room.\n             * @memberof NT.ServerRoomAddToList\n             * @interface IRoom\n             * @property {string|null} [id] Room id\n             * @property {string|null} [name] Room name\n             * @property {number|null} [gamemode] Room gamemode\n             * @property {number|null} [curUsers] Room curUsers\n             * @property {number|null} [maxUsers] Room maxUsers\n             * @property {boolean|null} [\"protected\"] Room protected\n             * @property {string|null} [owner] Room owner\n             * @property {boolean|null} [locked] Room locked\n             */\n\n            /**\n             * Constructs a new Room.\n             * @memberof NT.ServerRoomAddToList\n             * @classdesc Represents a Room.\n             * @implements IRoom\n             * @constructor\n             * @param {NT.ServerRoomAddToList.IRoom=} [properties] Properties to set\n             */\n            function Room(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Room id.\n             * @member {string} id\n             * @memberof NT.ServerRoomAddToList.Room\n             * @instance\n             */\n            Room.prototype.id = \"\";\n\n            /**\n             * Room name.\n             * @member {string} name\n             * @memberof NT.ServerRoomAddToList.Room\n             * @instance\n             */\n            Room.prototype.name = \"\";\n\n            /**\n             * Room gamemode.\n             * @member {number} gamemode\n             * @memberof NT.ServerRoomAddToList.Room\n             * @instance\n             */\n            Room.prototype.gamemode = 0;\n\n            /**\n             * Room curUsers.\n             * @member {number} curUsers\n             * @memberof NT.ServerRoomAddToList.Room\n             * @instance\n             */\n            Room.prototype.curUsers = 0;\n\n            /**\n             * Room maxUsers.\n             * @member {number} maxUsers\n             * @memberof NT.ServerRoomAddToList.Room\n             * @instance\n             */\n            Room.prototype.maxUsers = 0;\n\n            /**\n             * Room protected.\n             * @member {boolean} protected\n             * @memberof NT.ServerRoomAddToList.Room\n             * @instance\n             */\n            Room.prototype[\"protected\"] = false;\n\n            /**\n             * Room owner.\n             * @member {string} owner\n             * @memberof NT.ServerRoomAddToList.Room\n             * @instance\n             */\n            Room.prototype.owner = \"\";\n\n            /**\n             * Room locked.\n             * @member {boolean} locked\n             * @memberof NT.ServerRoomAddToList.Room\n             * @instance\n             */\n            Room.prototype.locked = false;\n\n            /**\n             * Creates a new Room instance using the specified properties.\n             * @function create\n             * @memberof NT.ServerRoomAddToList.Room\n             * @static\n             * @param {NT.ServerRoomAddToList.IRoom=} [properties] Properties to set\n             * @returns {NT.ServerRoomAddToList.Room} Room instance\n             */\n            Room.create = function create(properties) {\n                return new Room(properties);\n            };\n\n            /**\n             * Encodes the specified Room message. Does not implicitly {@link NT.ServerRoomAddToList.Room.verify|verify} messages.\n             * @function encode\n             * @memberof NT.ServerRoomAddToList.Room\n             * @static\n             * @param {NT.ServerRoomAddToList.IRoom} message Room message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Room.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n                if (message.gamemode != null && Object.hasOwnProperty.call(message, \"gamemode\"))\n                    writer.uint32(/* id 3, wireType 0 =*/24).uint32(message.gamemode);\n                if (message.curUsers != null && Object.hasOwnProperty.call(message, \"curUsers\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).uint32(message.curUsers);\n                if (message.maxUsers != null && Object.hasOwnProperty.call(message, \"maxUsers\"))\n                    writer.uint32(/* id 5, wireType 0 =*/40).uint32(message.maxUsers);\n                if (message[\"protected\"] != null && Object.hasOwnProperty.call(message, \"protected\"))\n                    writer.uint32(/* id 6, wireType 0 =*/48).bool(message[\"protected\"]);\n                if (message.owner != null && Object.hasOwnProperty.call(message, \"owner\"))\n                    writer.uint32(/* id 7, wireType 2 =*/58).string(message.owner);\n                if (message.locked != null && Object.hasOwnProperty.call(message, \"locked\"))\n                    writer.uint32(/* id 8, wireType 0 =*/64).bool(message.locked);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Room message, length delimited. Does not implicitly {@link NT.ServerRoomAddToList.Room.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof NT.ServerRoomAddToList.Room\n             * @static\n             * @param {NT.ServerRoomAddToList.IRoom} message Room message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Room.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Room message from the specified reader or buffer.\n             * @function decode\n             * @memberof NT.ServerRoomAddToList.Room\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {NT.ServerRoomAddToList.Room} Room\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Room.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.NT.ServerRoomAddToList.Room();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1: {\n                            message.id = reader.string();\n                            break;\n                        }\n                    case 2: {\n                            message.name = reader.string();\n                            break;\n                        }\n                    case 3: {\n                            message.gamemode = reader.uint32();\n                            break;\n                        }\n                    case 4: {\n                            message.curUsers = reader.uint32();\n                            break;\n                        }\n                    case 5: {\n                            message.maxUsers = reader.uint32();\n                            break;\n                        }\n                    case 6: {\n                            message[\"protected\"] = reader.bool();\n                            break;\n                        }\n                    case 7: {\n                            message.owner = reader.string();\n                            break;\n                        }\n                    case 8: {\n                            message.locked = reader.bool();\n                            break;\n                        }\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Room message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof NT.ServerRoomAddToList.Room\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {NT.ServerRoomAddToList.Room} Room\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Room.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Room message.\n             * @function verify\n             * @memberof NT.ServerRoomAddToList.Room\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Room.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isString(message.id))\n                        return \"id: string expected\";\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    if (!$util.isString(message.name))\n                        return \"name: string expected\";\n                if (message.gamemode != null && message.hasOwnProperty(\"gamemode\"))\n                    if (!$util.isInteger(message.gamemode))\n                        return \"gamemode: integer expected\";\n                if (message.curUsers != null && message.hasOwnProperty(\"curUsers\"))\n                    if (!$util.isInteger(message.curUsers))\n                        return \"curUsers: integer expected\";\n                if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\"))\n                    if (!$util.isInteger(message.maxUsers))\n                        return \"maxUsers: integer expected\";\n                if (message[\"protected\"] != null && message.hasOwnProperty(\"protected\"))\n                    if (typeof message[\"protected\"] !== \"boolean\")\n                        return \"protected: boolean expected\";\n                if (message.owner != null && message.hasOwnProperty(\"owner\"))\n                    if (!$util.isString(message.owner))\n                        return \"owner: string expected\";\n                if (message.locked != null && message.hasOwnProperty(\"locked\"))\n                    if (typeof message.locked !== \"boolean\")\n                        return \"locked: boolean expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Room message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof NT.ServerRoomAddToList.Room\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {NT.ServerRoomAddToList.Room} Room\n             */\n            Room.fromObject = function fromObject(object) {\n                if (object instanceof $root.NT.ServerRoomAddToList.Room)\n                    return object;\n                let message = new $root.NT.ServerRoomAddToList.Room();\n                if (object.id != null)\n                    message.id = String(object.id);\n                if (object.name != null)\n                    message.name = String(object.name);\n                if (object.gamemode != null)\n                    message.gamemode = object.gamemode >>> 0;\n                if (object.curUsers != null)\n                    message.curUsers = object.curUsers >>> 0;\n                if (object.maxUsers != null)\n                    message.maxUsers = object.maxUsers >>> 0;\n                if (object[\"protected\"] != null)\n                    message[\"protected\"] = Boolean(object[\"protected\"]);\n                if (object.owner != null)\n                    message.owner = String(object.owner);\n                if (object.locked != null)\n                    message.locked = Boolean(object.locked);\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Room message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof NT.ServerRoomAddToList.Room\n             * @static\n             * @param {NT.ServerRoomAddToList.Room} message Room\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Room.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.id = \"\";\n                    object.name = \"\";\n                    object.gamemode = 0;\n                    object.curUsers = 0;\n                    object.maxUsers = 0;\n                    object[\"protected\"] = false;\n                    object.owner = \"\";\n                    object.locked = false;\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                if (message.name != null && message.hasOwnProperty(\"name\"))\n                    object.name = message.name;\n                if (message.gamemode != null && message.hasOwnProperty(\"gamemode\"))\n                    object.gamemode = message.gamemode;\n                if (message.curUsers != null && message.hasOwnProperty(\"curUsers\"))\n                    object.curUsers = message.curUsers;\n                if (message.maxUsers != null && message.hasOwnProperty(\"maxUsers\"))\n                    object.maxUsers = message.maxUsers;\n                if (message[\"protected\"] != null && message.hasOwnProperty(\"protected\"))\n                    object[\"protected\"] = message[\"protected\"];\n                if (message.owner != null && message.hasOwnProperty(\"owner\"))\n                    object.owner = message.owner;\n                if (message.locked != null && message.hasOwnProperty(\"locked\"))\n                    object.locked = message.locked;\n                return object;\n            };\n\n            /**\n             * Converts this Room to JSON.\n             * @function toJSON\n             * @memberof NT.ServerRoomAddToList.Room\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Room.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            /**\n             * Gets the default type url for Room\n             * @function getTypeUrl\n             * @memberof NT.ServerRoomAddToList.Room\n             * @static\n             * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default \"type.googleapis.com\")\n             * @returns {string} The default type url\n             */\n            Room.getTypeUrl = function getTypeUrl(typeUrlPrefix) {\n                if (typeUrlPrefix === undefined) {\n                    typeUrlPrefix = \"type.googleapis.com\";\n                }\n                return typeUrlPrefix + \"/NT.ServerRoomAddToList.Room\";\n            };\n\n            return Room;\n        })();\n\n        return ServerRoomAddToList;\n    })();\n\n    return NT;\n})();\n\nexport { $root as default };\n","import { NT } from './gen/pbjs_pb';\nimport { gameActions, lobbyActions } from './pbreflect';\n\nexport interface ActionCreator<T> {\n  (data: Exclude<T, undefined | null>, encoded: true): Uint8Array;\n  (data: Exclude<T, undefined | null>, encoded: false): NT.Envelope;\n  (data: Exclude<T, undefined | null>): NT.Envelope;\n}\n\nexport type GameActionCreators = {\n  [K in keyof NT.IGameAction]-?: ActionCreator<NT.IGameAction[K]>;\n};\nexport type LobbyActionCreators = {\n  [K in keyof NT.ILobbyAction]-?: ActionCreator<NT.ILobbyAction[K]>;\n};\n\n/**\n * Factory functions for each action type. Each function\n * accepts an action payload and returns an `NT.Envelope` instance\n *\n * @example\n * ```ts\n * M.cChat({ message: 'hi there' })\n * ```\n */\nexport const M: GameActionCreators & LobbyActionCreators = {} as any;\n\nfor (const key of gameActions) {\n  M[key] = ((data, encoded) =>\n    encoded\n      ? NT.Envelope.encode({ gameAction: { [key]: data } }).finish()\n      : NT.Envelope.fromObject({ gameAction: { [key]: data } })) as ActionCreator<NT.IGameAction[typeof key]>;\n}\nfor (const key of lobbyActions) {\n  M[key] = ((data, encoded) =>\n    encoded\n      ? NT.Envelope.encode({ lobbyAction: { [key]: data } }).finish()\n      : NT.Envelope.fromObject({ lobbyAction: { [key]: data } })) as ActionCreator<NT.ILobbyAction[typeof key]>;\n}\n"],"mappings":"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","names":["NT","NT"]}